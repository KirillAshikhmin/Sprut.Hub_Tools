// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const CONSTANTS = {
    ONE_DAY_MS: 24 * 60 * 60 * 1000, // 24 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    INVALID_VALUE: -100, // –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç –¥–∞—Ç—á–∏–∫–æ–≤ Aqara
    HYSTERESIS_FACTOR: 0.75, // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≥–∏—Å—Ç–µ—Ä–µ–∑–∏—Å–∞ (75% –æ—Ç –ø–æ—Ä–æ–≥–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏)
    DEFAULT_PRECISION_THRESHOLD: 0.1, // –ü–æ—Ä–æ–≥ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    MAX_PRECISION_THRESHOLD: 100.0, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Ç–æ—á–Ω–æ—Å—Ç–∏
    NOON_HOUR: 12, // –ß–∞—Å –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    DEBUG_CRON_SCHEDULE: "0 * * * * *", // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –ø—Ä–∏ debug
    DAILY_CRON_SCHEDULE: "0 12 * * * *" // –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ –ø–æ–ª–¥–µ–Ω—å
};

// –í—ã–Ω–æ—Å–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ info –∏ options
let scenarioName = {
    ru: "üå°Ô∏èüíß –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏ –≤–ª–∞–∂–Ω–æ—Å—Ç—å –≤ –∫–æ–º–Ω–∞—Ç–µ –∏–ª–∏ –¥–æ–º–µ",
    en: "üå°Ô∏èüíß Average temperature and humidity in room or house"
};

let scenarioDescription = {
    ru: "üå°Ô∏èüíß –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞ —Å —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–º–∏ –ø–æ–∫–∞–∑–∞–Ω–∏—è–º–∏\n\n" +
        "üìä –ß–¢–û –î–ï–õ–ê–ï–¢:\n" +
        "‚Ä¢ –°–æ–±–∏—Ä–∞–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å–æ –≤—Å–µ—Ö –¥–∞—Ç—á–∏–∫–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ –∏–ª–∏ –≤–æ –≤—Å–µ–º –¥–æ–º–µ, –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –µ–≥–æ –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥–∞—Ç—á–∏–∫\n" +
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ —Ç–∏–ø—É –¥–∞—Ç—á–∏–∫–∞ (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞/–≤–ª–∞–∂–Ω–æ—Å—Ç—å)\n" +
        "‚Ä¢ –§–∏–ª—å—Ç—Ä—É–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ—Ñ—Ñ–ª–∞–π–Ω —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –∑–Ω–∞—á–µ–Ω–∏–µ -100 (—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ Aqara —Å —Ä–∞–∑—Ä—è–∂–∞—é—â–µ–π—Å—è –±–∞—Ç–∞—Ä–µ–π–∫–æ–π))\n\n" +
         "üîß –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–ú–´–ï –°–ï–†–í–ò–°–´:\n" +
         "‚Ä¢ TemperatureSensor (–î–∞—Ç—á–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã)\n" +
         "‚Ä¢ Thermostat (–¢–µ—Ä–º–æ—Å—Ç–∞—Ç)\n" +
         "‚Ä¢ HeaterCooler (–û–±–æ–≥—Ä–µ–≤–∞—Ç–µ–ª—å/–æ—Ö–ª–∞–¥–∏—Ç–µ–ª—å)\n" +
         "‚Ä¢ HumiditySensor (–î–∞—Ç—á–∏–∫ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏)\n" +
         "‚Ä¢ HumidifierDehumidifier (–£–≤–ª–∞–∂–Ω–∏—Ç–µ–ª—å/–æ—Å—É—à–∏—Ç–µ–ª—å)\n\n" +
        "‚öíÔ∏è –ü–†–ò–ù–¶–ò–ü –†–ê–ë–û–¢–´:\n" +
        "–ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ:\n" +
        "‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π –¥–∞—Ç—á–∏–∫–æ–≤\n" +
        "‚Ä¢ –°–±–æ—Ä, —Ä–∞—Å—á–µ—Ç –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è\n" +
        "–ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π –¥–∞—Ç—á–∏–∫–æ–≤:\n" +
        "‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –≥–∏—Å—Ç–µ—Ä–µ–∑–∏—Å–∞ –∏ –ø–æ—Ä–æ–≥–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–∫–∞—á–∫–æ–≤\n\n" +
        "–ï–∂–µ—á–∞—Å–Ω–æ:\n" +
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–ø–∏—Å–∫–∞ –¥–∞—Ç—á–∏–∫–æ–≤\n" +
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n" +
        "‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö/–ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n" +
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –¥–∞—Ç—á–∏–∫–æ–≤",
     en: "üå°Ô∏èüíß Universal scenario for creating a virtual sensor with averaged readings\n\n" +
         "üìä WHAT IT DOES:\n" +
         "‚Ä¢ Collects readings from all sensors in the selected room or whole house, calculates average value and sets it to the virtual sensor\n" +
         "‚Ä¢ Automatically adapts to sensor type (temperature/humidity)\n" +
         "‚Ä¢ Filters invalid data (offline devices, -100 value (Aqara devices with low battery))\n\n" +
         "üîß SUPPORTED SERVICES:\n" +
         "‚Ä¢ TemperatureSensor (Temperature sensor)\n" +
         "‚Ä¢ Thermostat (Thermostat)\n" +
         "‚Ä¢ HeaterCooler (Heater/cooler)\n" +
         "‚Ä¢ HumiditySensor (Humidity sensor)\n" +
         "‚Ä¢ HumidifierDehumidifier (Humidifier/dehumidifier)\n\n" +
         "‚öíÔ∏è WORK PRINCIPLE:\n" +
         "On startup:\n" +
         "‚Ä¢ Subscription to sensor reading changes\n" +
         "‚Ä¢ Collection, calculation and setting of average value\n" +
         "On sensor reading changes:\n" +
         "‚Ä¢ Updating average value with hysteresis and precision threshold to prevent jumps\n\n" +
         "Hourly:\n" +
         "‚Ä¢ Checking sensor list relevance\n" +
         "‚Ä¢ Automatic addition of new devices\n" +
         "‚Ä¢ Removal of non-existent/moved devices\n" +
         "‚Ä¢ Checking sensor health"
};

info = {
    name: scenarioName.ru,
    description: scenarioDescription.ru,
    version: "1.0",
    author: "@BOOMikru",
    onStart: true,

    sourceServices: [HS.TemperatureSensor, HS.HumiditySensor],
    sourceCharacteristics: [HC.CurrentTemperature, HC.CurrentRelativeHumidity],

    options: {
        important: {
            name: {
                en: "‚ö†Ô∏è IMPORTANT",
                ru: "‚ö†Ô∏è –í–ê–ñ–ù–û"
            },
            desc: {
                ru: "–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π –¢–û–õ–¨–ö–û –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–∞—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏–ª–∏ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏!\n\n" +
                    "–î–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å –¥–∞—Ç—á–∏–∫–æ–≤ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏–ª–∏ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤–∫–ª—é—á–µ–Ω–∞ –ª–æ–≥–∏–∫–∞.\n\n" +
                    "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É, " +
                    "–Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç—å –∏ —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, –∞ –∑–∞—Ç–µ–º –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–º '–ê–∫—Ç–∏–≤–Ω–æ'.",
                en: "Activate the scenario ONLY on virtual temperature or humidity sensors.\n\n" +
                    "This logic receives readings from temperature or humidity sensors in the selected room and sets the average value to the device on which the logic is enabled.\n\n" +
                    "First select the room " +
                    "and set the precision and excluded devices list in settings, then activate the scenario with the 'Active' switch."
            },
            type: "String",
            value: "",
            formType: "status"
        },
        roomName: {
            name: {
                ru: "üè† –ö–æ–º–Ω–∞—Ç–∞",
                en: "üè† Room"
            },
            type: "String",
            value: "",
            formType: "list",
            values: getRoomsList(),
            desc: {
                ru: "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥—É—Ç –±—Ä–∞—Ç—å—Å—è –ø–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.\n\n" +
                    "üìã –í–∞—Ä–∏–∞–Ω—Ç—ã:\n" +
                    "‚Ä¢ üö™ –ö–æ–º–Ω–∞—Ç–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–º–Ω–∞—Ç–∞ –≤ –∫–æ—Ç–æ—Ä–æ–π —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤–∫–ª—é—á–µ–Ω–∞ –ª–æ–≥–∏–∫–∞\n" +
                    "‚Ä¢ üè† –í–µ—Å—å –¥–æ–º - —Å–æ–±–∏—Ä–∞–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å–æ –≤—Å–µ—Ö –¥–∞—Ç—á–∏–∫–æ–≤ –≤–æ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç–∞—Ö –¥–æ–º–∞\n" +
                    "‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ - –≤—ã–±–µ—Ä–∏—Ç–µ –ª—é–±—É—é –∫–æ–º–Ω–∞—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞",
                en: "Select room for averaging readings.\n\n" +
                    "üìã Options:\n" +
                    "‚Ä¢ üö™ Device room - uses room where the device is located, on which the logic is enabled\n" +
                    "‚Ä¢ üè† Whole house - collects readings from all sensors in all rooms\n" +
                    "‚Ä¢ Specific room - choose any room from the list"
            }
        },
        precisionThreshold: {
            name: {
                ru: "üìè –¢–æ—á–Ω–æ—Å—Ç—å",
                en: "üìè Precision"
            },
            type: "Double",
            value: CONSTANTS.DEFAULT_PRECISION_THRESHOLD,
            minValue: 0.0,
            maxValue: CONSTANTS.MAX_PRECISION_THRESHOLD,
            step: 0.01,
            desc: {
                ru: "–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç, –∫–∞–∫ —á–∞—Å—Ç–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.\n\n" +
                    "üìä –ù–∞–ø—Ä–∏–º–µ—Ä –ø—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏–∏ 0.5, –∑–Ω–∞—á–µ–Ω–∏–µ —É –¥–∞—Ç—á–∏–∫–∞ –±—É–¥–µ—Ç –∫—Ä–∞—Ç–Ω–æ 0.5 (21.5, 22.0, 22.5 –∏ —Ç.–¥.)\n\n" +
                    "üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ:\n" +
                    "‚Ä¢ –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —á–∞—Å—Ç—ã–µ —Å–∫–∞—á–∫–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π\n" +
                    "‚Ä¢ –£–º–µ–Ω—å—à–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é\n",
                en: "Controls how often the average value will be updated.\n\n" +
                    "üìä For example, at a value of 0.5, the value of the sensor will be a multiple of 0.5 (21.5, 22.0, 22.5, etc.)\n\n" +
                    "üí° Why needed:\n" +
                    "‚Ä¢ Prevents frequent value jumps\n" +
                    "‚Ä¢ Decreases history records\n"
            }
        },
        excludedDevices: {
            name: {
                ru: "üö´ –ò—Å–∫–ª—é—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
                en: "üö´ Exclude devices"
            },
            type: "String",
            value: "",
            desc: {
                ru: "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –±—É–¥—É—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–∞—Å—á–µ—Ç–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.\n" +
                    "–§–æ—Ä–º–∞—Ç—ã: ID –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞ –∏–ª–∏ ID –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞.ID —Å–µ—Ä–≤–∏—Å–∞ " +
                    "(15, 133.17, 42, 25.13)",
                en: "Devices that will NOT participate in calculating the average value.\n" +
                    "Formats: accessory ID or accessory ID.service ID " +
                    "(15.13, 133.17, 42, 25.13)"
            }
        },
        desc: {
            name: {
                en: "‚ÑπÔ∏è DESCRIPTION",
                ru: "‚ÑπÔ∏è –û–ü–ò–°–ê–ù–ò–ï"
            },
            desc: scenarioDescription,
            type: "String",
            value: "",
            formType: "status"
        },
        debug: {
            name: {
                ru: "üîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏",
                en: "üîß Debug mode"
            },
            type: "Boolean",
            value: false,
            desc: {
                ru: "–í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–∫–ª—é—á–∞—Ç—å –¥–ª—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)",
                en: "Enable debug messages in console (not recommended to enable for daily use)"
            }
        }
    },

    variables: {
        initialized: false,
        roomName: "",
        characteristicType: null,
        devicesData: {}, // –•—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º: {deviceId: {value, online, lastUpdate}}
        lastAverageValue: null,
        currentRoom: "", // –¢–µ–∫—É—â–∞—è –∫–æ–º–Ω–∞—Ç–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        noonTask: null // Cron –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    }
};

function trigger(source, value, variables, options, context) {
    try {
        const service = source.getService();
        const accessory = service.getAccessory();
        const characteristicType = source.getType();
        const currentRoom = accessory.getRoom().getName();

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É
        let targetRoomName = options.roomName;
        if (!targetRoomName || targetRoomName === "") {
            targetRoomName = currentRoom;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –∏–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
        const roomChanged = variables.currentRoom !== currentRoom;
        const firstRun = !variables.initialized;

        if (roomChanged || firstRun) {
            // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–ø—Ü–∏–∏
            validateOptions(options);

            // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–æ–º–Ω–∞—Ç—ã
            if (roomChanged && variables.initialized) {
                if (options.debug) {
                    console.info(`–ö–æ–º–Ω–∞—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —Å "${variables.currentRoom}" –Ω–∞ "${currentRoom}". –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...`);
                }
                clearVariables(variables);
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏–ª–∏ –≤–ª–∞–∂–Ω–æ—Å—Ç—å)
            variables.characteristicType = characteristicType;
            variables.roomName = targetRoomName;
            variables.currentRoom = currentRoom;
            variables.currentServiceId = source.getService().getUUID();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –∏–ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º "–í–µ—Å—å –¥–æ–º"
            const rooms = Hub.getRooms();
            let targetRoom = null;

            if (targetRoomName === "__WHOLE_HOUSE__") {
                // –î–ª—è "–í–µ—Å—å –¥–æ–º" –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
                targetRoom = "__WHOLE_HOUSE__";
            } else {
                // –ò—â–µ–º –∫–æ–º–Ω–∞—Ç—É –ø–æ –∏–º–µ–Ω–∏
                for (let i = 0; i < rooms.length; i++) {
                    if (rooms[i].getName() === targetRoomName) {
                        targetRoom = rooms[i];
                        break;
                    }
                }

                if (!targetRoom) {
                    console.error(`–ö–æ–º–Ω–∞—Ç–∞ "${targetRoomName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!`);
                    return;
                }
            }

            if (options.debug) {
                const displayName = targetRoomName === "__WHOLE_HOUSE__" ? "–í–µ—Å—å –¥–æ–º" : targetRoomName;
                console.info(`–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è ${getCharacteristicName(characteristicType)} –¥–ª—è: ${displayName}`);
            }

            // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º –≤ –∫–æ–º–Ω–∞—Ç–µ
            collectDevicesData(targetRoom, characteristicType, variables, options, source);

            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            subscribeToChanges(characteristicType, variables, source, options);

            // –í—ã—á–∏—Å–ª—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            calculateAndSetAverage(source, variables, options);

            // –°–æ–∑–¥–∞–µ–º cron –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–∞—Ç—á–∏–∫–æ–≤
            if (!variables.noonTask) {
                // –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ –ø–æ–ª–¥–µ–Ω—å, –µ—Å–ª–∏ debug –≤–∫–ª—é—á–µ–Ω - –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                const cronSchedule = options.debug ? CONSTANTS.DEBUG_CRON_SCHEDULE : CONSTANTS.DAILY_CRON_SCHEDULE;
                variables.noonTask = Cron.schedule(cronSchedule, function () {
                    checkSensorsUpdates(variables, options);
                });
            }

            variables.initialized = true;
        }

    } catch (e) {
        console.error(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è: ${e.message}`);
    }
}

function clearVariables(variables) {
    // –û—á–∏—â–∞–µ–º cron –∑–∞–¥–∞—á—É
    if (variables.noonTask) {
        variables.noonTask.clear();
        variables.noonTask = null;
    }

    variables.initialized = false;
    variables.roomName = "";
    variables.characteristicType = null;
    variables.devicesData = {};
    variables.lastAverageValue = null;
    variables.currentRoom = "";
    variables.currentServiceId = null;
}

function isValidData(value, online) {
    return online && value !== CONSTANTS.INVALID_VALUE && value !== null && value !== undefined;
}

function parseExcludedDevices(excludedDevicesString) {
    const excluded = {
        accessories: [], // ID –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
        services: []     // ID –∞–∫—Å–µ—Å—Å—É–∞—Ä.—Å–µ—Ä–≤–∏—Å
    };

    if (!excludedDevicesString || excludedDevicesString.trim() === "") {
        return excluded;
    }

    const devices = excludedDevicesString.split(',');

    for (let i = 0; i < devices.length; i++) {
        const device = devices[i].trim();
        if (device.length > 0) {
            if (device.indexOf('.') >= 0) {
                // –§–æ—Ä–º–∞—Ç: –∞–∫—Å–µ—Å—Å—É–∞—Ä.—Å–µ—Ä–≤–∏—Å
                excluded.services.push(device);
            } else {
                // –§–æ—Ä–º–∞—Ç: –∞–∫—Å–µ—Å—Å—É–∞—Ä
                excluded.accessories.push(device);
            }
        }
    }

    return excluded;
}

function isDeviceExcluded(accessoryId, serviceId, excludedDevices) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ ID –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞
    if (excludedDevices.accessories.indexOf(accessoryId.toString()) >= 0) {
        return true;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ ID –∞–∫—Å–µ—Å—Å—É–∞—Ä.—Å–µ—Ä–≤–∏—Å
    const serviceKey = accessoryId + '.' + serviceId;
    if (excludedDevices.services.indexOf(serviceKey) >= 0) {
        return true;
    }

    return false;
}

function collectDevicesData(room, characteristicType, variables, options, source, onlyNew = false) {
    try {
        let roomAccessories = [];
        
        // –ï—Å–ª–∏ room === "__WHOLE_HOUSE__", –∏—Å–ø–æ–ª—å–∑—É–µ–º Hub.getAccessories() –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
        if (room === "__WHOLE_HOUSE__") {
            roomAccessories = Hub.getAccessories();
        } else {
            roomAccessories = room.getAccessories();
        }
        
        if (!onlyNew) {
            variables.devicesData = {};
        }
        const excludedDevices = parseExcludedDevices(options.excludedDevices);
        let newDevices = [];

        roomAccessories.forEach(accessory => {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (—Ç–æ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π)
            if (source && accessory.getUUID() === source.getAccessory().getUUID()) {
                return;
            }

            // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å–µ—Ä–≤–∏—Å–∞–º –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞ –≤ –ø–æ–∏—Å–∫–∞—Ö –Ω—É–∂–Ω–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            const services = accessory.getServices();
            services.forEach(service => {
                const characteristic = service.getCharacteristic(characteristicType);
                if (characteristic) {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á: service.getUUID() —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "AccessoryId.ServiceId"
                    const deviceKey = service.getUUID();

                    // –ï—Å–ª–∏ –∏—â–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
                    if (onlyNew && variables.devicesData[deviceKey]) {
                        return;
                    }

                    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–µ—Ä–≤–∏—Å (—Ç–æ—Ç, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π)
                    if (variables.currentServiceId && deviceKey === variables.currentServiceId) {
                        return;
                    }

                    const onlineStatus = accessory.getService(HS.AccessoryInformation).getCharacteristic(HC.C_Online).getValue();
                    const currentValue = characteristic.getValue();

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–∫–ª—é—á–µ–Ω–æ –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
                    const isExcluded = isDeviceExcluded(accessory.getUUID(), service.getUUID(), excludedDevices);

                    variables.devicesData[deviceKey] = {
                        value: currentValue,
                        online: onlineStatus,
                        lastUpdate: Date.now(),
                        service: service,
                        excluded: isExcluded,
                        accessoryId: accessory.getUUID(),
                        serviceId: service.getUUID().split('.')[1], // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ ServiceId –±–µ–∑ AccessoryId
                        deviceName: accessory.getName(),
                        serviceName: service.getName()
                    };

                    if (onlyNew) {
                        newDevices.push(`${accessory.getName()}(${service.getName()})`);
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                    if (!isValidData(currentValue, onlineStatus) && !isExcluded) {
                        if (options.debug) {
                            if (!onlineStatus) {
                                console.warn(`–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${accessory.getName()} –Ω–µ –≤ —Å–µ—Ç–∏`);
                            }
                            if (currentValue === CONSTANTS.INVALID_VALUE) {
                                console.warn(`–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${accessory.getName()} –ø–µ—Ä–µ–¥–∞–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${CONSTANTS.INVALID_VALUE}`);
                            }
                        }
                    }

                    if (isExcluded && options.debug) {
                        console.info(`–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${accessory.getName()} (${service.getName()}) –∏—Å–∫–ª—é—á–µ–Ω–æ –∏–∑ —Ä–∞—Å—á–µ—Ç–∞`);
                    }
                }
            });
        });

        return onlyNew ? newDevices : undefined;
    } catch (e) {
        console.error(`–û—à–∏–±–∫–∞ –≤ collectDevicesData: ${e.message}`);
        return onlyNew ? [] : undefined;
    }
}

function subscribeToChanges(characteristicType, variables, source, options) {
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    // –í—ã–±–∏—Ä–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    let serviceTypes = [];
    if (characteristicType === HC.CurrentTemperature) {
        serviceTypes = [HS.TemperatureSensor, HS.Thermostat, HS.HeaterCooler];
    } else if (characteristicType === HC.CurrentRelativeHumidity) {
        serviceTypes = [HS.HumiditySensor, HS.Thermostat, HS.HumidifierDehumidifier];
    }
    const characteristics = [characteristicType];

    Hub.subscribeWithCondition("", "", serviceTypes, characteristics, function (sensorSource, sensorValue) {
        try {
            const service = sensorSource.getService();
            if (!service) return;

            const accessory = service.getAccessory();
            if (!accessory) return;

            const deviceKey = service.getUUID();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–∑ –Ω–∞—à–µ–π –∫–æ–º–Ω–∞—Ç—ã
            if (variables.devicesData[deviceKey]) {
                const infoService = accessory.getService(HS.AccessoryInformation);
                if (!infoService) return;

                const onlineCharacteristic = infoService.getCharacteristic(HC.C_Online);
                if (!onlineCharacteristic) return;

                const onlineStatus = onlineCharacteristic.getValue();

                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                variables.devicesData[deviceKey].value = sensorValue;
                variables.devicesData[deviceKey].online = onlineStatus;
                variables.devicesData[deviceKey].lastUpdate = Date.now();

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                if (!isValidData(sensorValue, onlineStatus) && !variables.devicesData[deviceKey].excluded) {
                    if (options.debug) {
                        if (!onlineStatus) {
                            console.warn(`–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${accessory.getName()} –Ω–µ –≤ —Å–µ—Ç–∏`);
                        }
                        if (sensorValue === CONSTANTS.INVALID_VALUE) {
                            console.warn(`–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${accessory.getName()} –ø–µ—Ä–µ–¥–∞–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${CONSTANTS.INVALID_VALUE}`);
                        }
                    }
                }

                // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω–æ
                if (!variables.devicesData[deviceKey].excluded) {
                    calculateAndSetAverage(source, variables, options);
                }
            }
        } catch (e) {
            console.error(`–û—à–∏–±–∫–∞ –≤ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: ${e.message}`);
        }
    });
}

function calculateAndSetAverage(source, variables, options) {
    try {
        let validValues = [];
        let totalValue = 0;
        let validCount = 0;
        let deviceDetails = []; // –î–µ—Ç–∞–ª–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞

        // –°–æ–±–∏—Ä–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–∏—Å–∫–ª—é—á–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞)
        const deviceKeys = Object.keys(variables.devicesData);
        for (let i = 0; i < deviceKeys.length; i++) {
            const deviceKey = deviceKeys[i];
            const deviceData = variables.devicesData[deviceKey];

            // –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            if (isValidData(deviceData.value, deviceData.online) && !deviceData.excluded) {
                validValues.push(deviceData.value);
                totalValue += deviceData.value;
                validCount++;

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ deviceData
                deviceDetails.push({
                    name: deviceData.deviceName,
                    serviceName: deviceData.serviceName,
                    accessoryId: deviceData.accessoryId,
                    value: deviceData.value
                });
            }
        }

        if (validCount > 0) {
            const averageValue = totalValue / validCount;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN –∏ Infinity
            if (isNaN(averageValue) || !isFinite(averageValue)) {
                console.error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${averageValue}. –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(validValues)}`);
                return;
            }
            const precisionThreshold = options.precisionThreshold || CONSTANTS.DEFAULT_PRECISION_THRESHOLD;

            // –û–∫—Ä—É–≥–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ –∫—Ä–∞—Ç–Ω–æ–≥–æ precisionThreshold
            let roundedValue = averageValue;
            if (precisionThreshold > 0) {
                roundedValue = Math.round(averageValue / precisionThreshold) * precisionThreshold;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä–æ–≥ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –≥–∏—Å—Ç–µ—Ä–µ–∑–∏—Å–∞
            const lastValue = variables.lastAverageValue || 0;

            // –ì–∏—Å—Ç–µ—Ä–µ–∑–∏—Å: "–º–µ—Ä—Ç–≤–∞—è –∑–æ–Ω–∞" –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–∫–∞—á–∫–æ–≤ —Ç—É–¥–∞-—Å—é–¥–∞
            let valueChanged = false;

            // –ú–µ—Ä—Ç–≤–∞—è –∑–æ–Ω–∞: 75% –æ—Ç –ø–æ—Ä–æ–≥–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤–æ–∫—Ä—É–≥ —Ç–µ–∫—É—â–µ–≥–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            const hysteresisZone = precisionThreshold * CONSTANTS.HYSTERESIS_FACTOR;
            const lowerBound = lastValue - hysteresisZone;
            const upperBound = lastValue + hysteresisZone;

            if (lastValue === 0) {
                // –ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
                valueChanged = true;
            } else {
                // –ó–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω—è–µ—Ç—Å—è, –µ—Å–ª–∏ –æ–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—à–ª–æ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã "–º–µ—Ä—Ç–≤–æ–π –∑–æ–Ω—ã" –≤–æ–∫—Ä—É–≥ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
                if (averageValue < lowerBound || averageValue > upperBound) {
                    valueChanged = true;
                }
            }

            const charName = getCharacteristicName(variables.characteristicType);
            const deviceList = deviceDetails.map(d => `${d.name} (${d.serviceName}, ${d.accessoryId}): ${d.value.toFixed(2)}`).join(' | ');
            const displayRoomName = variables.roomName === "__WHOLE_HOUSE__" ? "–í–µ—Å—å –¥–æ–º" : variables.roomName;

            if (valueChanged) {
                source.setValue(roundedValue);
                variables.lastAverageValue = roundedValue;
                if (options.debug) {
                    console.info(`–£–°–¢–ê–ù–û–í–õ–ï–ù–ê. –°—Ä–µ–¥–Ω—è—è ${charName}: ${roundedValue.toFixed(2)} (—Ç–æ—á–Ω–æ–µ: ${averageValue.toFixed(2)}) –≤ "${displayRoomName}" - –≤—ã—à–ª–æ –∏–∑ –º–µ—Ä—Ç–≤–æ–π –∑–æ–Ω—ã [${lowerBound.toFixed(2)}-${upperBound.toFixed(2)}] –≤–æ–∫—Ä—É–≥ ${lastValue.toFixed(2)} (–∏–∑ ${validCount} —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ${deviceList})`);
                }
            } else {
                if (options.debug) {
                    console.info(`–ü–†–û–ü–£–°–ö. –°—Ä–µ–¥–Ω—è—è ${charName}: ${roundedValue.toFixed(2)} (—Ç–æ—á–Ω–æ–µ: ${averageValue.toFixed(2)}) –≤ "${displayRoomName}" - –≤ –º–µ—Ä—Ç–≤–æ–π –∑–æ–Ω–µ [${lowerBound.toFixed(2)}-${upperBound.toFixed(2)}] –≤–æ–∫—Ä—É–≥ ${lastValue.toFixed(2)} (–∏–∑ ${validCount} —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ${deviceList})`);
                }
            }
        } else {
            const displayRoomName = variables.roomName === "__WHOLE_HOUSE__" ? "–í–µ—Å—å –¥–æ–º" : variables.roomName;
            console.warn(`–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–π ${getCharacteristicName(variables.characteristicType)} –≤ "${displayRoomName}"`);
        }
    } catch (e) {
        console.error(`–û—à–∏–±–∫–∞ –≤ calculateAndSetAverage: ${e.message}`);
    }
}

function getCharacteristicName(characteristicType) {
    if (characteristicType === HC.CurrentTemperature) {
        return "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã";
    } else if (characteristicType === HC.CurrentRelativeHumidity) {
        return "–≤–ª–∞–∂–Ω–æ—Å—Ç–∏";
    }
    return "?";
}

function checkSensorsUpdates(variables, options) {
    try {
        const oneDayMs = CONSTANTS.ONE_DAY_MS;
        const currentTime = Date.now();
        let hasRecentUpdates = false;
        let offlineDevices = [];
        let invalidDataDevices = [];
        let removedDevices = [];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª–¥–µ–Ω—å –ª–∏ —Å–µ–π—á–∞—Å (–¥–ª—è –≤—ã–≤–æ–¥–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π)
        const now = new Date();
        const isNoon = now.getHours() === CONSTANTS.NOON_HOUR && now.getMinutes() === 0;
        const shouldShowWarnings = options.debug || isNoon;

        const deviceKeys = Object.keys(variables.devicesData);
        for (let i = 0; i < deviceKeys.length; i++) {
            const deviceKey = deviceKeys[i];
            try {
                const deviceData = variables.devicesData[deviceKey];
                if (!deviceData) return;

                const timeSinceUpdate = currentTime - deviceData.lastUpdate;

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ —Å–µ—Ä–≤–∏—Å–∞ –≤ —Ö–∞–±–µ
                const accessory = Hub.getAccessory(deviceData.accessoryId);
                if (!accessory) {
                    const deviceName = deviceData.deviceName || deviceData.accessoryId;
                    removedDevices.push(`–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${deviceName} (—É–¥–∞–ª–µ–Ω–æ –∏–∑ —Ö–∞–±–∞)`);
                    delete variables.devicesData[deviceKey];
                    return;
                }

                const service = accessory.getService(deviceData.serviceId);
                if (!service) {
                    const deviceName = deviceData.deviceName || deviceData.accessoryId;
                    removedDevices.push(`–°–µ—Ä–≤–∏—Å ${deviceName}.${deviceData.serviceId} (—É–¥–∞–ª–µ–Ω –∏–∑ —Ö–∞–±–∞)`);
                    delete variables.devicesData[deviceKey];
                    return;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—Å–µ –µ—â–µ –≤ —Ç–æ–π –∂–µ –∫–æ–º–Ω–∞—Ç–µ (–∫—Ä–æ–º–µ —Å–ª—É—á–∞—è "–í–µ—Å—å –¥–æ–º")
                if (variables.roomName !== "__WHOLE_HOUSE__") {
                    const deviceRoom = accessory.getRoom();
                    if (!deviceRoom || deviceRoom.getName() !== variables.roomName) {
                        const deviceName = deviceData.deviceName || accessory.getName();
                        removedDevices.push(`–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${deviceName} (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ –¥—Ä—É–≥—É—é –∫–æ–º–Ω–∞—Ç—É: ${deviceRoom ? deviceRoom.getName() : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})`);
                        delete variables.devicesData[deviceKey];
                        return;
                    }
                }

                if (timeSinceUpdate < oneDayMs) {
                    hasRecentUpdates = true;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏ –≤—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                if (!deviceData.excluded) {
                    if (!deviceData.online) {
                        offlineDevices.push(deviceData.deviceName || deviceData.accessoryId);
                    }
                    if (deviceData.value === CONSTANTS.INVALID_VALUE) {
                        invalidDataDevices.push(deviceData.deviceName || deviceData.accessoryId);
                    }
                }
            } catch (e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                if (options.debug) {
                    console.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ${deviceKey}: ${e.message}`);
                }
                // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
                delete variables.devicesData[deviceKey];
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ –Ω–æ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ
        let currentRoom = null;
        if (variables.roomName === "__WHOLE_HOUSE__") {
            currentRoom = "__WHOLE_HOUSE__";
        } else {
            const rooms = Hub.getRooms();
            for (let i = 0; i < rooms.length; i++) {
                if (rooms[i].getName() === variables.roomName) {
                    currentRoom = rooms[i];
                    break;
                }
            }
        }

        if (currentRoom) {
            const newDevices = collectDevicesData(currentRoom, variables.characteristicType, variables, options, null, true);
            if (newDevices.length > 0) {
                console.info(`–ù–æ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ä–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π: ${newDevices.join(', ')}`);
            }
        }

        // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
        if (removedDevices.length > 0) {
            console.info(`–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –±–æ–ª—å—à–µ –Ω–µ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ —Ä–∞—Å—á–µ—Ç–µ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π: ${removedDevices.join(', ')}`);
        }

        // –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –≤ –ø–æ–ª–¥–µ–Ω—å –∏–ª–∏ –ø—Ä–∏ debug
        if (shouldShowWarnings) {
            if (offlineDevices.length > 0) {
                console.warn(`–í–ù–ò–ú–ê–ù–ò–ï: –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –≤ —Å–µ—Ç–∏: ${offlineDevices.join(', ')}`);
            }
            if (invalidDataDevices.length > 0) {
                console.warn(`–í–ù–ò–ú–ê–ù–ò–ï: –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–µ—Ä–µ–¥–∞—é—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (${CONSTANTS.INVALID_VALUE}): ${invalidDataDevices.join(', ')}`);
            }
        }

        if (!hasRecentUpdates) {
            const charName = getCharacteristicName(variables.characteristicType);
            const displayRoomName = variables.roomName === "__WHOLE_HOUSE__" ? "–í–µ—Å—å –¥–æ–º" : variables.roomName;
            console.error(`–í–ù–ò–ú–ê–ù–ò–ï: –ù–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç –¥–∞—Ç—á–∏–∫–æ–≤ ${charName} –≤ —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫ –∏–ª–∏ –±–æ–ª–µ–µ –≤ "${displayRoomName}"`);
        }
    } catch (e) {
        console.error(`–û—à–∏–±–∫–∞ –≤ checkSensorsUpdates: ${e.message}`);
    }
}

function validateOptions(options) {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ—Ä–æ–≥–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏
    if (options.precisionThreshold === null || options.precisionThreshold === undefined || options.precisionThreshold < 0) {
        console.error("–ü–æ—Ä–æ–≥ —Ç–æ—á–Ω–æ—Å—Ç–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ: 0");
        options.precisionThreshold = 0;
    }

    if (options.precisionThreshold > CONSTANTS.MAX_PRECISION_THRESHOLD) {
        console.warn(`–ü–æ—Ä–æ–≥ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${CONSTANTS.MAX_PRECISION_THRESHOLD}`);
        options.precisionThreshold = CONSTANTS.MAX_PRECISION_THRESHOLD;
    }
}

function getRoomsList() {
    let roomsList = [];
    roomsList.push({ name: { ru: "üö™ –ö–æ–º–Ω–∞—Ç–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", en: "üö™ Device room" }, value: "" });
    roomsList.push({ name: { ru: "üè† –í–µ—Å—å –¥–æ–º", en: "üè† Whole house" }, value: "__WHOLE_HOUSE__" });

    const rooms = Hub.getRooms();
    rooms.forEach(room => {
        roomsList.push({
            name: { ru: room.getName(), en: room.getName() },
            value: room.getName()
        });
    });

    return roomsList;
}
