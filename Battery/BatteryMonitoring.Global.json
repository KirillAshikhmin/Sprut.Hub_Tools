{
  "scenarioTemplate": {
    "name": "BatteryMonitoring.Global",
    "desc": "",
    "active": true,
    "onStart": true,
    "sync": false,
    "data": "const blackListAccessories = [];\nconst whiteListAccessories = [];\n\nfunction getBatteriesInfo(fullInfo, blackList, whiteList) {\n\n    let states = GlobalVariables[\"batteryStateScenario\"]\n    if (!states) GlobalVariables[\"batteryStateScenario\"] = []\n\n    let black = blackListAccessories\n    let white = whiteListAccessories\n    if (Array.isArray(blackList)) { blackList.forEach(function (i) { black.push(i) }) } else if (blackList != undefined && blackList.length > 0) black.push(blackList)\n    if (Array.isArray(whiteList)) { whiteList.forEach(function (i) { white.push(i) }) } else if (whiteList != undefined && whiteList.length > 0) white.push(whiteList)\n\n    let withLowBattery = []\n    let normalBattery = []\n    let withoutLogic = []\n    let batteries = {};\n    Hub.getAccessories().forEach(function (accessory) {\n        const uuid = accessory.getUUID()\n        if (white.length > 0 && white.indexOf(uuid) < 0) return\n        if (black.indexOf(uuid) >= 0) return\n        let service = accessory.getService(HS.BatteryService)\n        if (service == null) return\n        let state = GlobalVariables[\"batteryStateScenario\"][uuid]\n        if (state == undefined) {\n            const level = service.getCharacteristic(HC.BatteryLevel).getValue()\n            const charging = service.getCharacteristic(HC.ChargingState).getValue() == 1\n            const lowBattery = service.getCharacteristic(HC.StatusLowBattery).getValue()\n\n            state = {\n                uuid: uuid,\n                name: accessory.getName(),\n                room: accessory.getRoom().getName(),\n                manufacturer: accessory.getManufacturer(),\n                model: accessory.getModel(),\n                level: level,\n                lowBattery: lowBattery,\n                charging: charging,\n                logicEnabled: false\n            }\n        } else {\n            state.logicEnabled = true\n        }\n\n        if (state.lowBattery) withLowBattery.push(state)\n        else normalBattery.push(state)\n        if (state.logicEnabled != true) withoutLogic.push(state)\n        if (state.lowBattery && state.batteryType != undefined && state.batteryType != \"\") {\n            let count = batteries[state.batteryType]\n            if (count == undefined) count = state.quantity\n            else count += state.quantity\n            batteries[state.batteryType] = count\n        }\n\n    })\n    GlobalVariables.batteriesForChange = batteries\n\n    withLowBattery = withLowBattery.sort(function (a, b) { return a.room.localeCompare(b.room); })\n    normalBattery = normalBattery.sort(function (a, b) { return a.room.localeCompare(b.room); })\n    withoutLogic = withoutLogic.sort(function (a, b) { return a.room.localeCompare(b.room); })\n\n    let hasWithLowBattery = withLowBattery.length > 0\n    if (global.sendToTelegram !== undefined) {\n        let textArray = [\"*üîã –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–π:*\"]\n        if (hasWithLowBattery > 0) {\n            textArray.push(\"‚ùóÔ∏è *–†–∞–∑—Ä—è–∂–µ–Ω—ã:*\")\n            withLowBattery.forEach(function (state) {\n                formatStateToTg(textArray, state)\n            })\n\n            let batKeys = Object.keys(batteries)\n            if (batKeys.length > 0) {\n                textArray.push(\"üîã  *–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∑–∞–º–µ–Ω—ã:*\")\n                batKeys.forEach(function (type) {\n                    textArray.push(type + \" \" + batteries[type] + \" —à—Ç.\")\n                })\n            }\n        } else {\n            if (!fullInfo) textArray.push(\"–í—Å–µ –±–∞—Ç–∞—Ä–µ–∏ –∑–∞—Ä—è–∂–µ–Ω—ã\")\n        }\n        if (fullInfo) {\n            if (normalBattery.length > 0 && withoutLogic.length > 0 && hasWithLowBattery) {\n                textArray.push(\"\")\n                textArray.push(\"####################################\")\n                textArray.push(\"\")\n            }\n            if (normalBattery.length > 0) {\n                textArray.push(\"üëå *–í –Ω–æ—Ä–º–µ:*\")\n                normalBattery.forEach(function (state) {\n                    formatStateToTg(textArray, state, true)\n                })\n            }\n\n            if (withoutLogic.length > 0) {\n                textArray.push(\"\")\n                textArray.push(\"ü´µ *–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –±–µ–∑ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏:*\")\n                withoutLogic.forEach(function (state) {\n                    formatStateToTg(textArray, state, true, true)\n                })\n            }\n        }\n        global.sendToTelegram(textArray);\n    }\n    {\n        let text = \"\"\n        if (withLowBattery.length > 0) {\n\n            text += \"üîã‚ùóÔ∏è –†–∞–∑—Ä—è–∂—ë–Ω–Ω—ã–µ –±–∞—Ç–∞—Ä–µ–∏: \"\n            withLowBattery.forEach(function (state) {\n                text += formatStateToInfo(state)\n            })\n\n            let batKeys = Object.keys(batteries)\n            if (batKeys.length > 0) {\n                text += \"üîã –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∑–∞–º–µ–Ω—ã: \"\n                batKeys.forEach(function (type) {\n                    text += type + \" \" + batteries[type] + \" —à—Ç. \"\n                })\n            }\n        }\n        if (text == \"\") text = \"–í—Å–µ –±–∞—Ç–∞—Ä–µ–∏ –∑–∞—Ä—è–∂–µ–Ω—ã\"\n        Notify.text(text).send()\n    }\n}\n\nfunction formatStateToInfo(state) {\n    return state.room + \" -> \" + state.name +\n        (state.placement != \"\" && state.placement != undefined ? \". \" + state.placement.trim() : \"\") + \" (ID: \" + state.uuid + \")\" +\n        \" \" + state.level + \"% | \"\n}\n\nfunction formatStateToTg(textArray, state, compact, noShowLevel) {\n    if (compact == true) {\n        textArray.push(\n            state.room + \" -> \" + state.name +\n            (state.placement != \"\" && state.placement != undefined ? \". \" + state.placement.trim() : \"\") + \" (ID: \" + state.uuid + \")\" +\n            (!noShowLevel ? (\" *\" + state.level + \"%*\") : \"\")\n        )\n    } else {\n        textArray.push(state.room + \" -> \" + state.name + \" (ID: \" + state.uuid + \")\")\n        if (state.placement != undefined && state.placement != \"\") textArray.push(state.placement.trim())\n        textArray.push(\"–ó–∞—Ä—è–¥: \" + state.level + \"%\")\n        if (state.batteryType != undefined && state.batteryType != \"\" && state.batteryType != \"-\") textArray.push(\"–¢–∏–ø: \" + state.batteryType + \" (\" + state.quantity + \" —à—Ç.)\")\n        if (state.chargingType != undefined && state.chargingType != \"\" && state.chargingType != \"-\") textArray.push(\"–ó–∞—Ä—è–∂–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑: \" + state.chargingType + \" \")\n        if (state.comment != undefined && state.comment != \"\") textArray.push(state.comment.trim())\n        if (state.date != undefined) textArray.push(\"–î–∞—Ç–∞ \" + (state.chargingType != \"\" ? \"–∑–∞—Ä—è–¥–∫–∏\" : \"–∑–∞–º–µ–Ω—ã –±–∞—Ç–∞—Ä–µ–∏\") + \": \" + state.date.replaceAll(\"-\", \".\"))\n        if (state.logicEnabled != true) textArray.push(\"–õ–æ–≥–∏–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞\")\n        textArray.push(\"\")\n    }\n}",
    "type": "GLOBAL"
  }
}