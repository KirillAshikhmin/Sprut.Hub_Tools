{
  "scenarioTemplate": {
    "name": "BatteryMonitoring",
    "desc": "Позволяет получать уведомления, когда батарея разрядится. в уведомлении будет вся информация, указанная в параметрах. Обновления: https://t.me/smart_sputnik",
    "active": true,
    "onStart": true,
    "sync": false,
    "data": "let batteryTypes = [\"AA\", \"AAA\", \"CR2032\", \"CR2450\", \"CR2025\", \"CR1632\", \"CR3032\", \"CR2477\", \"AG1\", \"AG3\", \"ER14250\", \"2CR5\", \"18650\", \"14500\", \"16340\", \"CR-P2\", \"SR44\", \"3LR12\"];\nlet chargingTypes = [\"USB Type-C\", \"Micro USB\", \"Mini USB\", \"Lightning\", \"5521 12V\", \"5525 12V\", \"5521 9V\", \"5525 9V\", \"Солнечная панель\", \"Проприетарное зарядное устройство\"]\n\nconst dateRegEx = /(\\d{2}-\\d{2}-\\d{4})/\nlet typesList = [];\nlet chargingList = [];\n\ninfo = {\n    name: \"BatteryMonitoring\",\n    description: \"Позволяет получать уведомления, когда батарея разрядится. в уведомлении будет вся информация, указанная в параметрах. Обновления: https://t.me/smart_sputnik\",\n    version: \"1.0\",\n    author: \"@BOOMikru\",\n    onStart: true,\n\n    sourceServices: [HS.BatteryService],\n    sourceCharacteristics: [HC.StatusLowBattery, HC.BatteryLevel, HC.ChargingState],\n\n    options: {\n        type: {\n            name: {\n                en: \"Battery type\",\n                ru: \"Тип батареи\"\n            },\n            type: \"String\",\n            value: \"\",\n            formType: \"list\",\n            values: typesList\n        },\n        quantity: {\n            name: {\n                en: \"Quantity\",\n                ru: \"Количество батарей\"\n            },\n            type: \"Integer\",\n            value: 1\n        },\n        chargingType: {\n            name: {\n                en: \"Charging type\",\n                ru: \"Тип зарядки\"\n            },\n            type: \"String\",\n            value: \"\",\n            formType: \"list\",\n            values: chargingList\n        },\n        placement: {\n            name: {\n                en: \"Placement\",\n                ru: \"Расположение\"\n            },\n            type: \"String\",\n            value: \"\",\n        },\n        comment: {\n            name: {\n                en: \"Comment\",\n                ru: \"Комментарий\"\n            },\n            type: \"String\",\n            value: \"\",\n        },\n        specificThreshold: {\n            name: {\n                en: \"Specific threshold\",\n                ru: \"Собственный минимальный уровень заряда\"\n            },\n            desc: {\n                en: \"Or use BatteryLevel characteristic\",\n                ru: \"Или будет использовано стандартное значение из характеристики Батарея разряжена\"\n            },\n            type: \"Boolean\",\n            value: false\n        },\n        threshold: {\n            name: {\n                en: \"Threshold\",\n                ru: \"Минимальный заряд для уведомлений\"\n            },\n            type: \"Integer\",\n            value: 20,\n            unit: \"%\"\n        },\n    }\n}\n\nfunction trigger(source, value, variables, options) {\n    try {\n        if (options.specificThreshold && (options.threshold < 0 || options.threshold > 100)) {\n            log.error(\"Минимальный заряд должен быть в диапазоне от 0 до 100%\")\n            return\n        }\n\n        const service = source.getService()\n        const accessory = source.getAccessory()\n        const uuid = accessory.getUUID()\n        const quantity = options.quantity == undefined ? 1 : options.quantity\n        const level = service.getCharacteristic(HC.BatteryLevel).getValue()\n        const charging = service.getCharacteristic(HC.ChargingState).getValue()\n        let lowBattery = false\n        if (options.specificThreshold) {\n            lowBattery = level <= options.threshold\n        } else {\n            lowBattery = service.getCharacteristic(HC.StatusLowBattery).getValue()\n        }\n\n\n        let states = GlobalVariables[\"batteryStateScenario\"]\n        if (!states) GlobalVariables[\"batteryStateScenario\"] = []\n        let lastState = states ? GlobalVariables[\"batteryStateScenario\"][uuid] : undefined\n\n        let name = service.getName()\n        var hasDate = dateRegEx.exec(name)\n        let date = hasDate != null ? hasDate[0] : getCurrentDateString()\n\n        if (hasDate && lastState) {\n            if (level == 100 && lastState.level < 100) date = getCurrentDateString()\n            if (!charging && lastState.charging) date = getCurrentDateString()\n        }\n\n        const state = {\n            uuid: uuid,\n            name: accessory.getName(),\n            room: accessory.getRoom().getName(),\n            manufacturer: accessory.getManufacturer(),\n            model: accessory.getModel(),\n            level: level,\n            lowBattery: lowBattery,\n            charging: charging,\n            batteryType: options.type,\n            quantity: quantity,\n            chargingType: options.chargingType,\n            placement: options.placement,\n            comment: options.comment,\n            date: date\n        }\n\n        GlobalVariables[\"batteryStateScenario\"][uuid] = state\n\n        if (lowBattery && !charging) {\n\n            let text = \"❗️ Батарея разряжена! \"\n            text += state.name + \" в \" + state.room + \" (ID: \" + state.uuid + \") \"\n            if (state.placement != \"\") text += \" \" + state.placement.trim()\n            text += \". Заряд: \" + state.level + \"%\"\n            if (state.batteryType != \"\") text += \" Тип: \" + state.batteryType + \" (\" + state.quantity + \" шт.)\"\n            if (state.chargingType != \"\") text += \" Заряжается через: \" + state.chargingType + \" \"\n            if (state.comment != \"\") text += state.comment.trim()\n            text += \"Дата \" + (state.chargingType != \"\" ? \"зарядки\" : \"замены батареи\") + \": \" + date.replace(\"-\", \".\")\n\n            Notify.text(text).send()\n\n            if (global.sendToTelegram !== undefined) {\n                let textArray = [\"❗️ *Батарея разряжена!*\"]\n                textArray.push(state.name + \" в \" + state.room + \" (ID: \" + state.uuid + \")\")\n                if (state.placement != \"\") textArray.push(state.placement.trim())\n                textArray.push(\"\")\n                textArray.push(\"Заряд: \" + state.level + \"%\")\n                if (state.batteryType != \"\" && state.batteryType != \"-\") textArray.push(\"Тип: \" + state.batteryType + \" (\" + state.quantity + \" шт.)\")\n                if (state.chargingType != \"\" && state.chargingType != \"-\") textArray.push(\"Заряжается через: \" + state.chargingType + \" \")\n                textArray.push(\"\")\n                if (state.comment != \"\") textArray.push(state.comment.trim())\n                textArray.push(\"Дата \" + (state.chargingType != \"\" ? \"зарядки\" : \"замены батареи\") + \": \" + date.replace(\"-\", \".\"))\n\n\n                global.sendToTelegram(textArray);\n            }\n\n            service.setName(\"❗️ \" + date)\n        } else {\n            service.setName(date)\n        }\n    } catch (e) {\n        log.error(\"Ошибка выполнения задачи: \" + e.message);\n    }\n}\n\nfunction getDeviceName(source) {\n    const acc = source.getAccessory();\n    const room = acc.getRoom().getName()\n    const accName = acc.getName()\n    const name = accName + \" / \" + acc.getUUID() + \" (\" + room + \")\"\n    return name\n}\n\n// Функция для добавления ведущего нуля, если число меньше 10\nfunction padNumber(num) {\n    return num < 10 ? \"0\" + num : num.toString();\n}\n\nfunction getCurrentDateString() {\n    var currentDate = new Date();\n    var formattedDate =\n        padNumber(currentDate.getDate()) + \"-\" +\n        padNumber(currentDate.getMonth() + 1) + \"-\" +\n        currentDate.getFullYear(); // Формат: дд-мм-гггг\n    return formattedDate\n}\n\ntypesList.push({ name: { ru: \"Не выбрано\", en: \"Not selected\" }, value: \"\" });\nbatteryTypes.forEach(function (b) {\n    typesList.push({ name: { ru: b, en: b }, type: \"String\", value: b });\n})\ntypesList.push({ name: { ru: \"Другой\", en: \"Another\" }, value: \"Другой\" });\n\nchargingList.push({ name: { ru: \"Не перезаряжается\", en: \"Not charging\" }, value: \"\" });\nchargingTypes.forEach(function (b) {\n    chargingList.push({ name: { ru: b, en: b }, type: \"String\", value: b });\n})\nchargingList.push({ name: { ru: \"Другой\", en: \"Another\" }, value: \"Другой вариант\" });",
    "type": "LOGIC"
  }
}