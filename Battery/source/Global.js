/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–∞—Ç–∞—Ä–µ–π –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–¥–∫—É
 * @param {Boolean} fullInfo - –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–≤–∫–ª—é—á–∞—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –Ω–æ—Ä–º–µ –∏ –±–µ–∑ –ª–æ–≥–∏–∫–∏)
 * @param {Array} blackList - –°–ø–∏—Å–æ–∫ ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @param {Array} whiteList - –°–ø–∏—Å–æ–∫ ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –ø—Ä–æ–≤–µ—Ä–∫—É (–µ—Å–ª–∏ –ø—É—Å—Ç–æ–π, –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –≤—Å–µ)
 * @param {String} notificationChannel - –ö–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Telegram_1", "Web_1")
 * @param {String} notificationClients - –°—Ç—Ä–æ–∫–∞ —Å ID –∫–ª–∏–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1, 3, 4")
 * @param {Boolean} silentNotification - –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–µ–∑ –∑–≤—É–∫–∞
 */
function getBatteriesInfo(fullInfo, blackList, whiteList, notificationChannel, notificationClients, silentNotification) {
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    var defaultFullInfo = false;                    // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–≤–∫–ª—é—á–∞—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –Ω–æ—Ä–º–µ –∏ –±–µ–∑ –ª–æ–≥–∏–∫–∏) - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä—è–∂–µ–Ω–Ω—ã–µ –±–∞—Ç–∞—Ä–µ–∏
    var defaultBlackList = [];                      // –°–ø–∏—Å–æ–∫ ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –∏—Å–∫–ª—é—á–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    var defaultWhiteList = [];                      // –°–ø–∏—Å–æ–∫ ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –ø—Ä–æ–≤–µ—Ä–∫—É (–µ—Å–ª–∏ –ø—É—Å—Ç–æ–π, –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –≤—Å–µ) - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    var defaultNotificationChannel = "Telegram_1";            // –ö–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Telegram_1", "Web_1") - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–Ω–∞–ª –Ω–µ —É–∫–∞–∑–∞–Ω
    var defaultNotificationClients = "1";            // –°—Ç—Ä–æ–∫–∞ —Å ID –∫–ª–∏–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1, 3, 4") - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    var defaultSilentNotification = false;          // –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–µ–∑ –∑–≤—É–∫–∞ - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∑–≤—É–∫–æ–º

    const blackListAccessories = [];
    const whiteListAccessories = [];

    // –°–ª–∏—è–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    var actualFullInfo = fullInfo !== undefined ? fullInfo : defaultFullInfo;
    var actualBlackList = blackList !== undefined ? blackList : defaultBlackList;
    var actualWhiteList = whiteList !== undefined ? whiteList : defaultWhiteList;
    var actualNotificationChannel = notificationChannel !== undefined ? notificationChannel : defaultNotificationChannel;
    var actualNotificationClients = notificationClients !== undefined ? notificationClients : defaultNotificationClients;
    var actualSilentNotification = silentNotification !== undefined ? silentNotification : defaultSilentNotification;

    let states = GlobalVariables["batteryStateScenario"]
    if (!states) GlobalVariables["batteryStateScenario"] = []

    let black = blackListAccessories
    let white = whiteListAccessories
    if (Array.isArray(actualBlackList)) { actualBlackList.forEach(function (i) { black.push(i) }) } else if (actualBlackList != undefined && actualBlackList.length > 0) black.push(actualBlackList)
    if (Array.isArray(actualWhiteList)) { actualWhiteList.forEach(function (i) { white.push(i) }) } else if (actualWhiteList != undefined && actualWhiteList.length > 0) white.push(actualWhiteList)

    let withLowBattery = []
    let normalBattery = []
    let withoutLogic = []
    let batteries = {};
    Hub.getAccessories().forEach(function (accessory) {
        const uuid = accessory.getUUID()
        if (white.length > 0 && white.indexOf(uuid) < 0) return
        if (black.indexOf(uuid) >= 0) return
        let service = accessory.getService(HS.BatteryService)
        if (service == null) return
        let state = GlobalVariables["batteryStateScenario"][uuid]
        if (state == undefined) {
            const level = service.getCharacteristic(HC.BatteryLevel).getValue()
            const charging = service.getCharacteristic(HC.ChargingState).getValue() == 1
            const lowBattery = service.getCharacteristic(HC.StatusLowBattery).getValue()

            state = {
                uuid: uuid,
                name: accessory.getName(),
                room: accessory.getRoom().getName(),
                manufacturer: accessory.getManufacturer(),
                model: accessory.getModel(),
                level: level,
                lowBattery: lowBattery,
                charging: charging,
                logicEnabled: false
            }
        } else {
            state.logicEnabled = true
        }

        if (state.lowBattery) withLowBattery.push(state)
        else normalBattery.push(state)
        if (state.logicEnabled != true) withoutLogic.push(state)
        if (state.lowBattery && state.batteryType != undefined && state.batteryType != "") {
            let count = batteries[state.batteryType]
            if (count == undefined) count = state.quantity
            else count += state.quantity
            batteries[state.batteryType] = count
        }

    })
    GlobalVariables.batteriesForChange = batteries

    withLowBattery = withLowBattery.sort(function (a, b) { return a.room.localeCompare(b.room); })
    normalBattery = normalBattery.sort(function (a, b) { return a.room.localeCompare(b.room); })
    withoutLogic = withoutLogic.sort(function (a, b) { return a.room.localeCompare(b.room); })

    let hasWithLowBattery = withLowBattery.length > 0
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞–Ω–∞–ª–∞
    let message = formatBatterySummaryMessage(withLowBattery, normalBattery, withoutLogic, batteries, actualFullInfo, actualNotificationChannel)
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤
    let clientsArray = []
    if (actualNotificationClients && actualNotificationClients.trim() !== "") {
        clientsArray = actualNotificationClients.split(',').map(client => client.trim()).filter(client => client !== "")
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
    sendNotification(
        message,
        actualNotificationChannel,
        clientsArray,
        actualSilentNotification
    )
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏ –ø–æ –±–∞—Ç–∞—Ä–µ—è–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞–Ω–∞–ª–∞
 * @param {Array} withLowBattery - –ú–∞—Å—Å–∏–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å —Ä–∞–∑—Ä—è–∂–µ–Ω–Ω—ã–º–∏ –±–∞—Ç–∞—Ä–µ—è–º–∏
 * @param {Array} normalBattery - –ú–∞—Å—Å–∏–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º–∏ –±–∞—Ç–∞—Ä–µ—è–º–∏
 * @param {Array} withoutLogic - –ú–∞—Å—Å–∏–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –±–µ–∑ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏
 * @param {Object} batteries - –û–±—ä–µ–∫—Ç —Å —Ç–∏–ø–∞–º–∏ –±–∞—Ç–∞—Ä–µ–π –¥–ª—è –∑–∞–º–µ–Ω—ã
 * @param {Boolean} fullInfo - –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
 * @param {String} channel - –ö–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * @returns {String} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 */
function formatBatterySummaryMessage(withLowBattery, normalBattery, withoutLogic, batteries, fullInfo, channel) {
    if (channel && channel.startsWith("Telegram")) {
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Telegram - —Å—Ä–∞–∑—É —Å—Ç—Ä–æ–∫–∞
        let text = "*üîã –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–π:*\n"
        
        if (withLowBattery.length > 0) {
            text += "‚ùóÔ∏è *–†–∞–∑—Ä—è–∂–µ–Ω—ã:*\n"
            withLowBattery.forEach(function (state) {
                text += formatStateToTgString(state) + "\n"
            })

            let batKeys = Object.keys(batteries)
            if (batKeys.length > 0) {
                text += "\nüîã  *–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∑–∞–º–µ–Ω—ã:*\n"
                batKeys.forEach(function (type) {
                    text += type + " " + batteries[type] + " —à—Ç.\n"
                })
            }
        } else {
            if (!fullInfo) text += "–í—Å–µ –±–∞—Ç–∞—Ä–µ–∏ –∑–∞—Ä—è–∂–µ–Ω—ã\n"
        }
        
        if (fullInfo) {
            if (normalBattery.length > 0 && withoutLogic.length > 0 && withLowBattery.length > 0) {
                text += "\n####################################\n\n"
            }
            if (normalBattery.length > 0) {
                text += "üëå *–í –Ω–æ—Ä–º–µ:*\n"
                normalBattery.forEach(function (state) {
                    text += formatStateToTgString(state, true) + "\n"
                })
            }

            if (withoutLogic.length > 0) {
                text += "\nü´µ *–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –±–µ–∑ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏:*\n"
                withoutLogic.forEach(function (state) {
                    text += formatStateToTgString(state, true, true) + "\n"
                })
            }
        }
        
        return text
    } else {
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
        let text = ""
        if (withLowBattery.length > 0) {
            text += "üîã‚ùóÔ∏è –†–∞–∑—Ä—è–∂—ë–Ω–Ω—ã–µ –±–∞—Ç–∞—Ä–µ–∏: "
            withLowBattery.forEach(function (state) {
                text += formatStateToInfo(state)
            })

            let batKeys = Object.keys(batteries)
            if (batKeys.length > 0) {
                text += "üîã –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∑–∞–º–µ–Ω—ã: "
                batKeys.forEach(function (type) {
                    text += type + " " + batteries[type] + " —à—Ç. "
                })
            }
        }
        if (text == "") text = "–í—Å–µ –±–∞—Ç–∞—Ä–µ–∏ –∑–∞—Ä—è–∂–µ–Ω—ã"
        
        return text
    }
}

function formatStateToInfo(state) {
    return state.room + " -> " + state.name +
        (state.placement != "" && state.placement != undefined ? ". " + state.placement.trim() : "") + " (ID: " + state.uuid + ")" +
        " " + state.level + "% | "
}

function formatStateToTg(textArray, state, compact, noShowLevel) {
    if (compact == true) {
        textArray.push(
            state.room + " -> " + state.name +
            (state.placement != "" && state.placement != undefined ? ". " + state.placement.trim() : "") + " (ID: " + state.uuid + ")" +
            (!noShowLevel ? (" *" + state.level + "%*") : "")
        )
    } else {
        textArray.push(state.room + " -> " + state.name + " (ID: " + state.uuid + ")")
        if (state.placement != undefined && state.placement != "") textArray.push(state.placement.trim())
        textArray.push("–ó–∞—Ä—è–¥: " + state.level + "%")
        if (state.batteryType != undefined && state.batteryType != "" && state.batteryType != "-") textArray.push("–¢–∏–ø: " + state.batteryType + " (" + state.quantity + " —à—Ç.)")
        if (state.chargingType != undefined && state.chargingType != "" && state.chargingType != "-") textArray.push("–ó–∞—Ä—è–∂–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑: " + state.chargingType + " ")
        if (state.comment != undefined && state.comment != "") textArray.push(state.comment.trim())
        if (state.date != undefined) textArray.push("–î–∞—Ç–∞ " + (state.chargingType != "" ? "–∑–∞—Ä—è–¥–∫–∏" : "–∑–∞–º–µ–Ω—ã –±–∞—Ç–∞—Ä–µ–∏") + ": " + state.date.replaceAll("-", "."))
        if (state.logicEnabled != true) textArray.push("–õ–æ–≥–∏–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
        textArray.push("")
    }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è Telegram
 * @param {Object} state - –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
 * @param {Boolean} compact - –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º
 * @param {Boolean} noShowLevel - –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞
 * @returns {String} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
 */
function formatStateToTgString(state, compact, noShowLevel) {
    if (compact == true) {
        return state.room + " -> " + state.name +
            (state.placement != "" && state.placement != undefined ? ". " + state.placement.trim() : "") + " (ID: " + state.uuid + ")" +
            (!noShowLevel ? (" *" + state.level + "%*") : "")
    } else {
        let result = state.room + " -> " + state.name + " (ID: " + state.uuid + ")\n"
        if (state.placement != undefined && state.placement != "") result += state.placement.trim() + "\n"
        result += "–ó–∞—Ä—è–¥: " + state.level + "%\n"
        if (state.batteryType != undefined && state.batteryType != "" && state.batteryType != "-") result += "–¢–∏–ø: " + state.batteryType + " (" + state.quantity + " —à—Ç.)\n"
        if (state.chargingType != undefined && state.chargingType != "" && state.chargingType != "-") result += "–ó–∞—Ä—è–∂–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑: " + state.chargingType + " \n"
        if (state.comment != undefined && state.comment != "") result += state.comment.trim() + "\n"
        if (state.date != undefined) result += "–î–∞—Ç–∞ " + (state.chargingType != "" ? "–∑–∞—Ä—è–¥–∫–∏" : "–∑–∞–º–µ–Ω—ã –±–∞—Ç–∞—Ä–µ–∏") + ": " + state.date.replaceAll("-", ".") + "\n"
        if (state.logicEnabled != true) result += "–õ–æ–≥–∏–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞\n"
        
        return result
    }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Notify
 * @param {String} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
 * @param {String} channel - –ö–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Telegram_1", "Web_1")
 * @param {Array} clients - –ú–∞—Å—Å–∏–≤ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤
 * @param {Boolean} silent - –§–ª–∞–≥ —Ç–∏—Ö–æ–≥–æ —Ä–µ–∂–∏–º–∞
 */
function sendNotification(message, channel, clients, silent) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å–ª–∏ –∑–∞–¥–∞–Ω—ã –∫–ª–∏–µ–Ω—Ç—ã, —Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–¥–∞–Ω –∫–∞–Ω–∞–ª
        if (clients && clients.length > 0 && (!channel || channel.trim() === "")) {
            log.error("BatteryMonitoring: –ó–∞–¥–∞–Ω—ã –∫–ª–∏–µ–Ω—Ç—ã, –Ω–æ –Ω–µ —É–∫–∞–∑–∞–Ω –∫–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return
        }

        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        let notify = Notify.text(message)
            .debugText("BatteryMonitoring")

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (silent) {
            notify = notify.silent(true)
        }

        // –ï—Å–ª–∏ –∑–∞–¥–∞–Ω—ã –∏ –∫–∞–Ω–∞–ª, –∏ –∫–ª–∏–µ–Ω—Ç—ã, —Ç–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å–∞—Ç–æ–≤
        if (channel && channel.trim() !== "" && clients && clients.length > 0) {
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –æ–¥–Ω–æ–º—É, —Ç–∞–∫ –∫–∞–∫ spread operator –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
            clients.forEach(function(client) {
                notify = notify.to(channel, client)
            })
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notify.send()
    } catch (e) {
        log.error("BatteryMonitoring: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: " + e.message)
    }
}