// –¢–∏–ø—ã –±–∞—Ç–∞—Ä–µ–π
let batteryTypes = ["AA", "AAA", "CR2032", "CR2450", "CR2025", "CR1632", "CR3032", "CR2477", "AG1", "AG3", "ER14250", "2CR5", "18650", "14500", "16340", "CR-P2", "SR44", "3LR12", "CR17450"];
// –¢–∏–ø—ã –∑–∞—Ä—è–¥–∫–∏
let chargingTypes = ["USB Type-C", "Micro USB", "Mini USB", "Lightning", "5521 12V", "5525 12V", "5521 9V", "5525 9V", "–°–æ–ª–Ω–µ—á–Ω–∞—è –ø–∞–Ω–µ–ª—å", "–ü—Ä–æ–ø—Ä–∏–µ—Ç–∞—Ä–Ω–æ–µ –∑–∞—Ä—è–¥–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"]

// –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∏–∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –∏—Ö –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
const DEFAULT_NOTIFICATION_CHANNEL = "Telegram_1"; // –ö–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, Telegram_1, Web_1), –∏–ª–∏ –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ, —á—Ç–æ –±—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º
const DEFAULT_NOTIFICATION_CLIENTS = "1"; // –ö–ª–∏–µ–Ω—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–æ—Ç–æ—Ä—ã–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1, 3, 4)
const DEFAULT_SILENT_NOTIFICATION = false; // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–∏—Ö–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. true - —Ç–∏—Ö–∏–µ, false - —Å–æ –∑–≤—É–∫–æ–º

info = {
    name: "üîã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞—Ç–∞—Ä–µ–µ–∫",
    description: "–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ–≥–¥–∞ –±–∞—Ç–∞—Ä–µ—è —Ä–∞–∑—Ä—è–¥–∏—Ç—Å—è. –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –±—É–¥–µ—Ç –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, —É–∫–∞–∑–∞–Ω–Ω–∞—è –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö. –û–±–Ω–æ–≤–ª–µ–Ω–∏—è: https://t.me/smart_sputnik",
    version: "2.0",
    author: "@BOOMikru",
    onStart: true,

    sourceServices: [HS.BatteryService],
    sourceCharacteristics: [HC.StatusLowBattery, HC.BatteryLevel, HC.ChargingState],

    options: {
        type: {
            name: {
                en: "Battery type",
                ru: "–¢–∏–ø –±–∞—Ç–∞—Ä–µ–∏"
            },
            type: "String",
            value: "",
            formType: "list",
            values: getBatteryTypesList()
        },
        quantity: {
            name: {
                en: "Quantity",
                ru: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ç–∞—Ä–µ–π"
            },
            type: "Integer",
            value: 1
        },
        chargingType: {
            name: {
                en: "Charging type",
                ru: "–¢–∏–ø –∑–∞—Ä—è–¥–∫–∏"
            },
            type: "String",
            value: "",
            formType: "list",
            values: getChargingTypesList()
        },
        placement: {
            name: {
                en: "Placement",
                ru: "–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ"
            },
            type: "String",
            value: "",
        },
        comment: {
            name: {
                en: "Comment",
                ru: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
            },
            type: "String",
            value: "",
        },
        specificThreshold: {
            name: {
                en: "Specific threshold",
                ru: "–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞"
            },
            desc: {
                en: "Or use BatteryLevel characteristic",
                ru: "–ò–ª–∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ë–∞—Ç–∞—Ä–µ—è —Ä–∞–∑—Ä—è–∂–µ–Ω–∞"
            },
            type: "Boolean",
            value: false
        },
        threshold: {
            name: {
                en: "Threshold",
                ru: "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞—Ä—è–¥ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
            },
            type: "Integer",
            value: 20,
            unit: "%"
        },
        changeName: {
            name: {
                en: "Change name to date",
                ru: "–ú–µ–Ω—è—Ç—å –∏–º—è —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ –¥–∞—Ç—É –∑–∞–º–µ–Ω—ã –±–∞—Ç–∞—Ä–µ–∏"
            },
            desc: {
                en: "No replacement date, if disable",
                ru: "–ï—Å–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ, —Ç–æ –¥–∞—Ç–∞ –∑–∞–º–µ–Ω—ã –±–∞—Ç–∞—Ä–µ–∏\–∑–∞—Ä—è–¥–∫–∏ –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –∏ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è"
            },
            type: "Boolean",
            value: true
        },
        notificationChannel: {
            name: {
                en: "Notification channel",
                ru: "–ö–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
            },
            desc: {
                en: "Channel identifier for notifications (e.g., Telegram_1, Web_1), or empty field, to send notifications to all channels",
                ru: "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, Telegram_1, Web_1), –∏–ª–∏ –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ, —á—Ç–æ –±—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º"
            },
            type: "String",
            value: DEFAULT_NOTIFICATION_CHANNEL
        },
        notificationClients: {
            name: {
                en: "Notification clients",
                ru: "–ö–ª–∏–µ–Ω—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
            },
            desc: {
                en: "Client identifiers separated by commas (e.g., 1, 3, 4)",
                ru: "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1, 3, 4)"
            },
            type: "String",
            value: DEFAULT_NOTIFICATION_CLIENTS
        },
        silentNotification: {
            name: {
                en: "Silent notification",
                ru: "–¢–∏—Ö–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
            },
            desc: {
                en: "Send notification without sound",
                ru: "–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–µ–∑ –∑–≤—É–∫–∞"
            },
            type: "Boolean",
            value: DEFAULT_SILENT_NOTIFICATION
        },
    },
    variables: {
        notificationSend: false
    }
}

const dateRegEx = /(\d{2}-\d{2}-\d{4})/
function trigger(source, value, variables, options) {
    try {
        if (options.specificThreshold && (options.threshold < 0 || options.threshold > 100)) {
            log.error("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞—Ä—è–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 100%")
            return
        }

        const service = source.getService()
        const accessory = source.getAccessory()
        const uuid = accessory.getUUID()
        const quantity = options.quantity == undefined ? 1 : options.quantity
        const level = service.getCharacteristic(HC.BatteryLevel).getValue()
        const charging = service.getCharacteristic(HC.ChargingState).getValue() == 1
        let lowBattery = false
        if (options.specificThreshold) {
            lowBattery = level <= options.threshold
        } else {
            lowBattery = service.getCharacteristic(HC.StatusLowBattery).getValue()
        }

        let states = GlobalVariables["batteryStateScenario"]
        if (!states) GlobalVariables["batteryStateScenario"] = []
        let lastState = states ? GlobalVariables["batteryStateScenario"][uuid] : undefined

        let name = service.getName()
        var hasDate = dateRegEx.exec(name)
        let date = hasDate != null ? hasDate[0] : getCurrentDateString()

        if (hasDate && lastState) {
            if (level == 100 && lastState.level < 100) date = getCurrentDateString()
            if (!charging && lastState.charging) date = getCurrentDateString()
        }

        const state = {
            uuid: uuid,
            name: accessory.getName(),
            room: accessory.getRoom().getName(),
            manufacturer: accessory.getManufacturer(),
            model: accessory.getModel(),
            level: level,
            lowBattery: lowBattery,
            charging: charging,
            batteryType: options.type,
            quantity: quantity,
            chargingType: options.chargingType,
            placement: options.placement,
            comment: options.comment,
            date: options.changeName ? date : undefined,
            logicEnabled: true,
            changeName: options.changeName
        }

        GlobalVariables["batteryStateScenario"][uuid] = state


        if (lowBattery && !charging) {

            if (!variables.notificationSend) {
                variables.notificationSend = true
                
                // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞–Ω–∞–ª–∞
                let message = formatNotificationMessage(state, date, options.notificationChannel)
                
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤
                let clientsArray = []
                if (options.notificationClients && options.notificationClients.trim() !== "") {
                    clientsArray = options.notificationClients.split(',').map(client => client.trim()).filter(client => client !== "")
                }
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
                sendNotification(
                    message,
                    options.notificationChannel,
                    clientsArray,
                    options.silentNotification
                )
            }

            if (options.changeName) service.setName("‚ùóÔ∏è " + date)
        }

        if (!lowBattery && !charging) {
            if (options.changeName) service.setName(date)
            variables.notificationSend = false
        }
    } catch (e) {
        log.error("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: " + e.message);
    }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞–Ω–∞–ª–∞
 * @param {Object} state - –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞—Ç–∞—Ä–µ–∏
 * @param {String} date - –î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã/–∑–∞—Ä—è–¥–∫–∏
 * @param {String} channel - –ö–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * @returns {String} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 */
function formatNotificationMessage(state, date, channel) {
    if (channel && channel.startsWith("Telegram")) {
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Telegram - —Å—Ä–∞–∑—É —Å—Ç—Ä–æ–∫–∞
        let text = "‚ùóÔ∏è *–ë–∞—Ç–∞—Ä–µ—è —Ä–∞–∑—Ä—è–∂–µ–Ω–∞!*\n"
        text += state.name + " –≤ " + state.room + " (ID: " + state.uuid + ")\n"
        if (state.placement != "") text += state.placement.trim() + "\n"
        text += "\n"
        text += "–ó–∞—Ä—è–¥: " + state.level + "%\n"
        if (state.batteryType != "" && state.batteryType != "-") text += "–¢–∏–ø: " + state.batteryType + " (" + state.quantity + " —à—Ç.)\n"
        if (state.chargingType != "" && state.chargingType != "-") text += "–ó–∞—Ä—è–∂–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑: " + state.chargingType + " \n"
        text += "\n"
        if (state.comment != "") text += state.comment.trim() + "\n"
        text += "–î–∞—Ç–∞ " + (state.chargingType != "" ? "–∑–∞—Ä—è–¥–∫–∏" : "–∑–∞–º–µ–Ω—ã –±–∞—Ç–∞—Ä–µ–∏") + ": " + date.replaceAll("-", ".")
        
        return text
    } else {
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
        let text = "‚ùóÔ∏è –ë–∞—Ç–∞—Ä–µ—è —Ä–∞–∑—Ä—è–∂–µ–Ω–∞! "
        text += state.name + " –≤ " + state.room + " (ID: " + state.uuid + ") "
        if (state.placement != "") text += " " + state.placement.trim()
        text += ". –ó–∞—Ä—è–¥: " + state.level + "%"
        if (state.batteryType != "") text += " –¢–∏–ø: " + state.batteryType + " (" + state.quantity + " —à—Ç.)"
        if (state.chargingType != "") text += " –ó–∞—Ä—è–∂–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑: " + state.chargingType + " "
        if (state.comment != "") text += state.comment.trim()
        text += "–î–∞—Ç–∞ " + (state.chargingType != "" ? "–∑–∞—Ä—è–¥–∫–∏" : "–∑–∞–º–µ–Ω—ã –±–∞—Ç–∞—Ä–µ–∏") + ": " + date.replaceAll("-", ".")
        
        return text
    }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Notify
 * @param {String} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
 * @param {String} channel - –ö–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Telegram_1", "Web_1")
 * @param {Array} clients - –ú–∞—Å—Å–∏–≤ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤
 * @param {Boolean} silent - –§–ª–∞–≥ —Ç–∏—Ö–æ–≥–æ —Ä–µ–∂–∏–º–∞
 */
function sendNotification(message, channel, clients, silent) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å–ª–∏ –∑–∞–¥–∞–Ω—ã –∫–ª–∏–µ–Ω—Ç—ã, —Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–¥–∞–Ω –∫–∞–Ω–∞–ª
        if (clients && clients.length > 0 && (!channel || channel.trim() === "")) {
            log.error("BatteryMonitoring: –ó–∞–¥–∞–Ω—ã –∫–ª–∏–µ–Ω—Ç—ã, –Ω–æ –Ω–µ —É–∫–∞–∑–∞–Ω –∫–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return
        }

        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        let notify = Notify.text(message)
            .debugText("BatteryMonitoring")

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (silent) {
            notify = notify.silent(true)
        }

        // –ï—Å–ª–∏ –∑–∞–¥–∞–Ω—ã –∏ –∫–∞–Ω–∞–ª, –∏ –∫–ª–∏–µ–Ω—Ç—ã, —Ç–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å–∞—Ç–æ–≤
        if (channel && channel.trim() !== "" && clients && clients.length > 0) {
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –æ–¥–Ω–æ–º—É, —Ç–∞–∫ –∫–∞–∫ spread operator –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
            clients.forEach(function(client) {
                notify = notify.to(channel, client)
            })
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notify.send()
    } catch (e) {
        log.error("BatteryMonitoring: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: " + e.message)
    }
}

function getDeviceName(source) {
    const acc = source.getAccessory();
    const room = acc.getRoom().getName()
    const accName = acc.getName()
    const name = accName + " / " + acc.getUUID() + " (" + room + ")"
    return name
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–µ–¥—É—â–µ–≥–æ –Ω—É–ª—è, –µ—Å–ª–∏ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ 10
function padNumber(num) {
    return num < 10 ? "0" + num : num.toString();
}

function getCurrentDateString() {
    var currentDate = new Date();
    var formattedDate =
        padNumber(currentDate.getDate()) + "-" +
        padNumber(currentDate.getMonth() + 1) + "-" +
        currentDate.getFullYear(); // –§–æ—Ä–º–∞—Ç: –¥–¥-–º–º-–≥–≥–≥–≥
    return formattedDate
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–∏–ø–æ–≤ –±–∞—Ç–∞—Ä–µ–π
 * @returns {Array} –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å —Ç–∏–ø–∞–º–∏ –±–∞—Ç–∞—Ä–µ–π –¥–ª—è —Ñ–æ—Ä–º—ã
 */
function getBatteryTypesList() {
    let typesList = [];
    typesList.push({ name: { ru: "–ù–µ –≤—ã–±—Ä–∞–Ω–æ", en: "Not selected" }, value: "" });
    batteryTypes.forEach(function (b) {
        typesList.push({ name: { ru: b, en: b }, type: "String", value: b });
    })
    typesList.push({ name: { ru: "–î—Ä—É–≥–æ–π", en: "Another" }, value: "–î—Ä—É–≥–æ–π" });
    return typesList;
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–∏–ø–æ–≤ –∑–∞—Ä—è–¥–∫–∏
 * @returns {Array} –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å —Ç–∏–ø–∞–º–∏ –∑–∞—Ä—è–¥–∫–∏ –¥–ª—è —Ñ–æ—Ä–º—ã
 */
function getChargingTypesList() {
    let chargingList = [];
    chargingList.push({ name: { ru: "–ù–µ –ø–µ—Ä–µ–∑–∞—Ä—è–∂–∞–µ—Ç—Å—è", en: "Not charging" }, value: "" });
    chargingTypes.forEach(function (b) {
        chargingList.push({ name: { ru: b, en: b }, type: "String", value: b });
    })
    chargingList.push({ name: { ru: "–î—Ä—É–≥–æ–π", en: "Another" }, value: "–î—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç" });
    return chargingList;
}