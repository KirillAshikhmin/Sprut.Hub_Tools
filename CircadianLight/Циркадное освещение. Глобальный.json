{
  "scenarioTemplate": {
    "name": "Циркадное освещение. Глобальный",
    "desc": "Используется для установления режима циркадного освещения (яркость и температура) из блочных или логического сценариев.\n\nПримеры:\nУстановить для одной лампочки: global.setCircadianLight(99);\nУстановить для нескольких лампочек global.setCircadianLight([97,98,99]);\nТак же в метод setCircadianLight можно передать 2 параметра:\npreset (Integer) - режим работы\ndontChangeBright (Boolean) - не менять яркость при её ручном изменении\n\nПолучить значение температуры и яркости для текущего часа и минуты:\nlet tempAndBright = global.getCircadianLight(preset);\npreset (Integer) - режим работы\nРезультат будет в виде массива\ntempAndBright[0] - температура\ntempAndBright[1] - яркость.\nИспользуется, если необходимо получить только одно значение, например при использовании лампочки в качестве будильника получать температуру, а яркость увеличивать постепенно.",
    "active": true,
    "onStart": true,
    "sync": false,
    "data": "// Константы для улучшения читаемости\r\nconst MIN_BRIGHTNESS = 1;\r\nconst MAX_BRIGHTNESS = 100;\r\nconst MIN_COLOR_TEMPERATURE = 50;\r\nconst MAX_COLOR_TEMPERATURE = 400;\r\nconst MINUTES_IN_HOUR = 60;\r\n\r\nconst CIRCADIAN_LIGHT_DEBUG = false;\r\nconst CIRCADIAN_LIGHT_DEBUG_INFO = false;\r\n\r\nfunction getCircadianLight(preset) {\r\n    const date = new Date()\r\n    const hours = date.getHours() | 0;\r\n    const minute = date.getMinutes() | 0;\r\n\r\n    const onTimePreset = global.getCircadianPreset(preset)\r\n    const tempAndBright = onTimePreset[hours]\r\n    const nextTempAndBright = hours < 23 ? onTimePreset[hours + 1] : onTimePreset[hours];\r\n\r\n    var temp = tempAndBright[0] + ((nextTempAndBright[0] - tempAndBright[0]) / MINUTES_IN_HOUR * minute)\r\n    var bright = tempAndBright[1] + ((nextTempAndBright[1] - tempAndBright[1]) / MINUTES_IN_HOUR * minute)\r\n    temp = Math.round(Math.max(MIN_COLOR_TEMPERATURE, Math.min(MAX_COLOR_TEMPERATURE, temp))) | 0;\r\n    bright = Math.round(Math.max(MIN_BRIGHTNESS, Math.min(MAX_BRIGHTNESS, bright))) | 0;\r\n    //if (CIRCADIAN_LIGHT_DEBUG) console.info(\"Циркадное освещение. Получение. Время {}:{}. Режим {}. Температура {} и яркость {}\", hours, minute, preset, temp, bright)\r\n    return [temp, bright];\r\n}\r\n\r\n\r\nfunction setCircadianLightForService(service, preset, dontChangeBright, dontChangeTemp, dontChangeHue, dontChangeSaturate) {\r\n\r\n\r\n    if (service.getType() != HS.Lightbulb) return;\r\n\r\n    const tempAndBright = getCircadianLight(preset);\r\n    const temp = tempAndBright[0];\r\n    const bright = tempAndBright[1];\r\n    let hueAndSaturation = [0, 0]\r\n    \r\n    if (CIRCADIAN_LIGHT_DEBUG)\r\n        console.info(\r\n            \"Циркадное освещение.  Режим: {}. Температура: {}. Яркость: {}, Не менять: яркость: {}, температуру: {}, оттенок: {}, насыщенность: {}\",\r\n            preset,\r\n            temp,\r\n            bright,\r\n            dontChangeBright,\r\n            dontChangeTemp,\r\n            dontChangeHue,\r\n            dontChangeSaturate\r\n        )\r\n\r\n    let allowTemperatureChange = !dontChangeTemp\r\n    let allowHueChange = !dontChangeHue\r\n    let allowSaturationChange = !dontChangeSaturate\r\n    let allowBrightChange = !dontChangeBright\r\n\r\n    const brightness = service.getCharacteristic(HC.Brightness);\r\n    if (brightness == null) {\r\n        console.warn(\"Циркадное освещение. Лампочка {}, не умеет изменять яркость\", source.getAccessory())\r\n        return;\r\n    }\r\n\r\n    const temperature = service.getCharacteristic(HC.ColorTemperature);\r\n    if (temperature == null) {\r\n        allowTemperatureChange = false\r\n    }\r\n\r\n    const hue = service.getCharacteristic(HC.Hue);\r\n    const saturation = service.getCharacteristic(HC.Saturation);\r\n    if (hue == null || saturation == null) {\r\n        allowHueChange = hue != null\r\n        allowSaturationChange = saturation != null\r\n    } else {\r\n        hueAndSaturation = getHueAndSaturationFromMired(temp)\r\n    }\r\n\r\n    if (!allowBrightChange && !allowTemperatureChange && !allowHueChange && !allowSaturationChange) {\r\n        console.warn(\"Циркадное освещение. Для лампочки {}, запрещено менять все параметры сценарием или свойствами\", source.getAccessory())\r\n        return\r\n    }\r\n\r\n    const bulb = service.getCharacteristic(HC.On);\r\n    bulb.setValue(true);\r\n\r\n    if (CIRCADIAN_LIGHT_DEBUG_INFO) {\r\n        const accName = service.getAccessory().getName()\r\n        const sName = service.getName()\r\n        const name = accName == sName ? accName : accName + \" \" + sName\r\n\r\n        var text = \"Циркадное освещение. \" + name + \". Установлено: \"\r\n        if (allowTemperatureChange) text += \" Температура \" + temp + \";\"\r\n        if (allowBrightChange) text += \" Яркость \" + bright + \";\"\r\n        else {\r\n            if (allowHueChange) text += \" Оттенок \" + hueAndSaturation[0] + \";\"\r\n            if (allowSaturationChange) text += \" Насыщенность \" + hueAndSaturation[1] + \";\"\r\n        }\r\n        console.info(text)\r\n    }\r\n\r\n    if (allowTemperatureChange) {\r\n        temperature.setValue(temp);\r\n    } else {\r\n        if (allowHueChange) hue.setValue(hueAndSaturation[0])\r\n        if (allowSaturationChange) saturation.setValue(hueAndSaturation[1])\r\n    }\r\n\r\n    if (allowBrightChange)\r\n        brightness.setValue(bright)\r\n}\r\n\r\nfunction setCircadianLight(aId, preset, dontChangeBright, dontChangeTemp, dontChangeHue, dontChangeSaturate) {\r\n    if (!Array.isArray(aId)) {\r\n        aId = [aId];\r\n    }\r\n\r\n    for (var i in aId) {\r\n        let accessoryId = aId[i];\r\n        let accessory = Hub.getAccessory(accessoryId);\r\n        if (accessory == null) {\r\n            console.error(\"Лампочка {} не найдена\", accessoryId);\r\n            return;\r\n        }\r\n\r\n        let service = accessory.getService(HS.Lightbulb);\r\n        setCircadianLightForService(service, preset, dontChangeBright, dontChangeTemp, dontChangeHue, dontChangeSaturate)\r\n    }\r\n}\r\n\r\nfunction getHueAndSaturationFromMired(mired) {\r\n    if (mired < 50 || mired > 400) {\r\n        throw new Error(\"Mired value must be between 50 and 400.\");\r\n    }\r\n    var hueAndSat = global.getMiredToHueAndSaturationMap()\r\n    if (mired % 10 === 0) {\r\n        return hueAndSat[mired];\r\n    } else {\r\n        const lowerMired = mired - (mired % 10)\r\n        const lower = hueAndSat[lowerMired]\r\n        const upper = hueAndSat[mired + (10 - (mired % 10))]\r\n\r\n        const t = (mired - lowerMired) / 10;\r\n        const hue = Math.round(lower[0] + t * (upper[0] - lower[0])) | 0;\r\n        const saturation = Math.round(lower[1] + t * (upper[1] - lower[1])) | 0;\r\n\r\n        return [hue, saturation];\r\n    }\r\n}",
    "type": "GLOBAL"
  }
}