{
  "scenarioTemplate": {
    "name": "Циркадное освещение. Глобальный",
    "desc": "",
    "active": true,
    "onStart": true,
    "sync": false,
    "data": "const VERSION = \"5.1\"\n\n// Константы для улучшения читаемости\nconst MIN_BRIGHTNESS = 1;\nconst MAX_BRIGHTNESS = 100;\nconst MIN_COLOR_TEMPERATURE = 50;\nconst MAX_COLOR_TEMPERATURE = 400;\nconst MINUTES_IN_HOUR = 60;\nconst DEBUG_TITLE = \"Циркадное освещение. \"\n\nfunction getCircadianLight(preset, uuid) {\n    const date = new Date()\n    const hours = date.getHours() | 0;\n    const minute = date.getMinutes() | 0;\n    return getCircadianLightForTime(hours, minute, preset, uuid);\n}\n\n\nfunction getCircadianLightForTime(hours, minute, preset, uuid) {\n\n    function getValueFromPreset(onTimePreset, hours) { let h = (hours | 0) + \"\"; return (Object.keys(onTimePreset).indexOf(h) >= 0) ? onTimePreset[h] : [50, 100]; }\n\n    const onTimePreset = global.getCircadianPreset(preset)\n    const tempAndBright = getValueFromPreset(onTimePreset, hours)\n    const nextTempAndBright = hours < 23 ? getValueFromPreset(onTimePreset, hours + 1) : getValueFromPreset(onTimePreset, 0);\n\n    var temp = tempAndBright[0] + ((nextTempAndBright[0] - tempAndBright[0]) / MINUTES_IN_HOUR * minute)\n    var bright = tempAndBright[1] + ((nextTempAndBright[1] - tempAndBright[1]) / MINUTES_IN_HOUR * minute)\n    temp = Math.round(Math.max(MIN_COLOR_TEMPERATURE, Math.min(MAX_COLOR_TEMPERATURE, temp))) | 0;\n    bright = Math.round(Math.max(MIN_BRIGHTNESS, Math.min(MAX_BRIGHTNESS, bright))) | 0;\n    //console.info(\"Циркадное освещение. Получение. Время {}:{}. Режим {}. Температура {} и яркость {}\", hours, minute, preset, temp, bright)\n    if (global.getCircadianLightDynamicParams) {\n        return global.getCircadianLightDynamicParams(hours, minute, preset, temp, bright, uuid)\n    } else {\n        return [temp, bright];\n    }\n}\n\n\nfunction setCircadianLightForService(service, preset, dontChangeBright, dontChangeTemp, dontChangeHue, dontChangeSaturate, isDebug, isDebugAll) {\n    const date = new Date()\n    const hours = date.getHours() | 0;\n    const minute = date.getMinutes() | 0;\n    return setCircadianLightForServiceForTime(service, preset, dontChangeBright, dontChangeTemp, dontChangeHue, dontChangeSaturate, isDebug, isDebugAll, hours, minute)\n}\n\nfunction setCircadianLightForServiceForTime(service, preset, dontChangeBright, dontChangeTemp, dontChangeHue, dontChangeSaturate, isDebug, isDebugAll, hours, minute) {\n\n    const debugPrefix = DEBUG_TITLE + getCircadianLightServiceName(service) + \" \"\n\n    if (service.getType() != HS.Lightbulb) return false;\n    const uuid = service.getUUID()\n\n    const tempAndBright = getCircadianLightForTime(hours, minute, preset, uuid);\n    const temp = tempAndBright[0];\n    const bright = tempAndBright[1];\n    let hueAndSaturation = [0, 0]\n\n    if (isDebug && isDebugAll)\n        console.info(\n            debugPrefix + \"Запрос: Температура: {}. Яркость: {}, Не менять яркость: {}, температуру: {}, оттенок: {}, насыщенность: {}\",\n            temp,\n            bright,\n            dontChangeBright,\n            dontChangeTemp,\n            dontChangeHue,\n            dontChangeSaturate\n        )\n\n    const brightness = service.getCharacteristic(HC.Brightness);\n    if (brightness == null) {\n        console.warn(debugPrefix + \"Лампочка {}, не умеет изменять яркость\", getCircadianLightServiceName(service))\n        return false;\n    }\n\n    const temperature = service.getCharacteristic(HC.ColorTemperature);\n    const hue = service.getCharacteristic(HC.Hue);\n    const saturation = service.getCharacteristic(HC.Saturation);\n\n    let allowBrightChange = !dontChangeBright\n    let allowTemperatureChange = !dontChangeTemp && temperature != null\n    let allowHueChange = !dontChangeHue && hue != null\n    let allowSaturationChange = !dontChangeSaturate && saturation != null\n    let canTemperatureChange = temperature != null\n\n    if (!canTemperatureChange && (allowHueChange || allowSaturationChange)) {\n        hueAndSaturation = getHueAndSaturationFromMired(temp)\n    }\n\n    if (!allowBrightChange && !allowTemperatureChange && !allowHueChange && !allowSaturationChange) {\n        console.warn(debugPrefix + \"Для лампочки {}, запрещено менять все параметры сценарием или свойствами\", getCircadianLightServiceName(service))\n        return false;\n    }\n\n    const onCharacteristic = service.getCharacteristic(HC.On);\n    onCharacteristic.setValue(true);\n\n    if (isDebug) {\n        var text = debugPrefix + \"Установлено: \"\n        if (allowBrightChange) text += \" Яркость \" + bright + \";\"\n        if (canTemperatureChange) {\n            if (allowTemperatureChange) text += \" Температура \" + temp\n        }\n        else {\n            if (allowHueChange || allowSaturationChange) {\n                text += \" Температура \" + temp + \" (\"\n                if (allowHueChange) text += \" Оттенок \" + hueAndSaturation[0]\n                if (allowSaturationChange) text += \" Насыщенность \" + hueAndSaturation[1]\n                text += \")\"\n            }\n        }\n        console.info(text)\n    }\n\n    if (allowBrightChange)\n        brightness.setValue(bright)\n\n    if (canTemperatureChange) {\n        if (allowTemperatureChange) temperature.setValue(temp)\n    } else {\n        if (allowHueChange)\n            hue.setValue(hueAndSaturation[0])\n        if (allowSaturationChange)\n            saturation.setValue(hueAndSaturation[1])\n    }\n    return true\n}\n\nfunction setCircadianLight(aId, preset, dontChangeBright, dontChangeTemp, dontChangeHue, dontChangeSaturate) {\n    if (!Array.isArray(aId)) {\n        aId = [aId];\n    }\n\n    for (var i in aId) {\n        let accessoryId = aId[i];\n        let accessory = Hub.getAccessory(accessoryId);\n        if (accessory == null) {\n            console.error(\"Лампочка {} не найдена\", accessoryId);\n            return;\n        }\n\n        let service = accessory.getService(HS.Lightbulb);\n        setCircadianLightForService(service, preset, dontChangeBright, dontChangeTemp, dontChangeHue, dontChangeSaturate)\n    }\n}\n\nfunction getHueAndSaturationFromMired(mired) {\n    if (mired < 50 || mired > 400) {\n        throw new Error(\"Mired value must be between 50 and 400.\");\n    }\n    var hueAndSat = global.getMiredToHueAndSaturationMap()\n    if (mired % 10 === 0) {\n        return hueAndSat[mired];\n    } else {\n        const lowerMired = mired - (mired % 10)\n        const lower = hueAndSat[lowerMired]\n        const upper = hueAndSat[mired + (10 - (mired % 10))]\n\n        const t = (mired - lowerMired) / 10;\n        const hue = Math.round(lower[0] + t * (upper[0] - lower[0])) | 0;\n        const saturation = Math.round(lower[1] + t * (upper[1] - lower[1])) | 0;\n\n        return [hue, saturation];\n    }\n}\n\nfunction getCircadianLightServiceName(service) {\n    const acc = service.getAccessory();\n    const room = acc.getRoom().getName()\n    const accName = service.getAccessory().getName()\n    const sName = service.getName()\n    const name = room + \" -> \" + (accName == sName ? accName : accName + \" \" + sName) + \" (\" + service.getUUID() + \")\" + (!service.isVisible() ? \". Скрыта\" : \"\")\n    return name\n}\n\nfunction getCircadianLightModes() {\n    let cList = [];\n    let onTime = global.onTime\n    let keys = Object.keys(global.onTime);\n    let defaultNames = {\n        0: \"Дольше яркий\",\n        1: \"Раннее затемнение\",\n        2: \"Всегда полная яркость\",\n        3: \"Режим 3 (Кастомный)\",\n        4: \"Режим 4 (Кастомный)\",\n        5: \"Режим 5 (Кастомный)\",\n        6: \"Режим 6 (Кастомный)\",\n        7: \"Режим 7 (Кастомный)\",\n        8: \"Режим 8 (Кастомный)\",\n        9: \"Режим 9 (Кастомный)\",\n        10: \"Режим 10 (Кастомный)\",\n    }\n\n    keys.forEach(function (key) {\n        let name = onTime[key].name ? onTime[key].name : key.toString() + \" (\" + defaultNames[key] + \")\"\n        cList.push({\n            name: { ru: name, en: name },\n            value: parseInt(key)\n        });\n    })\n    let defaultKeys = Object.keys(defaultNames)\n    if (cList.length < defaultKeys.length) {\n        for (let i = 0; i < defaultKeys.length; i++) {\n            if ((cList.length - 1) < i) {\n                let name = defaultNames[i]\n                cList.push({\n                    name: { ru: name, en: name },\n                    value: i\n                });\n            }\n        }\n    }\n    return cList\n}\n\nfunction toArray(items) {\n    if (!Array.isArray(items)) {\n        items = [items];\n    }\n    return items\n}\n\n// Примеры использования для тестирования\nfunction runTests() {\n    if (!global.hasUnitTests) { return; }\n    let assert = global.assert; let assertNull = global.assertNull; let assertNotNull = global.assertNotNull; let assertEquals = global.assertEquals; let assertNotEquals = global.assertNotEquals; let assertTrue = global.assertTrue; let assertFalse = global.assertFalse; let assertDefined = global.assertDefined; let assertContains = global.assertContains; let assertEmpty = global.assertEmpty; let assertNotEmpty = global.assertNotEmpty; let assertLength = global.assertLength;\n\n    let lampAccInfo = { id: 1, name: \"Лампочка\", room: \"Тест\", model: \"\", modelId: \"\", manufacturer: \"\", manufacturerId: \"\", serial: \"\", firmware: \"\", services: [{ id: 10, type: HS.Lightbulb, name: \"Лампочка Температуры\", characteristics: [{ id: 11, type: HC.On, value: !0 }, { id: 12, type: HC.Brightness, name: \"Яркость\", value: 100 }, { id: 13, type: HC.ColorTemperature, name: \"Температура\", value: 400 }] }, { id: 20, type: HS.Lightbulb, name: \"Лампочка Цвет\", characteristics: [{ id: 21, type: HC.On, value: !0 }, { id: 22, type: HC.Brightness, name: \"Яркость\", value: 100 }, { id: 23, type: HC.Saturation, name: \"Насыщенность\", value: 0 }, { id: 24, type: HC.Hue, name: \"Оттенок\", value: 0 }] }] };\n    let hours = 0\n    let minute = 30\n    let preset = 99999\n\n    let valuesForTime = getCircadianLightForTime(hours, minute, preset, \"1.1\")\n    assertLength(valuesForTime, 2)\n    assertEquals(valuesForTime[0], 300, \"Температура не совпадает\")\n    assertEquals(valuesForTime[1], 60, \"Яркость не совпадает\")\n\n    let acc = global.createUnitTestFullAccessory(lampAccInfo)\n    let serviceTemp = acc.getServices()[0];\n    setCircadianLightForServiceForTime(serviceTemp, preset, false, false, false, false, false, false, hours, minute)\n    assertEquals(serviceTemp.getCharacteristic(HC.ColorTemperature).getValue(), 300, \"Температура не совпадает\")\n    assertEquals(serviceTemp.getCharacteristic(HC.Brightness).getValue(), 60, \"Яркость не совпадает\")\n    let serviceHue = acc.getServices()[1];\n    setCircadianLightForServiceForTime(serviceHue, preset, false, false, false, false, false, false, hours, minute)\n    assertEquals(serviceHue.getCharacteristic(HC.Saturation).getValue(), 44, \"Насыщенность не совпадает\")\n    assertEquals(serviceHue.getCharacteristic(HC.Hue).getValue(), 32, \"Оттенок не совпадает\")\n    assertEquals(serviceHue.getCharacteristic(HC.Brightness).getValue(), 60, \"Яркость не совпадает\")\n    console.info(DEBUG_TITLE + \"Тесты пройдены\")\n}\n\nfunction getCircadianLightGlobalVariableForReset(service) {\n    return \"CircadianLight_\" + service.getUUID() + \"_reset\"\n}\n\nfunction getCircadianLightGlobalVariableForDisable(service) {\n    return \"CircadianLight_\" + service.getUUID() + \"_disabled\"\n}\n\n\n// Функции для управления циркадным режимом из своих сценариев\nfunction resetCircadianLight(service) {\n    GlobalVariables[getCircadianLightGlobalVariableForReset(service)] = true\n}\n\nfunction setCircadianLightDisabled(service, disabled) {\n    GlobalVariables[getCircadianLightGlobalVariableForDisable(service)] = disabled\n}\n\nfunction setCircadianLightEnabled(service, enabled) {\n    GlobalVariables[getCircadianLightGlobalVariableForDisable(service)] = !enabled\n}\n\nfunction disableCircadianLightFor(services) {\n    toArray(services).forEach(function (service) { GlobalVariables[getCircadianLightGlobalVariableForDisable(service)] = true; })\n}\n\nfunction enableCircadianLightFor(services) {\n    toArray(services).forEach(function (service) { GlobalVariables[getCircadianLightGlobalVariableForDisable(service)] = false; })\n}\n\nfunction resetCircadianLightFor(services) {\n    toArray(services).forEach(function (service) { GlobalVariables[getCircadianLightGlobalVariableForReset(service)] = true; })\n}\nrunTests();\n",
    "type": "GLOBAL"
  }
}