{
  "scenarioTemplate": {
    "name": "Циркадное освещение. Глобальный",
    "desc": "Используется для установления режима циркадного освещения (яркость и температура) из блочных или логического сценариев.\n\nПримеры:\nУстановить для одной лампочки: global.setCircadianLight(99);\nУстановить для нескольких лампочек global.setCircadianLight([97,98,99]);\nТак же в метод setCircadianLight можно передать 2 параметра:\npreset (Integer) - режим работы\ndontChangeBright (Boolean) - не менять яркость при её ручном изменении\n\nПолучить значение температуры и яркости для текущего часа и минуты:\nlet tempAndBright = global.getCircadianLight(preset);\npreset (Integer) - режим работы\nРезультат будет в виде массива\ntempAndBright[0] - температура\ntempAndBright[1] - яркость.\nИспользуется, если необходимо получить только одно значение, например при использовании лампочки в качестве будильника получать температуру, а яркость увеличивать постепенно.",
    "active": true,
    "onStart": true,
    "sync": true,
    "data": "const VERSION = \"6.0\"\r\n\r\n// Константы для улучшения читаемости\r\nconst MIN_BRIGHTNESS = 1;\r\nconst MAX_BRIGHTNESS = 100;\r\nconst MIN_COLOR_TEMPERATURE = 50;\r\nconst MAX_COLOR_TEMPERATURE = 400;\r\nconst MINUTES_IN_HOUR = 60;\r\nconst DEBUG_TITLE = \"Циркадное освещение. \"\r\n\r\nfunction getCircadianLight(preset, uuid) {\r\n    const date = new Date()\r\n    const hours = date.getHours() | 0;\r\n    const minute = date.getMinutes() | 0;\r\n    return getCircadianLightForTime(hours, minute, preset, uuid);\r\n}\r\n\r\n\r\nfunction getCircadianLightForTime(hours, minute, preset, uuid) {\r\n\r\n    function getValueFromPreset(onTimePreset, hours) { let h = (hours | 0) + \"\"; return (Object.keys(onTimePreset).indexOf(h) >= 0) ? onTimePreset[h] : [50, 100]; }\r\n\r\n    const onTimePreset = global.getCircadianPreset(preset)\r\n    const tempAndBright = getValueFromPreset(onTimePreset, hours)\r\n    const nextTempAndBright = hours < 23 ? getValueFromPreset(onTimePreset, hours + 1) : getValueFromPreset(onTimePreset, 0);\r\n\r\n    var temp = tempAndBright[0] + ((nextTempAndBright[0] - tempAndBright[0]) / MINUTES_IN_HOUR * minute)\r\n    var bright = tempAndBright[1] + ((nextTempAndBright[1] - tempAndBright[1]) / MINUTES_IN_HOUR * minute)\r\n    temp = Math.round(Math.max(MIN_COLOR_TEMPERATURE, Math.min(MAX_COLOR_TEMPERATURE, temp))) | 0;\r\n    bright = Math.round(Math.max(MIN_BRIGHTNESS, Math.min(MAX_BRIGHTNESS, bright))) | 0;\r\n    if (global.getCircadianLightDynamicParams) {\r\n        return global.getCircadianLightDynamicParams(hours, minute, preset, temp, bright, uuid)\r\n    } else {\r\n        return [temp, bright];\r\n    }\r\n}\r\n\r\n\r\nfunction setCircadianLightForService(service, preset, dontChangeBright, dontChangeTemp, dontChangeHue, dontChangeSaturate, changeTempDelay, isDebug, isDebugAll) {\r\n    const date = new Date()\r\n    const hours = date.getHours() | 0;\r\n    const minute = date.getMinutes() | 0;\r\n    return setCircadianLightForServiceForTime(service, preset, dontChangeBright, dontChangeTemp, dontChangeHue, dontChangeSaturate, changeTempDelay, isDebug, isDebugAll, hours, minute)\r\n}\r\n\r\nfunction setCircadianLightForServiceForTime(service, preset, dontChangeBright, dontChangeTemp, dontChangeHue, dontChangeSaturate, changeTempDelay, isDebug, isDebugAll, hours, minute) {\r\n\r\n    const debugPrefix = DEBUG_TITLE + getCircadianLightServiceName(service) + \" \"\r\n\r\n    if (service.getType() != HS.Lightbulb) return false;\r\n    const uuid = service.getUUID()\r\n\r\n    const tempAndBright = getCircadianLightForTime(hours, minute, preset, uuid);\r\n    const temp = tempAndBright[0];\r\n    const bright = tempAndBright[1];\r\n    let hueAndSaturation = [0, 0]\r\n\r\n    if (isDebug && isDebugAll)\r\n        console.info(\r\n            debugPrefix + \"Запрос: Температура: {}. Яркость: {}, Не менять яркость: {}, температуру: {}, оттенок: {}, насыщенность: {}\",\r\n            temp,\r\n            bright,\r\n            dontChangeBright,\r\n            dontChangeTemp,\r\n            dontChangeHue,\r\n            dontChangeSaturate\r\n        )\r\n\r\n    const brightness = service.getCharacteristic(HC.Brightness);\r\n    if (brightness == null) {\r\n        console.warn(debugPrefix + \"Лампочка {}, не умеет изменять яркость\", getCircadianLightServiceName(service))\r\n        return false;\r\n    }\r\n\r\n    const temperature = service.getCharacteristic(HC.ColorTemperature);\r\n    const hue = service.getCharacteristic(HC.Hue);\r\n    const saturation = service.getCharacteristic(HC.Saturation);\r\n\r\n    let allowBrightChange = !dontChangeBright\r\n    let allowTemperatureChange = !dontChangeTemp && temperature != null\r\n    let allowHueChange = !dontChangeHue && hue != null\r\n    let allowSaturationChange = !dontChangeSaturate && saturation != null\r\n    let canTemperatureChange = temperature != null\r\n\r\n    if (!canTemperatureChange && (allowHueChange || allowSaturationChange)) {\r\n        hueAndSaturation = getHueAndSaturationFromMired(temp)\r\n    }\r\n\r\n    if (!allowBrightChange && !allowTemperatureChange && !allowHueChange && !allowSaturationChange) {\r\n        console.warn(debugPrefix + \"Для лампочки {}, запрещено менять все параметры сценарием или свойствами\", getCircadianLightServiceName(service))\r\n        return false;\r\n    }\r\n\r\n    const onCharacteristic = service.getCharacteristic(HC.On);\r\n    onCharacteristic.setValue(true);\r\n\r\n    if (isDebug) {\r\n        var text = debugPrefix + \"Установлено: \"\r\n        if (allowBrightChange) text += \" Яркость \" + bright + \";\"\r\n        if (canTemperatureChange) {\r\n            if (allowTemperatureChange) text += \" Температура \" + temp\r\n        }\r\n        else {\r\n            if (allowHueChange || allowSaturationChange) {\r\n                text += \" Температура \" + temp + \" (\"\r\n                if (allowHueChange) text += \" Оттенок \" + hueAndSaturation[0]\r\n                if (allowSaturationChange) text += \" Насыщенность \" + hueAndSaturation[1]\r\n                text += \")\"\r\n            }\r\n        }\r\n        console.info(text)\r\n    }\r\n\r\n    if (allowBrightChange)\r\n        brightness.setValue(bright)\r\n\r\n    if (allowTemperatureChange || allowHueChange || allowSaturationChange) {\r\n        function changeTemp() {\r\n            if (canTemperatureChange) {\r\n                if (allowTemperatureChange) temperature.setValue(temp)\r\n            } else {\r\n                if (allowHueChange)\r\n                    hue.setValue(hueAndSaturation[0])\r\n                if (allowSaturationChange)\r\n                    saturation.setValue(hueAndSaturation[1])\r\n            }\r\n        }\r\n        if (changeTempDelay) {\r\n            setSafeTimeout(() => {\r\n                changeTemp()\r\n            }, 1000)\r\n        } else {\r\n            changeTemp()\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nfunction setCircadianLight(aId, preset, dontChangeBright, dontChangeTemp, dontChangeHue, dontChangeSaturate) {\r\n    if (!Array.isArray(aId)) {\r\n        aId = [aId];\r\n    }\r\n\r\n    for (var i in aId) {\r\n        let accessoryId = aId[i];\r\n        let accessory = Hub.getAccessory(accessoryId);\r\n        if (accessory == null) {\r\n            console.error(\"Лампочка {} не найдена\", accessoryId);\r\n            return;\r\n        }\r\n\r\n        let service = accessory.getService(HS.Lightbulb);\r\n        setCircadianLightForService(service, preset, dontChangeBright, dontChangeTemp, dontChangeHue, dontChangeSaturate)\r\n    }\r\n}\r\n\r\nfunction getHueAndSaturationFromMired(mired) {\r\n    if (mired < 50 || mired > 400) {\r\n        throw new Error(\"Mired value must be between 50 and 400.\");\r\n    }\r\n    var hueAndSat = global.getMiredToHueAndSaturationMap()\r\n    if (mired % 10 === 0) {\r\n        return hueAndSat[mired];\r\n    } else {\r\n        const lowerMired = mired - (mired % 10)\r\n        const lower = hueAndSat[lowerMired]\r\n        const upper = hueAndSat[mired + (10 - (mired % 10))]\r\n\r\n        const t = (mired - lowerMired) / 10;\r\n        const hue = Math.round(lower[0] + t * (upper[0] - lower[0])) | 0;\r\n        const saturation = Math.round(lower[1] + t * (upper[1] - lower[1])) | 0;\r\n\r\n        return [hue, saturation];\r\n    }\r\n}\r\n\r\nfunction getCircadianLightServiceName(service) {\r\n    const acc = service.getAccessory();\r\n    const room = acc.getRoom().getName()\r\n    const accName = service.getAccessory().getName()\r\n    const sName = service.getName()\r\n    const name = room + \" -> \" + (accName == sName ? accName : accName + \" \" + sName) + \" (\" + service.getUUID() + \")\" + (!service.isVisible() ? \". Скрыта. \" : \"\")\r\n    return name\r\n}\r\n\r\nfunction getCircadianLightModes() {\r\n    let cList = [];\r\n    let onTime = global.onTime\r\n    let keys = Object.keys(global.onTime);\r\n    let defaultNames = {\r\n        0: \"Дольше яркий\",\r\n        1: \"Раннее затемнение\",\r\n        2: \"Всегда полная яркость\",\r\n        3: \"Режим 3 (Кастомный)\",\r\n        4: \"Режим 4 (Кастомный)\",\r\n        5: \"Режим 5 (Кастомный)\",\r\n        6: \"Режим 6 (Кастомный)\",\r\n        7: \"Режим 7 (Кастомный)\",\r\n        8: \"Режим 8 (Кастомный)\",\r\n        9: \"Режим 9 (Кастомный)\",\r\n        10: \"Режим 10 (Кастомный)\",\r\n    }\r\n\r\n    keys.forEach(function (key) {\r\n        let name = onTime[key].name ? onTime[key].name : key.toString() + \" (\" + defaultNames[key] + \")\"\r\n        cList.push({\r\n            name: { ru: name, en: name },\r\n            value: parseInt(key)\r\n        });\r\n    })\r\n    let defaultKeys = Object.keys(defaultNames)\r\n    if (cList.length < defaultKeys.length) {\r\n        for (let i = 0; i < defaultKeys.length; i++) {\r\n            if ((cList.length - 1) < i) {\r\n                let name = defaultNames[i]\r\n                cList.push({\r\n                    name: { ru: name, en: name },\r\n                    value: i\r\n                });\r\n            }\r\n        }\r\n    }\r\n    return cList\r\n}\r\n\r\nfunction toArray(items) {\r\n    if (!Array.isArray(items)) {\r\n        items = [items];\r\n    }\r\n    return items\r\n}\r\n\r\nlet inTestMode = false\r\n\r\nfunction setSafeTimeout(callback, delay) {\r\n    if (inTestMode) {\r\n        callback();\r\n    } else {\r\n        return setTimeout(callback, delay);\r\n    }\r\n}\r\n\r\n// Примеры использования для тестирования\r\nfunction runTests() {\r\n    if (!global.hasUnitTests) { return; }\r\n\r\n    try {\r\n        inTestMode = true\r\n        let assert = global.assert; let assertNull = global.assertNull; let assertNotNull = global.assertNotNull; let assertEquals = global.assertEquals; let assertNotEquals = global.assertNotEquals; let assertTrue = global.assertTrue; let assertFalse = global.assertFalse; let assertDefined = global.assertDefined; let assertContains = global.assertContains; let assertEmpty = global.assertEmpty; let assertNotEmpty = global.assertNotEmpty; let assertLength = global.assertLength;\r\n\r\n        let lampAccInfo = { id: 1, name: \"Лампочка\", room: \"Тест\", model: \"\", modelId: \"\", manufacturer: \"\", manufacturerId: \"\", serial: \"\", firmware: \"\", services: [{ id: 10, type: HS.Lightbulb, name: \"Лампочка Температуры\", characteristics: [{ id: 11, type: HC.On, value: !0 }, { id: 12, type: HC.Brightness, name: \"Яркость\", value: 100 }, { id: 13, type: HC.ColorTemperature, name: \"Температура\", value: 400 }] }, { id: 20, type: HS.Lightbulb, name: \"Лампочка Цвет\", characteristics: [{ id: 21, type: HC.On, value: !0 }, { id: 22, type: HC.Brightness, name: \"Яркость\", value: 100 }, { id: 23, type: HC.Saturation, name: \"Насыщенность\", value: 0 }, { id: 24, type: HC.Hue, name: \"Оттенок\", value: 0 }] }] };\r\n        let hours = 0\r\n        let minute = 30\r\n        let preset = 99999\r\n\r\n        let valuesForTime = getCircadianLightForTime(hours, minute, preset, \"1.1\")\r\n        assertLength(valuesForTime, 2)\r\n        assertEquals(valuesForTime[0], 300, \"Тест 1. Температура не совпадает\")\r\n        assertEquals(valuesForTime[1], 60, \"Тест 1. Яркость не совпадает\")\r\n\r\n        let acc = global.createUnitTestFullAccessory(lampAccInfo)\r\n        let serviceTemp = acc.getServices()[0];\r\n        setCircadianLightForServiceForTime(serviceTemp, preset, false, false, false, false, false, false, false, hours, minute)\r\n        assertEquals(serviceTemp.getCharacteristic(HC.ColorTemperature).getValue(), 300, \"Тест 2. Температура не совпадает\")\r\n        assertEquals(serviceTemp.getCharacteristic(HC.Brightness).getValue(), 60, \"Тест 2. Яркость не совпадает\")\r\n\r\n        let serviceHue = acc.getServices()[1];\r\n        setCircadianLightForServiceForTime(serviceHue, preset, false, false, false, false, false, false, false, hours, minute)\r\n        assertEquals(serviceHue.getCharacteristic(HC.Saturation).getValue(), 44, \"Тест 3. Насыщенность не совпадает\")\r\n        assertEquals(serviceHue.getCharacteristic(HC.Hue).getValue(), 32, \"Тест 3. Оттенок не совпадает\")\r\n        assertEquals(serviceHue.getCharacteristic(HC.Brightness).getValue(), 60, \"Тест 3. Яркость не совпадает\")\r\n        console.info(DEBUG_TITLE + \"Тесты пройдены\")\r\n    } finally {\r\n        inTestMode = false\r\n    }\r\n}\r\n\r\nfunction getCircadianLightGlobalVariableForReset(service) {\r\n    return \"CircadianLight_\" + service.getUUID() + \"_reset\"\r\n}\r\n\r\nfunction getCircadianLightGlobalVariableForDisable(service) {\r\n    return \"CircadianLight_\" + service.getUUID() + \"_disabled\"\r\n}\r\n\r\n\r\n// Функции для управления циркадным режимом из своих сценариев\r\nfunction resetCircadianLight(service) {\r\n    GlobalVariables[getCircadianLightGlobalVariableForReset(service)] = true\r\n}\r\n\r\nfunction setCircadianLightDisabled(service, disabled) {\r\n    GlobalVariables[getCircadianLightGlobalVariableForDisable(service)] = disabled\r\n}\r\n\r\nfunction setCircadianLightEnabled(service, enabled) {\r\n    GlobalVariables[getCircadianLightGlobalVariableForDisable(service)] = !enabled\r\n}\r\n\r\nfunction disableCircadianLightFor(services) {\r\n    toArray(services).forEach(function (service) { GlobalVariables[getCircadianLightGlobalVariableForDisable(service)] = true; })\r\n}\r\n\r\nfunction enableCircadianLightFor(services) {\r\n    toArray(services).forEach(function (service) { GlobalVariables[getCircadianLightGlobalVariableForDisable(service)] = false; })\r\n}\r\n\r\nfunction resetCircadianLightFor(services) {\r\n    toArray(services).forEach(function (service) { GlobalVariables[getCircadianLightGlobalVariableForReset(service)] = true; })\r\n}\r\nrunTests();\r\n",
    "type": "GLOBAL"
  }
}