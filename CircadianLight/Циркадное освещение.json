{
  "scenarioTemplate": {
    "name": "Циркадное освещение",
    "desc": "Устанавливает температуру и яркость лампы в зависимости от времени суток. Значения берутся из глобального сценария. Изменить значения внутри режимов и добавить свои можно там же. Обновления по ссылке https://github.com/KirillAshikhmin/Sprut.Hub_Tools/tree/main/CircadianLight и в канале https://t.me/smart_sputnik",
    "active": true,
    "onStart": true,
    "sync": false,
    "data": "info = {\n  name: \"Циркадное освещение\",\n  description: \"Устанавливает температуру и яркость лампы в зависимости от времени суток. Значения берутся из глобального сценария. Изменить значения внутри режимов и добавить свои можно там же. Обновления по ссылке https://github.com/KirillAshikhmin/Sprut.Hub_Tools/tree/main/CircadianLight и в канале https://t.me/smart_sputnik\",\n  version: \"4.2\",\n  author: \"@BOOMikru\",\n\n  active: true,\n  onStart: true,\n  sync: false,\n\n  sourceServices: [HS.Lightbulb],\n  sourceCharacteristics: [HC.On, HC.Brightness, HC.ColorTemperature, HC.Hue, HC.Saturation],\n\n  options: {\n    DontChangeParam: {\n      name: {\n        en: \"Dont change parameter automatically\",\n        ru: \"Не менять определённый параметр автоматически после его ручного изменения. Сбрасывается при выключении лампы\"\n      },\n      type: \"Boolean\",\n      value: true\n    },\n    StopCircadionAfterChangeParam: {\n      name: {\n        en: \"Stop circadion after change param\",\n        ru: \"Останавливать циркадный режим после изменения любого из параметров. Работает только совместно с выключенной настройкой выше\"\n      },\n      type: \"Boolean\",\n      value: false\n    },\n    Preset: {\n      name: {\n        en: \"Preset\",\n        ru: \"Режим работы\"\n      },\n      type: \"Integer\",\n      value: 0,\n      formType: \"list\",\n      values: global.getCircadianLightModes()\n    },\n    WhatChange: {\n      name: {\n        en: \"What сhange\",\n        ru: \"Что изменять?\"\n      },\n      type: \"Integer\",\n      value: 0,\n      formType: \"list\",\n      values: [\n        { value: 0, name: { en: \"Brightness and temperature\", ru: \"Яркость и цветовую температуру\" } },\n        { value: 1, name: { en: \"Brightness\", ru: \"Только яркость\" } },\n        { value: 2, name: { en: \"Temperature\", ru: \"Только цветовую температуру\" } }\n      ]\n    },\n    SmoothOn: {\n      name: {\n        en: \"Smooth on\",\n        ru: \"Плавное изменение яркости при включении (Экспериментально)\"\n      },\n      type: \"Boolean\",\n      value: false\n    },\n    Debug: {\n      name: {\n        en: \"Debug\",\n        ru: \"Отладка\"\n      },\n      type: \"Boolean\",\n      value: false\n    }\n  },\n\n  variables: {\n    // Параметры запуска\n    startParameter: {\n      brightAtStart: -1,\n      isTurnOnByBright: false,\n      isTurnOnByTemp: false,\n      isTurnOnByHue: false,\n      isTurnOnBySat: false\n    },\n    // Параметры плавного включения\n    smoothOn: {\n      target: 1,\n      active: false,\n      task: undefined,\n    },\n    // Задача на обновление значения циркады\n    cronTask: undefined,\n    // Задача на восстановление циркады\n    reset: {\n      name: undefined,\n      task: undefined,\n    },\n    // Изменение параметров\n    changed: {\n      // Яркость изменена вручную\n      bright: false,\n      // Температура изменена вручную\n      temp: false,\n      // Оттенок изменен вручную\n      hue: false,\n      // Насыщенность изменена вручную\n      sat: false,\n    },\n    disabled: false\n  }\n}\n\n\nfunction trigger(source, value, variables, options, context) {\n  const service = source.getService()\n  const isOn = source.getType() == HC.On\n  const isDebug = options.Debug\n\n  // Проверка выключения и сброса\n  const disableName = global.getCircadianLightGlobalVariableForDisable(service)\n  const resetName = global.getCircadianLightGlobalVariableForReset(source.getService())\n  variables.reset.name = resetName\n\n  if (isOn && value) {\n    if (value) {\n      GlobalVariables[resetName] = false\n\n      variables.reset.task = setInterval(function () {\n        // Выключили, останавливаем\n        if (GlobalVariables[disableName] == true && variables.disabled != true) {\n\n          debug(\"==== ОТКЛЮЧЕНИЕ ==== Циркадный режим отключен для {}\", source, isDebug)\n          variables.disabled = true\n          reset(variables)\n          stop(source, variables, options)\n          return;\n        }\n        // Включили, возобновляем работу\n        if (GlobalVariables[disableName] == false && variables.disabled == true) {\n          debug(\"==== ВКЛЮЧЕНИЕ ==== Циркадный режим включен для {}\", source, isDebug)\n          variables.disabled = false\n          // Включили, надо и перезапустить\n          GlobalVariables[resetName] = true\n        }\n\n        if (GlobalVariables[resetName] == true) {\n          GlobalVariables[resetName] = false\n          debug(\"==== СБРОС ==== Циркадный режим восстановлен для {}\", source, isDebug)\n          reset(variables)\n          if (service.getCharacteristic(HC.On).getValue()) {\n            setCircadianValue(source.getService(), variables, options)\n            restartCron(source, variables, options)\n          }\n        }\n      }, 1000)\n    } else {\n      if (variables.reset.task) {\n        variables.reset.task.clear()\n        variables.reset.task = undefined\n      }\n    }\n  }\n\n  if (GlobalVariables[disableName] == true) return\n\n\n  // Проверка способа включения\n  if (isOn && value) {\n    if (contain(context, \"Lightbulb.Brightness\")) {\n      debug(\"Включается через изменение яркости. {}\", source, isDebug)\n      variables.startParameter.isTurnOnByBright = true\n      variables.startParameter.brightAtStart = service.getCharacteristic(HC.Brightness).getValue()\n    } else if (contain(context, \"Lightbulb.ColorTemperature\")) {\n      debug(\"Включается через изменение температуры. {}\", source, isDebug)\n      variables.startParameter.isTurnOnByTemp = true\n    } else if (contain(context, \"Lightbulb.Saturation\")) {\n      debug(\"Включается через изменение насыщенности. {}\", source, isDebug)\n      variables.startParameter.isTurnOnByTemp = true\n      variables.startParameter.isTurnOnBySat = true\n    } else if (contain(context, \"Lightbulb.Hue\")) {\n      debug(\"Включается через изменение оттенки. {}\", source, isDebug)\n      variables.startParameter.isTurnOnByTemp = true\n      variables.startParameter.isTurnOnByHue = true\n    }\n  }\n\n\n  const isBright = source.getType() == HC.Brightness\n  const isTemp = source.getType() == HC.ColorTemperature\n  const isHue = source.getType() == HC.Hue\n  const isSaturation = source.getType() == HC.Saturation\n\n  // Проверка изменения параметров. Событие вызывается и при автоматической смене яркости\n  if (isBright || isTemp || isHue || isSaturation) {\n\n    // Если включено \"Не менять яркость\", и ещё не меняли\n    if (options.DontChangeParam) {\n\n      if (variables.startParameter.isTurnOnByBright) variables.changed.bright = true\n      if (variables.startParameter.isTurnOnByTemp) variables.changed.temp = true\n\n      if (isBright && !variables.changed.bright && !variables.smoothOn.active) {\n        let circadianBright = global.getCircadianLight(options.Preset)[1]\n        let changed = difference(circadianBright, value) > 1\n        variables.changed.bright = changed\n      }\n\n      if (isTemp && !variables.changed.temp) {\n        let circadianTemp = global.getCircadianLight(options.Preset)[0]\n        let changed = difference(circadianTemp, value) > 1\n        variables.changed.temp = changed\n      }\n\n      if (isHue && !variables.changed.hue) {\n        let circadianTemp = global.getCircadianLight(options.Preset)[0]\n        let hueAndSat = global.getHueAndSaturationFromMired(circadianTemp)\n        let changed = difference(hueAndSat[0], value) > 1\n        variables.changed.hue = changed\n        if (changed) {\n          variables.changed.temp = true\n        }\n      }\n\n      if (isSaturation && !variables.changed.sat) {\n        let circadianTemp = global.getCircadianLight(options.Preset)[0]\n        let hueAndSat = global.getHueAndSaturationFromMired(circadianTemp)\n        let changed = difference(hueAndSat[1], value) > 1\n        variables.changed.sat = changed\n        if (changed) {\n          variables.changed.temp = true\n        }\n      }\n    }\n\n    if (isBright && variables.changed.bright) debug(\"Яркость изменена вручную. Больше меняться автоматически не будет для {}\", source, isDebug, context)\n    if (isTemp && variables.changed.temp) debug(\"Температура изменена вручную. Больше меняться автоматически не будет для {}\", source, isDebug, context)\n    if (isHue && variables.changed.hue) debug(\"Оттенок изменен вручную. Больше меняться автоматически не будет для {}\", source, isDebug, context)\n    if (isSaturation && variables.changed.sat) debug(\"Насыщенность изменена вручную. Больше меняться автоматически не будет для {}\", source, isDebug, context)\n\n    if (variables.cronTask && variables.changed.bright && (variables.changed.temp || (variables.changed.hue && variables.changed.sat))) {\n      debug(\"Все параметры, которые могли меняться в циркадном режиме изменены и больше не будут меняться. Останавливаем циркакадный режим для {}\", source, isDebug)\n      stop(source, variables, options)\n      return\n    }\n\n    if (options.StopCircadionAfterChangeParam && variables.cronTask && (variables.changed.bright || variables.changed.temp || variables.changed.hue || variables.changed.sat)) {\n      debug(\"Включено свойство 'Останавливать циркадный режим после изменения любого параметра'. Параметр был изменён, циркадный режим остановлен для {}\", source, isDebug)\n      stop(source, variables, options)\n      return\n    }\n  } else {\n\n    if (value) {\n      const brightness = source.getService().getCharacteristic(HC.Brightness);\n      if (brightness == null) {\n        console.error(DEBUG_TITLE + \"Лампочка {}, не умеет изменять яркость\", source, isDebug)\n        return;\n      }\n\n      let enableBrightByWhatChange = options.WhatChange == 0 || options.WhatChange == 1\n      let enableTempByWhatChange = options.WhatChange == 0 || options.WhatChange == 2\n\n      const circadianValue = global.getCircadianLight(options.Preset)\n\n      // Начальная установка значения\n      let installStartBright = enableBrightByWhatChange && !variables.startParameter.isTurnOnByBright && !variables.changed.bright && !options.SmoothOn\n      let installStartTemp = enableTempByWhatChange && !variables.startParameter.isTurnOnByTemp && !variables.changed.temp\n      let installStartHue = enableTempByWhatChange && !variables.startParameter.isTurnOnByTemp && !variables.startParameter.isTurnOnByHue && !variables.changed.temp\n      let installStartSat = enableTempByWhatChange && !variables.startParameter.isTurnOnByTemp && !variables.startParameter.isTurnOnBySat && !variables.changed.temp\n\n      if (installStartBright || installStartTemp || installStartHue || installStartSat) {\n        global.setCircadianLightForService(service, options.Preset, !installStartBright, !installStartTemp, !installStartHue, !installStartSat);\n      }\n\n      // Плавное включение\n      let brightAtStart = variables.startParameter.brightAtStart\n      let target = brightAtStart > 0 ? brightAtStart : circadianValue[1]\n      let brightCharacteristic = service.getCharacteristic(HC.Brightness)\n      if (!variables.changed.bright && !variables.startParameter.isTurnOnByBright && enableBrightByWhatChange && options.SmoothOn && target > 1) {\n        variables.smoothOn.active = true\n        let currentBr = 1\n        brightCharacteristic.setValue(currentBr)\n        let increaseBy = (target / 15) | 0\n        setTimeout(function () {\n          if (service.getCharacteristic(HC.On).getValue()) {\n            let interval = setInterval(function () {\n              if (currentBr >= target) {\n                interval.clear()\n                interval = undefined\n                variables.smoothOn.active = false\n              }\n              currentBr = Math.min(currentBr + increaseBy, target)\n              brightCharacteristic.setValue(currentBr)\n            }, 150)\n            variables.smoothOn.task = interval\n          }\n        }, 300);\n      } else {\n        brightCharacteristic.setValue(target)\n      }\n\n      restartCron(source, variables, options)\n\n    } else {\n      reset(variables)\n      stop(source, variables, options)\n\n      if (variables.reset.task != undefined) {\n        variables.reset.task.clear()\n        variables.reset.task = undefined\n      }\n    }\n  }\n}\n\nfunction setCircadianValue(service, variables, options) {\n  var enableBrightByWhatChange = options.WhatChange == 0 || options.WhatChange == 1\n  var enableTempByWhatChange = options.WhatChange == 0 || options.WhatChange == 2\n\n  var dontChangeBright = variables.changed.bright == true || !enableBrightByWhatChange || variables.smoothOn.active\n  var dontChangeTemp = variables.changed.temp == true || !enableTempByWhatChange\n  var dontChangeHue = variables.changed.hue == true || !enableTempByWhatChange\n  var dontChangeSaturate = variables.changed.sat == true || !enableTempByWhatChange\n\n  global.setCircadianLightForService(service, options.Preset, dontChangeBright, dontChangeTemp, dontChangeHue, dontChangeSaturate);\n}\n\nfunction restartCron(source, variables, options) {\n  // Отменяем задачу на обновление\n  if (variables.cronTask && variables.cronTask != undefined) {\n    variables.cronTask.clear()\n  }\n\n  // Запускаем новую задачу на обновление\n  let task = Cron.schedule(\"0 */5 * * * *\", function () {\n    const disableName = global.getCircadianLightGlobalVariableForDisable(source.getService())\n    if (GlobalVariables[disableName] == true) {\n      stop(source, variables, options)\n      reset(variables)\n    }\n\n    setCircadianValue(source.getService(), variables, options)\n  });\n\n  variables.cronTask = task;\n  debug(\"==== ЗАПУСК ==== Циркадный режим запущен для {}\", source, options.Debug)\n}\n\nfunction stop(source, variables, options) {\n  // Выключили лампу. Отменяем задачу на циркаду и сбрасываем параметры\n  if (variables.cronTask) {\n    variables.cronTask.clear()\n    variables.cronTask = undefined;\n  }\n  debug(\"==== ОСТАНОВКА ==== Циркадный режим остановлен для {}\", source, options.isDebug)\n}\n\n// Сбрасываем состояние при выключении\nfunction reset(variables) {\n  if (variables.smoothOn.task != undefined) {\n    variables.smoothOn.task.clear()\n    variables.smoothOn.task = undefined\n  }\n  variables.startParameter.brightAtStart = -1\n  variables.startParameter.isTurnOnByBright = false\n  variables.startParameter.isTurnOnByTemp = false\n  variables.startParameter.isTurnOnByHue = false\n  variables.startParameter.isTurnOnBySat = false\n  variables.smoothOn.active = false\n  variables.changed.bright = false\n  variables.changed.temp = false\n  variables.changed.hue = false\n  variables.changed.sat = false\n}\n\nfunction difference(a, b) {\n  return Math.abs(a - b);\n}\n\nfunction contain(source, substring) {\n  return source.toString().indexOf(substring) !== -1\n}\n\nfunction debug(format, source, isDebug, context) {\n  if (isDebug) {\n    console.info(DEBUG_TITLE + format, global.getCircadianLightServiceName(source.getService()))\n    if (context)\n      console.info(\"{} Контекст изменения: {}\", DEBUG_TITLE, context)\n  }\n}\n\nconst DEBUG_TITLE = \"Циркадное освещение. \"",
    "type": "LOGIC"
  }
}