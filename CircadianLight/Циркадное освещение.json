{
  "scenarioTemplate": {
    "name": "Циркадное освещение",
    "desc": "Устанавливает температуру и яркость лампы в зависимости от времени суток. Значения берутся из глобального сценария. Изменить значения внутри режимов и добавить свои можно там же. Обновления по ссылке https://github.com/KirillAshikhmin/Sprut.Hub_Tools/tree/main/CircadianLight и в канале https://t.me/smart_sputnik",
    "active": true,
    "onStart": true,
    "sync": false,
    "data": "info = {\n  name: \"Циркадное освещение\",\n  description: \"Устанавливает температуру и яркость лампы в зависимости от времени суток. Значения берутся из глобального сценария. Изменить значения внутри режимов и добавить свои можно там же. Обновления по ссылке https://github.com/KirillAshikhmin/Sprut.Hub_Tools/tree/main/CircadianLight и в канале https://t.me/smart_sputnik\",\n  version: \"5.0\",\n  author: \"@BOOMikru\",\n\n  active: true,\n  onStart: true,\n  sync: false,\n\n  sourceServices: [HS.Lightbulb],\n  sourceCharacteristics: [HC.On, HC.Brightness, HC.ColorTemperature, HC.Hue, HC.Saturation],\n\n  options: {\n    DontChangeParam: {\n      name: {\n        en: \"Don't change parameter automatically\",\n        ru: \"Не менять характеристику автоматически после её ручного изменения\"\n      },\n      desc: {\n        en: \"Reset after turn off\",\n        ru: \"Например - изменили яркость и она больше не изменится автоматически. Сбрасывается при выключении лампы\"\n      },\n      type: \"Boolean\",\n      value: true\n    },\n    StopAfterChangeParam: {\n      name: {\n        en: \"Stop after change characteristic\",\n        ru: \"Останавливать циркадный режим после изменения любой из характеристик\"\n      },\n      desc: {\n        en: \"Work only up option\",\n        ru: \"При ручном изменении яркости или температуры циркадный режим останавливается. Работает только совместно с выключенной настройкой выше\"\n      },\n      type: \"Boolean\",\n      value: false\n    },\n    Preset: {\n      name: {\n        en: \"Preset\",\n        ru: \"Режим работы\"\n      },\n      desc: {\n        en: \"Can change in Perams global scenario\",\n        ru: \"Изменить или добавить режим можно в глобальном сценарии 'Циркадное освещение. Глобальный. Параметры'\"\n      },\n      type: \"Integer\",\n      value: 0,\n      formType: \"list\",\n      values: global.getCircadianLightModes()\n    },\n    WhatChange: {\n      name: {\n        en: \"What сhange\",\n        ru: \"Что изменять\"\n      },\n      type: \"Integer\",\n      value: 0,\n      formType: \"list\",\n      values: [\n        { value: 0, name: { en: \"Brightness and temperature\", ru: \"Яркость и цветовую температуру\" } },\n        { value: 1, name: { en: \"Brightness\", ru: \"Только яркость\" } },\n        { value: 2, name: { en: \"Temperature\", ru: \"Только цветовую температуру\" } }\n      ]\n    },\n    SmoothOnTime: {\n      name: {\n        en: \"Smooth on time (seconds)\",\n        ru: \"Время плавного включения (секунды)\"\n      },\n      desc: {\n        en: \"Time in seconds for smooth brightness transition when turning on. Set to 0 to disable. Experimental feature. It is better to use the lamp's built-in setting if available.\",\n        ru: \"Время в секундах для плавного изменения яркости при включении. Установите 0 для отключения. Экспериментальная функция. Лучше использовать встроенную настройку лампы, если она доступна.\"\n      },\n      type: \"Integer\",\n      value: 0,\n    },\n    Debug: {\n      name: {\n        en: \"Debug\",\n        ru: \"Отладка\"\n      },\n      type: \"Boolean\",\n      value: false\n    }\n  },\n\n  variables: {\n    // Параметры запуска\n    startParameter: {\n      brightAtStart: -1,\n      isTurnOnByBright: false,\n      isTurnOnByTemp: false,\n      isTurnOnByHue: false,\n      isTurnOnBySat: false\n    },\n    // Параметры плавного включения\n    smoothOn: {\n      target: 1,\n      active: false,\n      task: undefined,\n    },\n    // Задача на обновление значения циркады\n    cronTask: undefined,\n    // Задача на восстановление циркады\n    reset: {\n      name: undefined,\n      task: undefined,\n    },\n    // Изменение параметров\n    changed: {\n      // Яркость изменена вручную\n      bright: false,\n      // Температура изменена вручную\n      temp: false,\n      // Оттенок изменен вручную\n      hue: false,\n      // Насыщенность изменена вручную\n      sat: false,\n    },\n    disabled: false,\n    runtime: {\n      stopped: false,\n      dontChangeBright: false,\n      dontChangeTemp: false,\n      dontChangeHue: false,\n      dontChangeSat: false,\n    }\n  }\n}\n\n\nfunction trigger(source, value, variables, options, context) {\n  const service = source.getService()\n  const isOn = source.getType() == HC.On\n  const isDebug = options.Debug\n\n  // Проверка выключения и сброса\n  const disableName = global.getCircadianLightGlobalVariableForDisable(service)\n  const resetName = global.getCircadianLightGlobalVariableForReset(source.getService())\n  variables.reset.name = resetName\n\n  if (isOn) {\n    if (value) {\n      GlobalVariables[resetName] = false\n\n      variables.reset.task = setInterval(function () {\n        // Выключили, останавливаем\n        if (GlobalVariables[disableName] == true && variables.disabled != true) {\n          debug(\"==== ОТКЛЮЧЕНИЕ ==== Циркадный режим отключен\", source, isDebug)\n          variables.disabled = true\n          stop(source, variables, options)\n          reset(variables)\n          return;\n        }\n        // Включили, возобновляем работу\n        if (GlobalVariables[disableName] == false && variables.disabled == true) {\n          debug(\"==== ВКЛЮЧЕНИЕ ==== Циркадный режим включен\", source, isDebug)\n          variables.disabled = false\n          // Включили, надо и перезапустить\n          GlobalVariables[resetName] = true\n        }\n\n        if (GlobalVariables[resetName] == true) {\n          GlobalVariables[resetName] = false\n          debug(\"==== СБРОС ==== Циркадный режим восстановлен\", source, isDebug)\n          reset(variables)\n          if (service.getCharacteristic(HC.On).getValue()) {\n            setCircadianValue(source.getService(), variables, options)\n            restartCron(source, variables, options)\n          }\n        }\n      }, 1000)\n    } else {\n      if (variables.reset.task) {\n        variables.reset.task.clear()\n        variables.reset.task = undefined\n      }\n    }\n  }\n\n  const disabled = GlobalVariables[disableName] == true || variables.runtime.stopped == true\n  if (isOn && !value) {\n    stop(source, variables, options, disabled)\n    reset(variables)\n\n    if (variables.reset.task) {\n      variables.reset.task.clear()\n      variables.reset.task = undefined\n    }\n    return\n  }\n\n  if (disabled) return\n\n  // Проверка способа включения\n  if (isOn && value) {\n    if (contain(context, \"Lightbulb.Brightness\") || variables.changed.bright) {\n      debug(\"Включается через изменение яркости на значение {}\", source, isDebug, service.getCharacteristic(HC.Brightness).getValue(), context)\n      variables.startParameter.isTurnOnByBright = true\n      variables.startParameter.brightAtStart = service.getCharacteristic(HC.Brightness).getValue()\n    }\n    if (contain(context, \"Lightbulb.ColorTemperature\") || variables.changed.temp) {\n      debug(\"Включается через изменение температуры на значение {}\", source, isDebug, service.getCharacteristic(HC.ColorTemperature).getValue(), context)\n      variables.startParameter.isTurnOnByTemp = true\n    }\n    if (contain(context, \"Lightbulb.Saturation\")) {\n      debug(\"Включается через изменение насыщенности на значение {}\", source, isDebug, service.getCharacteristic(HC.Saturation).getValue(), context)\n      variables.startParameter.isTurnOnByTemp = true\n      variables.startParameter.isTurnOnBySat = true\n    }\n    if (contain(context, \"Lightbulb.Hue\")) {\n      debug(\"Включается через изменение оттенки на значение {}\", source, isDebug, service.getCharacteristic(HC.Hue).getValue(), context)\n      variables.startParameter.isTurnOnByTemp = true\n      variables.startParameter.isTurnOnByHue = true\n    }\n  }\n\n  const isBright = source.getType() == HC.Brightness\n  const isTemp = source.getType() == HC.ColorTemperature\n  const isHue = source.getType() == HC.Hue\n  const isSaturation = source.getType() == HC.Saturation\n\n  // Проверка изменения параметров. Событие вызывается и при автоматической смене яркости\n  if (isBright || isTemp || isHue || isSaturation) {\n\n    // Если включено \"Не менять яркость\", и ещё не меняли\n    if (options.DontChangeParam) {\n\n      let autoChange = isAutomaticChange(context)\n\n      if (variables.startParameter.isTurnOnByBright) variables.changed.bright = true\n      if (variables.startParameter.isTurnOnByTemp) variables.changed.temp = true\n\n      if (!autoChange && isBright && !variables.changed.bright && !variables.smoothOn.active) {\n        variables.changed.bright = true\n      }\n\n      if (!autoChange && isTemp && !variables.changed.temp) {\n        variables.changed.temp = true\n      }\n\n      if (!autoChange && isHue && !variables.changed.hue) {\n        variables.changed.hue = true\n        variables.changed.temp = true\n      }\n\n      if (!autoChange && isSaturation && !variables.changed.sat) {\n        variables.changed.sat = true\n        variables.changed.temp = true\n      }\n    }\n\n    if (isBright && variables.changed.bright) {\n      debug(\"Яркость изменена вручную. Больше меняться автоматически не будет. Значение: {}\", source, isDebug, value, context)\n      variables.runtime.dontChangeBright = true\n    }\n    if (isTemp && variables.changed.temp) {\n      debug(\"Температура изменена вручную. Больше меняться автоматически не будет. Значение: {}\", source, isDebug, value, context)\n      variables.runtime.dontChangeTemp = true\n    }\n    if (isHue && variables.changed.hue) {\n      debug(\"Оттенок изменен вручную. Больше меняться автоматически не будет. Значение: {}\", source, isDebug, value, context)\n      variables.runtime.dontChangeHue = true\n      variables.runtime.dontChangeTemp = true\n    }\n    if (isSaturation && variables.changed.sat && !variables.runtime.dontChangeSat) {\n      debug(\"Насыщенность изменена вручную. Больше меняться автоматически не будет. Значение: {}\", source, isDebug, value, context)\n      variables.runtime.dontChangeSat = true\n      variables.runtime.dontChangeTemp = true\n    }\n\n    if (variables.cronTask && variables.changed.bright && (variables.changed.temp || (variables.changed.hue && variables.changed.sat))) {\n      debug(\"Все параметры, которые могли меняться в циркадном режиме изменены и больше не будут меняться. Останавливаем циркакадный режим\", source, isDebug)\n      stop(source, variables, options)\n      variables.runtime.stopped = true\n      return\n    }\n\n    if (options.StopAfterChangeParam && variables.cronTask && (variables.changed.bright || variables.changed.temp || variables.changed.hue || variables.changed.sat)) {\n      debug(\"Включено свойство 'Останавливать циркадный режим после изменения любого параметра'. Параметр был изменён, циркадный режим остановлен\", source, isDebug)\n      stop(source, variables, options)\n      variables.runtime.stopped = true\n      return\n    }\n  }\n\n  // Основная логика\n  if (isOn) {\n    if (value) {\n      const brightness = source.getService().getCharacteristic(HC.Brightness);\n      if (brightness == null) {\n        console.error(DEBUG_TITLE + \"Лампочка не умеет изменять яркость\", source, isDebug)\n        return;\n      }\n\n      let enableBrightByWhatChange = options.WhatChange == 0 || options.WhatChange == 1\n      let enableTempByWhatChange = options.WhatChange == 0 || options.WhatChange == 2\n\n      const circadianValue = global.getCircadianLight(options.Preset)\n\n      // Начальная установка значения\n      let installStartBright = enableBrightByWhatChange && !variables.startParameter.isTurnOnByBright && !variables.changed.bright && !options.SmoothOn\n      let installStartTemp = enableTempByWhatChange && !variables.startParameter.isTurnOnByTemp && !variables.changed.temp\n      let installStartHue = enableTempByWhatChange && !variables.startParameter.isTurnOnByTemp && !variables.startParameter.isTurnOnByHue && !variables.changed.temp\n      let installStartSat = enableTempByWhatChange && !variables.startParameter.isTurnOnByTemp && !variables.startParameter.isTurnOnBySat && !variables.changed.temp\n\n      if (installStartBright || installStartTemp || installStartHue || installStartSat) {\n        global.setCircadianLightForService(service, options.Preset, !installStartBright, !installStartTemp, !installStartHue, !installStartSat, isDebug, true);\n      }\n\n      if (!installStartBright && !installStartTemp) {\n        debug(\"==== НЕ ЗАПУЩЕН ==== Циркадный режим не запущен, так как при включении лампы были изменены яркость и температура\", source, isDebug)\n        stop(source, variables, options, true)\n        reset(variables)\n        variables.runtime.stopped = true\n        return\n      }\n\n\n      // Плавное включение\n      let brightAtStart = variables.startParameter.brightAtStart\n      let target = brightAtStart > 0 ? brightAtStart : circadianValue[1]\n      let brightCharacteristic = service.getCharacteristic(HC.Brightness)\n      let smoothTime = options.SmoothOnTime || 0;  // Время плавного включения, по умолчанию 0\n      if (!variables.changed.bright && !variables.startParameter.isTurnOnByBright && enableBrightByWhatChange && smoothTime > 0 && target > 1) {\n        variables.smoothOn.active = true;\n        let currentBr = 1;  // Начальная яркость — 1%\n        brightCharacteristic.setValue(currentBr);\n\n        let intervalMs = 100;  // Интервал обновления — 100 мс\n        let steps = (smoothTime * 1000) / intervalMs;  // Количество шагов\n        let increaseBy = (target - currentBr) / steps;  // Шаг увеличения яркости\n\n        let interval = setInterval(function () {\n          if (currentBr >= target || !service.getCharacteristic(HC.On).getValue()) {\n            clearInterval(interval);\n            interval = undefined\n            variables.smoothOn.active = false;\n            if (currentBr >= target) brightCharacteristic.setValue(target);\n          } else {\n            currentBr += increaseBy;\n            currentBr = Math.min(currentBr, target);\n            brightCharacteristic.setValue(Math.round(currentBr));\n          }\n        }, intervalMs);\n        variables.smoothOn.task = interval;\n      }\n      restartCron(source, variables, options)\n    } else {\n      stop(source, variables, options)\n      reset(variables)\n\n      if (variables.reset.task) {\n        variables.reset.task.clear()\n        variables.reset.task = undefined\n      }\n    }\n  }\n}\n\nfunction setCircadianValue(service, variables, options) {\n  var enableBrightByWhatChange = options.WhatChange == 0 || options.WhatChange == 1\n  var enableTempByWhatChange = options.WhatChange == 0 || options.WhatChange == 2\n\n  var dontChangeBright = variables.changed.bright == true || !enableBrightByWhatChange || variables.smoothOn.active\n  var dontChangeTemp = variables.changed.temp == true || !enableTempByWhatChange\n  var dontChangeHue = variables.changed.hue == true || !enableTempByWhatChange\n  var dontChangeSaturate = variables.changed.sat == true || !enableTempByWhatChange\n\n  global.setCircadianLightForService(service, options.Preset, dontChangeBright, dontChangeTemp, dontChangeHue, dontChangeSaturate, options.Debug);\n}\n\nfunction restartCron(source, variables, options) {\n  // Отменяем задачу на обновление\n  if (variables.cronTask && variables.cronTask != undefined) {\n    variables.cronTask.clear()\n  }\n\n  // Запускаем новую задачу на обновление\n  let task = Cron.schedule(\"0 */5 * * * *\", function () {\n    const disableName = global.getCircadianLightGlobalVariableForDisable(source.getService())\n    if (GlobalVariables[disableName] == true) {\n      variables.disabled = true\n      stop(source, variables, options)\n      reset(variables)\n    }\n\n    setCircadianValue(source.getService(), variables, options)\n  });\n\n  variables.cronTask = task;\n  debug(\"==== ЗАПУСК ==== Циркадный режим запущен\", source, options.Debug)\n}\n\nfunction stop(source, variables, options, dontShowDebug) {\n  // Выключили лампу. Отменяем задачу на циркаду и сбрасываем параметры\n  if (variables.cronTask) {\n    variables.cronTask.clear()\n    variables.cronTask = undefined;\n  }\n  if (dontShowDebug) return\n  debug(\"==== ОСТАНОВКА ==== Циркадный режим остановлен\", source, options.Debug)\n}\n\n// Сбрасываем состояние при выключении\nfunction reset(variables) {\n  if (variables.smoothOn.task != undefined) {\n    variables.smoothOn.task.clear()\n    variables.smoothOn.task = undefined\n  }\n  variables.startParameter.brightAtStart = -1\n  variables.startParameter.isTurnOnByBright = false\n  variables.startParameter.isTurnOnByTemp = false\n  variables.startParameter.isTurnOnByHue = false\n  variables.startParameter.isTurnOnBySat = false\n  variables.smoothOn.active = false\n  variables.changed.bright = false\n  variables.changed.temp = false\n  variables.changed.hue = false\n  variables.changed.sat = false\n  variables.runtime.stopped = false\n  variables.runtime.dontChangeBright = false\n  variables.runtime.dontChangeTemp = false\n  variables.runtime.dontChangeHue = false\n  variables.runtime.dontChangeSat = false\n}\n\nfunction difference(a, b) {\n  return Math.abs(a - b);\n}\n\nfunction contain(source, substring) {\n  return source.toString().indexOf(substring) !== -1\n}\n\nfunction isAutomaticChange(context) {\n  // Разделяем контекст на элементы по символу '<-'\n  const elements = context.toString().split(' <- ')//.map(function(el) { el.trim() });\n  // Проверяем, есть ли элементы в массиве\n  if (elements.length === 0) {\n    return false;\n  }\n\n  // Условие 1: Последний элемент начинается с 'CLINK'\n  if (elements[elements.length - 1].startsWith('CLINK')) {\n    return true;\n  }\n\n  // Условие 2: Первые три элемента соответствуют шаблону 'LOGIC <- C <- LOGIC'\n  if (elements.length >= 3 &&\n    elements[0].startsWith('LOGIC') &&\n    elements[1].startsWith('C') &&\n    elements[2].startsWith('LOGIC')) {\n    return true;\n  }\n\n  // Если условия не выполнены, изменение ручное\n  return false;\n}\n\nfunction debug(format, source, isDebug, arg, context) {\n  arg = arg == undefined ? \"\" : arg\n  if (isDebug) {\n    const prefix = DEBUG_TITLE + global.getCircadianLightServiceName(source.getService()) + \" \"\n    const suffix = context ? \". Контекст: {}\" : \"\"\n    console.info(prefix + format + suffix, arg, context)\n  }\n}\n\nconst DEBUG_TITLE = \"Циркадное освещение. \"",
    "type": "LOGIC"
  }
}