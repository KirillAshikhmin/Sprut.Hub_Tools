{
  "scenarioTemplate": {
    "name": "Циркадное освещение",
    "desc": "Устанавливает температуру и яркость лампы в зависимости от времени суток. Значения берутся из глобального сценария. Изменить значения внутри режимов и добавить свои можно там же. Обновления по ссылке https://github.com/KirillAshikhmin/Sprut.Hub_Tools/tree/main/CircadianLight",
    "active": true,
    "onStart": false,
    "sync": true,
    "data": "info = {\r\n  name: \"Циркадное освещение\",\r\n  description: \"Устанавливает температуру и яркость лампы в зависимости от времени суток. Значения берутся из глобального сценария. Изменить значения внутри режимов и добавить свои можно там же. Обновления по ссылке https://github.com/KirillAshikhmin/Sprut.Hub_Tools/tree/main/CircadianLight\",\r\n  version: \"2.2\",\r\n  author: \"@BOOMikru\",\r\n\r\n  sourceServices: [HS.Lightbulb],\r\n  sourceCharacteristics: [HC.On, HC.Brightness, HC.ColorTemperature, HC.Hue, HC.Saturation],\r\n\r\n  options: {\r\n    DontChangeParam: {\r\n      name: {\r\n        en: \"Dont change parameter automatically\",\r\n        ru: \"Не менять определённый параметр автоматически после его ручного изменения. Сбрасывается при выключении лампы\"\r\n      },\r\n      type: \"Boolean\",\r\n      value: \"true\"\r\n    },\r\n    StopCircadionAfterChangeParam: {\r\n      name: {\r\n        en: \"Stop circadion after change param\",\r\n        ru: \"Останавливать циркадный режим после изменения любого из параметров. Работает только совместно с выключенной настройкой выше\"\r\n      },\r\n      type: \"Boolean\",\r\n      value: \"false\"\r\n    },\r\n    Preset: {\r\n      name: {\r\n        en: \"Preset\",\r\n        ru: \"Режим работы (0 - Дольше яркий, 1 - Раннее затемнение, 2 - Всегда полная яркость)\"\r\n      },\r\n      type: \"Integer\",\r\n      value: \"0\"\r\n    }\r\n  },\r\n\r\n  variables: {\r\n    // Задача на обновление\r\n    cronTask: undefined,\r\n    // Яркость изменена вручную\r\n    brightChanged: false,\r\n    // Температура изменена вручную\r\n    tempChanged: false,\r\n    // Оттенок изменен вручную\r\n    hueChanged: false,\r\n    // Насыщенность изменена вручную\r\n    satChanged: false\r\n  }\r\n}\r\n\r\nconst CIRCADIAN_LIGHT_DEBUG_INFO = false;\r\n\r\nfunction trigger(source, value, variables, options) {\r\n\r\n  const isBright = source.getType() == HC.Brightness\r\n  const isTemp = source.getType() == HC.ColorTemperature\r\n  const isHue = source.getType() == HC.Hue\r\n  const isSaturation = source.getType() == HC.Saturation\r\n\r\n  // событие вызывается и при автоматической смене яркости\r\n  if (isBright || isTemp || isHue || isSaturation) {\r\n\r\n    // Если включено \"Не менять яркость\", и ещё не меняли\r\n    if (options.DontChangeParam) {\r\n\r\n      if (isBright && !variables.brightChanged) {\r\n        let circadianBright = global.getCircadianLight(options.Preset)[1]\r\n        let changed = difference(circadianBright, value) > 1\r\n        variables.brightChanged = changed\r\n      }\r\n\r\n      if (isTemp && !variables.tempChanged) {\r\n        let circadianTemp = global.getCircadianLight(options.Preset)[0]\r\n        let changed = difference(circadianTemp, value) > 1\r\n        variables.tempChanged = changed\r\n      }\r\n\r\n      if (isHue && !variables.hueChanged) {\r\n        let circadianTemp = global.getCircadianLight(options.Preset)[0]\r\n        let hueAndSat = global.getHueAndSaturationFromMired(circadianTemp)\r\n        let changed = difference(hueAndSat[0], value) > 1\r\n        variables.hueChanged = changed\r\n        if (changed)\r\n          variables.tempChanged = true\r\n      }\r\n\r\n      if (isSaturation && !variables.satChanged) {\r\n        let circadianTemp = global.getCircadianLight(options.Preset)[0]\r\n        let hueAndSat = global.getHueAndSaturationFromMired(circadianTemp)\r\n        let changed = difference(hueAndSat[1], value) > 1\r\n        variables.satChanged = changed\r\n        if (changed)\r\n          variables.tempChanged = true\r\n      }\r\n    }\r\n\r\n    if (CIRCADIAN_LIGHT_DEBUG_INFO) {\r\n      if (isBright && variables.brightChanged) console.info(\"Циркадное освещение. Яркость изменена вручную. Больше меняться автоматически не будет для {}\", source.getAccessory())\r\n      if (isTemp && variables.tempChanged) console.info(\"Циркадное освещение. Температура изменена вручную. Больше меняться автоматически не будет для {}\", source.getAccessory())\r\n      if (isHue && variables.hueChanged) console.info(\"Циркадное освещение. Оттенок изменен вручную. Больше меняться автоматически не будет для {}\", source.getAccessory())\r\n      if (isSaturation && variables.satChanged) console.info(\"Циркадное освещение. Насыщенность изменена вручную. Больше меняться автоматически не будет для {}\", source.getAccessory())\r\n    }\r\n\r\n    if (variables.cronTask && variables.brightChanged && (variables.tempChanged || (variables.hueChanged && variables.satChanged))) {\r\n      if (CIRCADIAN_LIGHT_DEBUG_INFO) {\r\n        console.info(\"Циркадное освещение. Все параметры, которые могли меняться в циркадном режиме изменены и больше не будут меняться. Останавливаем циркакадный режим для {}\", source.getAccessory())\r\n      }\r\n      stop(variables, source.getAccessory())\r\n      return\r\n    }\r\n\r\n    if (options.StopCircadionAfterChangeParam && variables.cronTask && (variables.brightChanged || variables.tempChanged || variables.hueChanged || variables.satChanged)) {\r\n      if (CIRCADIAN_LIGHT_DEBUG_INFO) {\r\n        console.info(\"Циркадное освещение. Включено свойство 'Останавливать циркадный режим после изменения любого параметра'. Параметр был изменён, циркадный режим остановлен для {}\", source.getAccessory())\r\n      }\r\n      stop(variables)\r\n      return\r\n    }\r\n  } else {\r\n    // Включили или выключили\r\n    if (value) {\r\n\r\n      const brightness = source.getService().getCharacteristic(HC.Brightness);\r\n      if (brightness == null) {\r\n        console.error(\"Циркадное освещение. Лампочка {}, не умеет изменять яркость\", source.getAccessory())\r\n        return;\r\n      }\r\n\r\n      // Устанавливаем начальные значения циркадного режима с задержкой, что бы успела отработать логика связи уровня и включения\r\n      setTimeout(function () {\r\n        var dontChangeBright = variables.brightChanged == true;\r\n        var dontChangeTemp = variables.tempChanged == true;\r\n        var dontChangeHue = variables.hueChanged == true;\r\n        var dontChangeSaturate = variables.satChanged == true;\r\n\r\n        global.setCircadianLightForService(source.getService(), options.Preset, dontChangeBright, dontChangeTemp, dontChangeHue, dontChangeSaturate);\r\n      }, 100)\r\n\r\n\r\n      // Отменяем задачу на обновление\r\n      if (variables.cronTask && variables.cronTask != undefined) {\r\n        variables.cronTask.clear()\r\n      }\r\n\r\n      // Запускаем новую задачу на обновление\r\n      let task = Cron.schedule(\"0 */5 * * * *\", function () {\r\n        var dontChangeBright = variables.brightChanged == true;\r\n        var dontChangeTemp = variables.tempChanged == true;\r\n        var dontChangeHue = variables.hueChanged == true;\r\n        var dontChangeSaturate = variables.satChanged == true;\r\n        global.setCircadianLightForService(source.getService(), options.Preset, dontChangeBright, dontChangeTemp, dontChangeHue, dontChangeSaturate);\r\n      });\r\n      variables.cronTask = task;\r\n      if (CIRCADIAN_LIGHT_DEBUG_INFO) {\r\n        console.info(\"Циркадное освещение. ==== ЗАПУСК ==== Устройство включено. Циркадный режим запущен для {}\", source.getAccessory())\r\n      }\r\n    } else {\r\n      if (CIRCADIAN_LIGHT_DEBUG_INFO) {\r\n        console.info(\"Циркадное освещение. Устройство выключно {}\", source.getAccessory())\r\n      }\r\n      stop(variables, source.getAccessory())\r\n\r\n      // Сбрасываем состояние при выключении\r\n      variables.brightChanged = false\r\n      variables.tempChanged = false\r\n      variables.hueChanged = false\r\n      variables.satChanged = false\r\n    }\r\n  }\r\n}\r\n\r\nfunction setCircadianValue(service, preset, variables) {\r\n  var dontChangeBright = variables.brightChanged == true;\r\n  var dontChangeTemp = variables.tempChanged == true;\r\n  var dontChangeHue = variables.hueChanged == true;\r\n  var dontChangeSaturate = variables.satChanged == true;\r\n  global.setCircadianLightForService(service, preset, dontChangeBright, dontChangeTemp, dontChangeHue, dontChangeSaturate);\r\n}\r\n\r\nfunction stop(variables, accessory) {\r\n  // Выключили лампу. Отменяем задачу на циркаду и сбрасываем параметры\r\n  if (variables.cronTask) {\r\n    variables.cronTask.clear()\r\n    variables.cronTask = undefined;\r\n  }\r\n  console.info(\"Циркадное освещение. ==== ОСТАНОВКА ==== Циркадный режим остановлен для {}\", accessory)\r\n}\r\n\r\nfunction difference(a, b) {\r\n  return Math.abs(a - b);\r\n}",
    "type": "LOGIC"
  }
}