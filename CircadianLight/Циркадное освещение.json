{
  "scenarioTemplate": {
    "name": "Циркадное освещение",
    "desc": "Устанавливает температуру и яркость лампы в зависимости от времени суток. Значения берутся из глобального сценария. Изменить значения внутри режимов и добавить свои можно там же. Обновления по ссылке https://github.com/KirillAshikhmin/Sprut.Hub_Tools/tree/main/CircadianLight и в канале https://t.me/smart_sputnik",
    "active": true,
    "onStart": true,
    "sync": false,
    "data": "info = {\n  name: \"Циркадное освещение\",\n  description: \"Устанавливает температуру и яркость лампы в зависимости от времени суток. Значения берутся из глобального сценария. Изменить значения внутри режимов и добавить свои можно там же. Обновления по ссылке https://github.com/KirillAshikhmin/Sprut.Hub_Tools/tree/main/CircadianLight и в канале https://t.me/smart_sputnik\",\n  version: \"3.0\",\n  author: \"@BOOMikru\",\n\n  sourceServices: [HS.Lightbulb],\n  sourceCharacteristics: [HC.On, HC.Brightness, HC.ColorTemperature, HC.Hue, HC.Saturation],\n\n  options: {\n    DontChangeParam: {\n      name: {\n        en: \"Dont change parameter automatically\",\n        ru: \"Не менять определённый параметр автоматически после его ручного изменения. Сбрасывается при выключении лампы\"\n      },\n      type: \"Boolean\",\n      value: true\n    },\n    StopCircadionAfterChangeParam: {\n      name: {\n        en: \"Stop circadion after change param\",\n        ru: \"Останавливать циркадный режим после изменения любого из параметров. Работает только совместно с выключенной настройкой выше\"\n      },\n      type: \"Boolean\",\n      value: false\n    },\n    Preset: {\n      name: {\n        en: \"Preset\",\n        ru: \"Режим работы (0 - Дольше яркий, 1 - Раннее затемнение, 2 - Всегда полная яркость)\"\n      },\n      type: \"Integer\",\n      value: 0\n    },\n    WhatChange: {\n      name: {\n        en: \"What сhange\",\n        ru: \"Что изменять? (0 - Яркость и температуру, 1 - только яркость, 2 - только температуру)\"\n      },\n      type: \"Integer\",\n      value: 0,\n      //   values: [\n      //     {\n      //       \"value\": \"0\",\n      //       \"name\": \"Яркость и цветовую температуру\"\n      //     },\n      //     {\n      //       \"value\": \"1\",\n      //       \"name\": \"Только яркость\"\n      //     },\n      //     {\n      //       \"value\": \"2\",\n      //       \"name\": \"Только цветовую температуру\"\n      //     }\n      //   ]\n    },\n    SmoothOn: {\n      name: {\n        en: \"Smooth on\",\n        ru: \"Плавное изменение яркости при включении (Экспериментально)\"\n      },\n      type: \"Boolean\",\n      value: false\n    }\n  },\n\n  variables: {\n    // Параметры запуска\n    startParameter: {\n      brightWhenOff: -1,\n      tempWhenOff: -1,\n      isTurnOnByBright: false,\n      isTurnOnByTemp: false,\n      turnOnByParamaterDate: null,\n    },\n    // Отслеживание параметров в функции compute\n    compute: {\n      enable: true,\n    },\n    // Параметры плавного включения\n    smoothOn: {\n      target: 1,\n      active: false,\n      task: undefined,\n    },\n    // Задача на обновление значения циркады\n    cronTask: undefined,\n    // Задача на восстановление циркады\n    reset: {\n      name: undefined,\n      task: undefined,\n    },\n    // Изменение параметров\n    changed: {\n      // Яркость изменена вручную\n      bright: false,\n      // Температура изменена вручную\n      temp: false,\n      // Оттенок изменен вручную\n      hue: false,\n      // Насыщенность изменена вручную\n      sat: false,\n    }\n  }\n}\n\nconst CIRCADIAN_LIGHT_DEBUG_INFO = false;\n\n\nfunction compute(source, value, variables, options) {\n  const service = source.getService()\n  const disableName = global.getCircadianLightGlobalVariableForDisable(service)\n  if (GlobalVariables[disableName] == true) return value;\n\n  if (!variables.compute.enable) return value\n  var on = source.getService().getCharacteristic(HC.On).getValue()\n\n  const isOn = source.getType() == HC.On\n  const isBright = source.getType() == HC.Brightness\n  const isTemp = source.getType() == HC.ColorTemperature\n  const isHue = source.getType() == HC.Hue\n  const isSaturation = source.getType() == HC.Saturation\n\n  if (!on) {\n    if (isBright) {\n      variables.startParameter.turnOnByParamaterDate = Date.now()\n      variables.startParameter.brightWhenOff = value\n    }\n    if (isTemp || isHue || isSaturation) {\n      variables.startParameter.turnOnByParamaterDate = Date.now()\n      variables.startParameter.tempWhenOff = true\n    }\n  }\n\n  if (isOn && value) {\n    if (Date.now() - variables.startParameter.turnOnByParamaterDate <= 100) {\n      if (variables.startParameter.brightWhenOff > 0) {\n        variables.startParameter.isTurnOnByBright = true\n      }\n      if (variables.startParameter.tempWhenOff > 0) {\n        variables.startParameter.isTurnOnByTemp = true\n      }\n    }\n  }\n  return value\n}\n\n\nfunction trigger(source, value, variables, options) {\n  const service = source.getService()\n  const disableName = global.getCircadianLightGlobalVariableForDisable(service)\n  if (GlobalVariables[disableName] == true) return;\n\n  const isOn = source.getType() == HC.On\n  const isBright = source.getType() == HC.Brightness\n  const isTemp = source.getType() == HC.ColorTemperature\n  const isHue = source.getType() == HC.Hue\n  const isSaturation = source.getType() == HC.Saturation\n\n  if (isOn && value) {\n    variables.reset.name = global.getCircadianLightGlobalVariableForReset(source.getService())\n    GlobalVariables[variables.reset.name] = false\n    variables.reset.task = setInterval(function () {\n      let name = variables.reset.name\n      if (name == undefined) {\n        if (variables.reset.task != undefined) {\n          variables.reset.task.clear()\n          variables.reset.task = undefined\n        }\n        if (variables.smoothOn.task != undefined) {\n          variables.smoothOn.task.clear()\n          variables.smoothOn.task = undefined\n        }\n      }\n      if (GlobalVariables[name] == true) {\n        GlobalVariables[name] = false\n        reset(variables)\n        restartCron(source, variables, options)\n\n        var enableBrightByWhatChange = options.WhatChange == 0 || options.WhatChange == 1\n        var enableTempByWhatChange = options.WhatChange == 0 || options.WhatChange == 2\n        const circadianValue = global.getCircadianLight(options.Preset)\n\n        if (enableBrightByWhatChange)\n          service.getCharacteristic(HC.Brightness).setValue(circadianValue[1])\n        if (enableTempByWhatChange)\n          service.getCharacteristic(HC.ColorTemperature).setValue(circadianValue[0])\n      }\n    }, 500)\n  }\n\n  // событие вызывается и при автоматической смене яркости\n  if (isBright || isTemp || isHue || isSaturation) {\n\n    // Если включено \"Не менять яркость\", и ещё не меняли\n    if (options.DontChangeParam) {\n\n      if (variables.startParameter.isTurnOnByBright) variables.changed.bright = true\n      if (variables.startParameter.isTurnOnByTemp) variables.changed.temp = true\n\n      if (isBright && !variables.changed.bright && !variables.smoothOn.active) {\n        let circadianBright = global.getCircadianLight(options.Preset)[1]\n        let changed = difference(circadianBright, value) > 1\n        variables.changed.bright = changed\n      }\n\n      if (isTemp && !variables.changed.temp) {\n        let circadianTemp = global.getCircadianLight(options.Preset)[0]\n        let changed = difference(circadianTemp, value) > 1\n        variables.changed.temp = changed\n      }\n\n      if (isHue && !variables.changed.hue) {\n        let circadianTemp = global.getCircadianLight(options.Preset)[0]\n        let hueAndSat = global.getHueAndSaturationFromMired(circadianTemp)\n        let changed = difference(hueAndSat[0], value) > 1\n        variables.changed.hue = changed\n        if (changed) {\n          variables.changed.temp = true\n        }\n      }\n\n      if (isSaturation && !variables.changed.sat) {\n        let circadianTemp = global.getCircadianLight(options.Preset)[0]\n        let hueAndSat = global.getHueAndSaturationFromMired(circadianTemp)\n        let changed = difference(hueAndSat[1], value) > 1\n        variables.changed.sat = changed\n        if (changed) {\n          variables.changed.temp = true\n        }\n      }\n    }\n\n    if (CIRCADIAN_LIGHT_DEBUG_INFO) {\n      if (isBright && variables.changed.bright) console.info(\"Циркадное освещение. Яркость изменена вручную. Больше меняться автоматически не будет для {}\", getName(source))\n      if (isTemp && variables.changed.temp) console.info(\"Циркадное освещение. Температура изменена вручную. Больше меняться автоматически не будет для {}\", getName(source))\n      if (isHue && variables.changed.hue) console.info(\"Циркадное освещение. Оттенок изменен вручную. Больше меняться автоматически не будет для {}\", getName(source))\n      if (isSaturation && variables.changed.sat) console.info(\"Циркадное освещение. Насыщенность изменена вручную. Больше меняться автоматически не будет для {}\", getName(source))\n    }\n\n    if (variables.cronTask && variables.changed.bright && (variables.changed.temp || (variables.changed.hue && variables.changed.sat))) {\n      if (CIRCADIAN_LIGHT_DEBUG_INFO) {\n        console.info(\"Циркадное освещение. Все параметры, которые могли меняться в циркадном режиме изменены и больше не будут меняться. Останавливаем циркакадный режим для {}\", getName(source))\n      }\n      stop(variables, source)\n      return\n    }\n\n    if (options.StopCircadionAfterChangeParam && variables.cronTask && (variables.changed.bright || variables.changed.temp || variables.changed.hue || variables.changed.sat)) {\n      if (CIRCADIAN_LIGHT_DEBUG_INFO) {\n        console.info(\"Циркадное освещение. Включено свойство 'Останавливать циркадный режим после изменения любого параметра'. Параметр был изменён, циркадный режим остановлен для {}\", getName(source))\n      }\n      stop(variables, source)\n      return\n    }\n  } else {\n    variables.compute.enable = !value\n    if (value) {\n\n      const brightness = source.getService().getCharacteristic(HC.Brightness);\n      if (brightness == null) {\n        console.error(\"Циркадное освещение. Лампочка {}, не умеет изменять яркость\", getName(source))\n        return;\n      }\n\n      var enableBrightByWhatChange = options.WhatChange == 0 || options.WhatChange == 1\n      var enableTempByWhatChange = options.WhatChange == 0 || options.WhatChange == 2\n\n      const circadianValue = global.getCircadianLight(options.Preset)\n\n      if (enableTempByWhatChange && !variables.startParameter.isTurnOnByTemp) {\n        service.getCharacteristic(HC.ColorTemperature).setValue(circadianValue[0])\n      }\n\n      let brightWhenOff = variables.startParameter.brightWhenOff\n      let target = brightWhenOff > 1 ? brightWhenOff : circadianValue[1]\n      let br = service.getCharacteristic(HC.Brightness)\n      if (!variables.changed.bright && !variables.startParameter.isTurnOnByBright && enableBrightByWhatChange && options.SmoothOn && target > 1) {\n        variables.smoothOn.active = true\n        let currentBr = 1\n        br.setValue(currentBr)\n        let increaseBy = (target / 15) | 0\n        setTimeout(function () {\n          if (service.getCharacteristic(HC.On).getValue()) {\n            let interval = setInterval(function () {\n              if (currentBr >= target) {\n                interval.clear()\n                interval = undefined\n                variables.smoothOn.active = false\n              }\n              currentBr = Math.min(currentBr + increaseBy, target)\n              br.setValue(currentBr)\n            }, 150)\n            variables.smoothOn.task = interval\n          }\n        }, 300);\n      } else {\n        br.setValue(target)\n      }\n\n      restartCron(source, variables, options)\n\n    } else {\n      reset(variables)\n      stop(variables, source)\n    }\n  }\n}\n\nfunction setCircadianValue(service, preset, variables) {\n  var dontChangeBright = variables.changed.bright == true;\n  var dontChangeTemp = variables.changed.temp == true;\n  var dontChangeHue = variables.changed.hue == true;\n  var dontChangeSaturate = variables.changed.sat == true;\n  global.setCircadianLightForService(service, preset, dontChangeBright, dontChangeTemp, dontChangeHue, dontChangeSaturate);\n}\n\nfunction restartCron(source, variables, options) {\n  // Отменяем задачу на обновление\n  if (variables.cronTask && variables.cronTask != undefined) {\n    variables.cronTask.clear()\n  }\n\n  // Что изменять? (0 - Яркость и температуру, 1 - только яркость, 2 - только температуру)\n  var enableBrightByWhatChange = options.WhatChange == 0 || options.WhatChange == 1\n  var enableTempByWhatChange = options.WhatChange == 0 || options.WhatChange == 2\n\n  // Запускаем новую задачу на обновление\n  let task = Cron.schedule(\"0 */5 * * * *\", function () {\n    var dontChangeBright = variables.changed.bright == true || !enableBrightByWhatChange || variables.smoothOn.active\n    var dontChangeTemp = variables.changed.temp == true || !enableTempByWhatChange\n    var dontChangeHue = variables.changed.hue == true || !enableTempByWhatChange\n    var dontChangeSaturate = variables.changed.sat == true || !enableTempByWhatChange\n    global.setCircadianLightForService(source.getService(), options.Preset, dontChangeBright, dontChangeTemp, dontChangeHue, dontChangeSaturate);\n  });\n  variables.cronTask = task;\n  if (CIRCADIAN_LIGHT_DEBUG_INFO) {\n    console.info(\"Циркадное освещение. ==== ЗАПУСК ==== Циркадный режим запущен для {}\", getName(source))\n  }\n}\n\nfunction stop(variables, source) {\n  variables.useCompute = true\n  // Выключили лампу. Отменяем задачу на циркаду и сбрасываем параметры\n  if (variables.cronTask) {\n    variables.cronTask.clear()\n    variables.cronTask = undefined;\n  }\n  if (CIRCADIAN_LIGHT_DEBUG_INFO)\n    console.info(\"Циркадное освещение. ==== ОСТАНОВКА ==== Циркадный режим остановлен для {}\", getName(source))\n}\n\n// Сбрасываем состояние при выключении\nfunction reset(variables) {\n\n  if (variables.reset.task != undefined) {\n    variables.reset.task.clear()\n    variables.reset.task = undefined\n  }\n  if (variables.smoothOn.task != undefined) {\n    variables.smoothOn.task.clear()\n    variables.smoothOn.task = undefined\n  }\n  variables.startParameter.brightWhenOff = -1\n  variables.startParameter.tempWhenOff = -1\n  variables.startParameter.isTurnOnByBright = false\n  variables.startParameter.isTurnOnByTemp = false\n  variables.startParameter.turnOnByParamaterDate = null\n  variables.smoothOn.active = false\n  variables.changed.bright = false\n  variables.changed.temp = false\n  variables.changed.hue = false\n  variables.changed.sat = false\n}\n\nfunction difference(a, b) {\n  return Math.abs(a - b);\n}\n\nfunction getName(source) {\n  return global.getCircadianLightServiceName(source.getService())\n}\n\n",
    "type": "LOGIC"
  }
}