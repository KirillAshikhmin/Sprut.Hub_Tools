let servicesList = getServicesByServiceAndCharacteristicType([HS.Lightbulb], [HC.Brightness, HC.ColorTemperature, HC.Hue, HC.Saturation]);

info = {
    name: "üí° –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä –ª–∞–º–ø",
    description: "–°–ª—É–∂–∏—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ª–∞–º–ø/–¥–∏–º–º–µ—Ä–æ–≤ (—è—Ä–∫–æ—Å—Ç—å, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –æ—Ç—Ç–µ–Ω–æ–∫, –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å, –≤–∫–ª—é—á–µ–Ω–∏–µ) –≤ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –ª–∞–º–ø—ã",
    version: "1.0",
    author: "@BOOMikru",
    onStart: true,

    sourceServices: [HS.Lightbulb],
    sourceCharacteristics: [HC.Brightness, HC.ColorTemperature, HC.Hue, HC.Saturation, HC.On],

    options: {
        lamp: {
            name: {
                en: "Lamp",
                ru: "–í—ã–±–µ—Ä–∏—Ç–µ –ª–∞–º–ø—É/–¥–∏–º–º–µ—Ä"
            },
            type: "String",
            value: "",
            formType: "list",
            values: servicesList
        },
        feedback: {
            name: { en: "Feedback", ru: "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å" },
            desc: {
                en: "When enabled, mirrors changes from the selected lamp back to this lamp (On, Brightness, ColorTemperature, Hue, Saturation) using inverse mapping within configured ranges.",
                ru: "–ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç—Ä–∞–∂–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–∞–º–ø—ã –Ω–∞ —Ç–µ–∫—É—â—É—é (–í–∫–ª, –Ø—Ä–∫–æ—Å—Ç—å, –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –û—Ç—Ç–µ–Ω–æ–∫, –ù–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å), –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—è –∑–Ω–∞—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Ñ–æ—Ä–º—É–ª–æ–π —Å —É—á—ë—Ç–æ–º –∑–∞–¥–∞–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤."
            },
            type: "Boolean",
            value: false
        },
        minBright: {
            name: { en: "Brightness Min", ru: "–Ø—Ä–∫–æ—Å—Ç—å –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è" },
            type: "Integer",
            value: 0,
            minValue: 0,
            maxValue: 100,
        },
        maxBright: {
            name: { en: "Brightness Max", ru: "–Ø—Ä–∫–æ—Å—Ç—å –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è" },
            type: "Integer",
            value: 100,
            minValue: 0,
            maxValue: 100,
        },
        minTemp: {
            name: { en: "Temperature Min", ru: "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è" },
            type: "Integer",
            value: 50,
            minValue: 50,
            maxValue: 400,
        },
        maxTemp: {
            name: { en: "Temperature Max", ru: "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è" },
            type: "Integer",
            value: 400,
            minValue: 50,
            maxValue: 400,
        },
        minHue: {
            name: { en: "Hue Min", ru: "–û—Ç—Ç–µ–Ω–æ–∫ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π" },
            type: "Integer",
            value: 0,
            minValue: 0,
            maxValue: 360,
        },
        maxHue: {
            name: { en: "Hue Max", ru: "–û—Ç—Ç–µ–Ω–æ–∫ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π" },
            type: "Integer",
            value: 360,
            minValue: 0,
            maxValue: 360,
        },
        minSaturation: {
            name: { en: "Saturation Min", ru: "–ù–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è" },
            type: "Integer",
            value: 0,
            minValue: 0,
            maxValue: 100,
        },
        maxSaturation: {
            name: { en: "Saturation Max", ru: "–ù–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è" },
            type: "Integer",
            value: 100,
            minValue: 0,
            maxValue: 100,
        }
    },
    variables: {
        subscribed: false,
        subscribe: undefined,
        lastSetTime: undefined,
        subscribedUUID: undefined
    }
};

const debug = false

function trigger(source, value, variables, options, context) {
    try {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        let hasError = false;
        if (options.minBright < 0 || options.minBright > 100) { console.error("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —è—Ä–∫–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-100"); hasError = true; }
        if (options.maxBright < 0 || options.maxBright > 100) { console.error("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —è—Ä–∫–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-100"); hasError = true; }
        if (options.minBright >= options.maxBright) { console.error("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —è—Ä–∫–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π"); hasError = true; }
        if (options.minTemp < 50 || options.minTemp > 400) { console.error("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 50-400"); hasError = true; }
        if (options.maxTemp < 50 || options.maxTemp > 400) { console.error("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 50-400"); hasError = true; }
        if (options.minTemp >= options.maxTemp) { console.error("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π"); hasError = true; }
        if (options.minHue < 0 || options.minHue > 360) { console.error("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç—Ç–µ–Ω–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-360"); hasError = true; }
        if (options.maxHue < 0 || options.maxHue > 360) { console.error("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ—Ç—Ç–µ–Ω–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-360"); hasError = true; }
        if (options.minHue >= options.maxHue) { console.error("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç—Ç–µ–Ω–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ"); hasError = true; }
        if (options.minSaturation < 0 || options.minSaturation > 100) { console.error("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-100"); hasError = true; }
        if (options.maxSaturation < 0 || options.maxSaturation > 100) { console.error("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-100"); hasError = true; }
        if (options.minSaturation >= options.maxSaturation) { console.error("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π"); hasError = true; }
        if (options.lamp == "") { console.error("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –∞–∫—Å–µ—Å—Å—É–∞—Ä –ª–∞–º–ø—ã/–¥–∏–º–º–µ—Ä–∞"); hasError = true; }

        // –ï—Å–ª–∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –≤—ã–∫–ª—é—á–µ–Ω–∞ –∏–ª–∏ –ª–∞–º–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, —Å–Ω–∏–º–µ–º –ø–æ–¥–ø–∏—Å–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞
        if (!options.feedback || options.lamp == "") {
            if (variables.subscribe) { try { variables.subscribe.clear(); } catch (e) {} }
            variables.subscribe = undefined
            variables.subscribed = false
            variables.subscribedUUID = undefined
        }

        if (hasError) return;
        
        const cdata = options.lamp.split('.');
        const aid = cdata[0];
        const sid = cdata[1];
        service = Hub.getAccessory(aid).getService(sid)

        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–∞–º–ø—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        if (options.feedback) {
            // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –¥—Ä—É–≥—É—é –ª–∞–º–ø—É ‚Äî —Å–Ω–∏–º–µ–º –µ—ë
            if (variables.subscribe && variables.subscribedUUID && variables.subscribedUUID != options.lamp) {
                try { variables.subscribe.clear(); } catch (e) {}
                variables.subscribe = undefined
                variables.subscribed = false
                variables.subscribedUUID = undefined
            }

            if (!variables.subscribe || variables.subscribed != true) {
                let subscribe = Hub.subscribeWithCondition("", "", [HS.Lightbulb], [HC.On, HC.Brightness, HC.ColorTemperature, HC.Hue, HC.Saturation], function (sensorSource, sensorValue) {
                    try {
                        let sensorService = sensorSource.getService()
                        if (!sensorService || sensorService.getUUID() != options.lamp) return;

                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –≤—ã–∑–≤–∞–Ω–æ –Ω–µ–¥–∞–≤–Ω–µ–π —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –∑–Ω–∞—á–µ–Ω–∏—è —ç—Ç–∏–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–º
                        if (variables.lastSetTime && (Date.now() - variables.lastSetTime) < 100) return;

                        let targetService = source.getService()
                        let chrType = sensorSource.getType()
                        let mappedValue = undefined

                        if (chrType == HC.On) {
                            let chr = targetService.getCharacteristic(HC.On)
                            if (chr) {
                                let currentBool = chr.getValue() === true
                                let mappedBool = sensorValue === true
                                if (currentBool != mappedBool) {
                                    chr.setValue(mappedBool)
                                }
                            }
                            return;
                        }

                        if (chrType == HC.Brightness) {
                            let minV = options.minBright
                            let maxV = options.maxBright
                            let outRange = Math.max(0, maxV - minV)
                            if (sensorValue <= 0) mappedValue = 0; else {
                                let normalized = outRange > 0 ? (sensorValue - minV) / outRange : 0
                                normalized = Math.max(0, Math.min(1, normalized))
                                mappedValue = Math.round(normalized * 100)
                            }
                            mappedValue = Math.max(0, Math.min(100, mappedValue))
                            let chr = targetService.getCharacteristic(HC.Brightness)
                            if (chr) {
                                let current = chr.getValue()
                                if (current != mappedValue) { chr.setValue(mappedValue) }
                            }
                            return;
                        }

                        if (chrType == HC.ColorTemperature) {
                            let minV = options.minTemp
                            let maxV = options.maxTemp
                            let outRange = Math.max(1, maxV - minV)
                            let normalized = (sensorValue - minV) / outRange
                            normalized = Math.max(0, Math.min(1, normalized))
                            let inputRange = 400 - 50
                            mappedValue = 50 + Math.round(normalized * inputRange)
                            mappedValue = Math.max(50, Math.min(400, mappedValue))
                            let chr = targetService.getCharacteristic(HC.ColorTemperature)
                            if (chr) {
                                let current = chr.getValue()
                                if (current != mappedValue) { chr.setValue(mappedValue) }
                            }
                            return;
                        }

                        if (chrType == HC.Hue) {
                            let minV = options.minHue
                            let maxV = options.maxHue
                            let outRange = Math.max(1, maxV - minV)
                            let normalized = (sensorValue - minV) / outRange
                            normalized = Math.max(0, Math.min(1, normalized))
                            mappedValue = Math.round(normalized * 360)
                            mappedValue = Math.max(0, Math.min(360, mappedValue))
                            let chr = targetService.getCharacteristic(HC.Hue)
                            if (chr) {
                                let current = chr.getValue()
                                if (current != mappedValue) { chr.setValue(mappedValue) }
                            }
                            return;
                        }

                        if (chrType == HC.Saturation) {
                            let minV = options.minSaturation
                            let maxV = options.maxSaturation
                            let outRange = Math.max(1, maxV - minV)
                            let normalized = (sensorValue - minV) / outRange
                            normalized = Math.max(0, Math.min(1, normalized))
                            mappedValue = Math.round(normalized * 100)
                            mappedValue = Math.max(0, Math.min(100, mappedValue))
                            let chr = targetService.getCharacteristic(HC.Saturation)
                            if (chr) {
                                let current = chr.getValue()
                                if (current != mappedValue) { chr.setValue(mappedValue) }
                            }
                            return;
                        }
                    } catch (e2) {
                        console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: " + e2.toString())
                    }
                }, source.getAccessory())
                variables.subscribe = subscribe
                variables.subscribed = true
                variables.subscribedUUID = options.lamp
            }
        }
        
        // –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –≤—ã–∑–≤–∞–Ω–æ —Å–∞–º–∏–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–º (–ª–æ–≥–∏–∫–æ–π), –æ–ø—Ä–µ–¥–µ–ª–∏–º –ø–æ context –∏ –Ω–µ –±—É–¥–µ–º –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
        if (isSelfTrigger(context)) return;

        if (source.getType() == HC.Brightness) {
            let newValue
            if (value > 0) {
                // –õ–æ–≥–∏–∫–∞ –¥–ª—è —è—Ä–∫–æ—Å—Ç–∏: –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º 0-100 –≤ minBright-maxBright
                let range = options.maxBright - options.minBright
                let percent = value / 100.0
                newValue = options.minBright + Math.round(range * percent)
            } else {
                newValue = 0
            }
            if (debug) console.log(`–Ø—Ä–∫–æ—Å—Ç—å: ${value} ‚Üí ${newValue}`)
            variables.lastSetTime = Date.now();
            service.getCharacteristic(HC.Brightness).setValue(newValue)
        } else if (source.getType() == HC.ColorTemperature) {
            let newValue
            if (value > 0) {
                let inputRange = 400 - 50
                let outputRange = options.maxTemp - options.minTemp
                let normalizedValue = (value - 50) / inputRange
                newValue = options.minTemp + Math.round(outputRange * normalizedValue)
            } else {
                newValue = options.minTemp
            }
            if (debug) console.log(`–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${value} ‚Üí ${newValue}`)
            variables.lastSetTime = Date.now();
            service.getCharacteristic(HC.ColorTemperature).setValue(newValue)
        } else if (source.getType() == HC.Hue) {
            let newValue
            if (value > 0) {
                let inputRange = 360 - 0
                let outputRange = options.maxHue - options.minHue
                let normalizedValue = value / inputRange
                newValue = options.minHue + Math.round(outputRange * normalizedValue)
            } else {
                newValue = options.minHue
            }
            if (debug) console.log(`–û—Ç—Ç–µ–Ω–æ–∫: ${value} ‚Üí ${newValue}`)
            variables.lastSetTime = Date.now();
            service.getCharacteristic(HC.Hue).setValue(newValue)
        } else if (source.getType() == HC.Saturation) {
            let newValue
            if (value > 0) {
                let outputRange = options.maxSaturation - options.minSaturation
                let normalizedValue = value / 100.0
                newValue = options.minSaturation + Math.round(outputRange * normalizedValue)
            } else {
                newValue = options.minSaturation
            }
            if (debug) console.log(`–ù–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å: ${value} ‚Üí ${newValue}`)
            variables.lastSetTime = Date.now();
            service.getCharacteristic(HC.Saturation).setValue(newValue)
        } else if (source.getType() == HC.On) {
            // –ü—Ä—è–º–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è
            if (debug) console.log(`–í–∫–ª—é—á–µ–Ω–∏–µ: ${value} ‚Üí ${value}`)
            variables.lastSetTime = Date.now();
            service.getCharacteristic(HC.On).setValue(value)
        }
    } catch (e) {
        log.error("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: " + e.message);
    }
}

function isSelfTrigger(context) {
    try {
        if (!context) return false;
        const text = context.toString();
        // –ü–∞—Ç—Ç–µ—Ä–Ω, –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏—é —Ü–∏—Ä–∫–∞–¥—ã: 'LOGIC <- C <- LOGIC' –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç —Å–∞–º–æ–ø—Ä–∏—á–∏–Ω—É
        const elements = text.split(' <- ');
        if (elements.length >= 3 && elements[0].startsWith('LOGIC') && elements[1].startsWith('C') && elements[2] == elements[0]) {
            return true;
        }
        // –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –æ—Ç –∑–∞–ø—É—Å–∫–∞ —Ö–∞–±–∞
        if (elements.length > 0 && elements[elements.length - 1].startsWith('HUB[OnStart]')) {
            return true;
        }
        return false;
    } catch (e) {
        return false;
    }
}

function getDeviceName(service) {
    const acc = service.getAccessory();
    const room = acc.getRoom().getName()
    const accName = service.getAccessory().getName()
    const sName = service.getName()
    const name = room + " -> " + (accName == sName ? accName : accName + " " + sName) + " (" + service.getUUID() + ")" + (!service.isVisible() ? ". –°–∫—Ä—ã—Ç–∞" : "")
    return name
}

// –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ª–æ–≥–∏–∫–∏
function getServicesByServiceAndCharacteristicType(serviceTypes, characteristicTypes) {
    let sortedServicesList = []
    let unsortedServicesList = []
    Hub.getAccessories().forEach((a) => {
        a.getServices().filter((s) => serviceTypes.indexOf(s.getType()) >= 0).forEach((s) => {
            let characteristic = undefined
            characteristicTypes.forEach(c => {
                if (!characteristic) {
                    let chr = s.getCharacteristic(c);
                    if (chr) characteristic = chr
                }
            })
            if (characteristic) {
                let displayname = getDeviceName(s)
                unsortedServicesList.push({
                    name: { ru: displayname, en: displayname },
                    value: s.getUUID()
                });
            }
        })
    });
    sortedServicesList.push({ name: { ru: "–ù–µ –≤—ã–±—Ä–∞–Ω–æ", en: "Not selected", en: "" }, value: '' })
    unsortedServicesList.sort((a, b) => a.name.ru.localeCompare(b.name.ru)).forEach((s) => sortedServicesList.push(s))
    return sortedServicesList
}