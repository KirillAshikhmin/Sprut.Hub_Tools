{
  "scenarioTemplate": {
    "name": "Адаптер минимальной яркости ламп",
    "desc": "Служит для конвертации минимального уровня яркости физических лампдиммеров в 0-100 вирутальной лампы",
    "active": true,
    "onStart": true,
    "sync": false,
    "data": "let servicesList = [];\n\ninfo = {\n    name: \"Адаптер минимальной яркости ламп\",\n    description: \"Служит для конвертации минимального уровня яркости физических ламп\\диммеров в 0-100 вирутальной лампы\",\n    version: \"1.0\",\n    author: \"@BOOMikru\",\n    onStart: true,\n\n    sourceServices: [HS.Lightbulb],\n    sourceCharacteristics: [HC.Brightness],\n\n    options: {\n        lamp: {\n            name: {\n                en: \"Lamp\",\n                ru: \"Выберите лампу/диммер\"\n            },\n            type: \"String\",\n            value: \"\",\n            formType: \"list\",\n            values: servicesList\n        },\n        minBright: {\n            name: {\n                en: \"Min brightness\",\n                ru: \"Минимальная яркость\"\n            },\n            desc: {\n                en: \"Min brightness\",\n                ru: \"Минимальная яркость\"\n            },\n            type: \"Integer\",\n            value: 0,\n        }\n    }\n};\n\nfunction trigger(source, value, variables, options) {\n    try {\n        if (options.lamp == \"\") {\n            console.error(\"Выберите реальный аксессуар лампы/диммера\")\n            return;\n        }\n        const cdata = options.lamp.split('.');\n        const aid = cdata[0];\n        const sid = cdata[1];\n        service = Hub.getAccessory(aid).getService(sid)\n        if (source.getType() == HC.Brightness) {\n            let newValue\n            if (value > 0) {\n                let range = 100 - options.minBright\n                let percent = range / 100.0\n                newValue = options.minBright + Math.round(value * percent)\n            } else {\n                newValue = 0\n            }\n            service.getCharacteristic(HC.Brightness).setValue(newValue)\n        }\n    } catch (e) {\n        log.error(\"Ошибка выполнения задачи: \" + e.message);\n    }\n}\n\n\nlet servicesListUnsort = [];\n// подготовка списка характеристик для выбора в настройке логики\nHub.getAccessories().forEach(function (a) {\n    a.getServices(HS.Lightbulb).forEach(function (s) {\n        const c = s.getCharacteristic(HC.Brightness);\n        if (!c) return;\n        let displayname = global.getCircadianLightServiceName(s)\n        servicesListUnsort.push({\n            name: { ru: displayname, en: displayname },\n            value: s.getUUID()\n        });\n    })\n});\n\nservicesList.push({ name: { ru: \"Не выбрано\", en: \"Not selected\", en: \"\" }, value: '' });\nservicesListUnsort.sort(function (a, b) { return a.name.ru.localeCompare(b.name.ru); }).forEach(function (s) { servicesList.push(s) })",
    "type": "LOGIC"
  }
}