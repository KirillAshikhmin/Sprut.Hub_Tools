{
  "scenarioTemplate": {
    "name": "üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π",
    "desc": "–í–∫–ª—é—á–∞–µ—Ç –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å –≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–Ω–∏ –º–µ—Å—è—Ü–∞ –∏/–∏–ª–∏ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏. –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ https://t.me/smart_sputnik",
    "active": true,
    "onStart": true,
    "sync": false,
    "data": "info = {\n  name: \"üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π\",\n  description: \"–í–∫–ª—é—á–∞–µ—Ç –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å –≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–Ω–∏ –º–µ—Å—è—Ü–∞ –∏/–∏–ª–∏ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏. –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ https://t.me/smart_sputnik\",\n  version: \"2.0\",\n  author: \"@BOOMikru\",\n  onStart: true,\n  sourceServices: [\n    HS.Switch, HS.Outlet, HS.Fan, HS.FanBasic, HS.Lightbulb,\n    HS.Faucet, HS.C_PetFeeder, HS.Valve, HS.HeaterCooler, HS.AirPurifier,\n    HS.IrrigationSystem, HS.Television, HS.HumidifierDehumidifier, HS.CameraControl\n  ],\n  sourceCharacteristics: [HC.On, HC.Active],\n\n  options: {\n    ScheduleOn: { type: \"Boolean\", value: true, name: { ru: \"–í–∫–ª—é—á–∞—Ç—å –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É\", en: \"Schedule turn on\" }, desc: { ru: \"–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –±—É–¥–µ—Ç –≤–∫–ª—é—á–∞—Ç—å—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\", en: \"If enabled, the device will turn on according to the schedule.\" } },\n    DaysOfMonthOn: { type: \"String\", value: \"1-31\", name: { ru: \"‚ÄÉ‚ÄÉ–î–Ω–∏ –º–µ—Å—è—Ü–∞‚ÄØ(–≤–∫–ª)\", en: \"‚ÄÉ‚ÄÉDays of month (turn on)\" }, desc: { ru: \"–ß–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '1', '15, 30' –∏–ª–∏ '1-5').\\n–í–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –∏ —É–∫–∞–∑–∞–Ω–Ω—ã–º —á–∏—Å–ª–∞–º.\", en: \"Days of the month to turn on (e.g., '1', '15, 30' or '1-5').\\nActivation occurs on selected weekdays and specified days.\" } },\n    MondayOn: { type: \"Boolean\", value: false, name: { ru: \"‚ÄÉ‚ÄÉ–ö–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ (–≤–∫–ª)\", en: \"‚ÄÉ‚ÄÉEvery Monday (turn on)\" }, desc: { ru: \"\", en: \"\" } },\n    TuesdayOn: { type: \"Boolean\", value: false, name: { ru: \"‚ÄÉ‚ÄÉ–ö–∞–∂–¥—ã–π –≤—Ç–æ—Ä–Ω–∏–∫ (–≤–∫–ª)\", en: \"‚ÄÉ‚ÄÉEvery Tuesday (turn on)\" }, desc: { ru: \"\", en: \"\" } },\n    WednesdayOn: { type: \"Boolean\", value: false, name: { ru: \"‚ÄÉ‚ÄÉ–ö–∞–∂–¥—É—é —Å—Ä–µ–¥—É (–≤–∫–ª)\", en: \"‚ÄÉ‚ÄÉEvery Wednesday (turn on)\" }, desc: { ru: \"\", en: \"\" } },\n    ThursdayOn: { type: \"Boolean\", value: false, name: { ru: \"‚ÄÉ‚ÄÉ–ö–∞–∂–¥—ã–π —á–µ—Ç–≤–µ—Ä–≥ (–≤–∫–ª)\", en: \"‚ÄÉ‚ÄÉEvery Thursday (turn on)\" }, desc: { ru: \"\", en: \"\" } },\n    FridayOn: { type: \"Boolean\", value: false, name: { ru: \"‚ÄÉ‚ÄÉ–ö–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É (–≤–∫–ª)\", en: \"‚ÄÉ‚ÄÉEvery Friday (turn on)\" }, desc: { ru: \"\", en: \"\" } },\n    SaturdayOn: { type: \"Boolean\", value: false, name: { ru: \"‚ÄÉ‚ÄÉ–ö–∞–∂–¥—É—é —Å—É–±–±–æ—Ç—É (–≤–∫–ª)\", en: \"‚ÄÉ‚ÄÉEvery Saturday (turn on)\" }, desc: { ru: \"\", en: \"\" } },\n    SundayOn: { type: \"Boolean\", value: false, name: { ru: \"‚ÄÉ‚ÄÉ–ö–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ (–≤–∫–ª)\", en: \"‚ÄÉ‚ÄÉEvery Sunday (turn on)\" }, desc: { ru: \"\", en: \"\" } },\n    ActiveMonthsOn: { type: \"String\", value: \"1-12\", name: { ru: \"‚ÄÉ‚ÄÉ–ê–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Å—è—Ü—ã (–≤–∫–ª)\", en: \"‚ÄÉ‚ÄÉActive months (turn on)\" }, desc: { ru: \"–ú–µ—Å—è—Ü—ã, –∫–æ–≥–¥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '1', '1, 6, 12' –∏–ª–∏ '6-8').\\n–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü.\", en: \"Months when the device should turn on (e.g., '1', '1, 6, 12' or '6-8').\\nBy default every month.\" } },\n    TimeOn: { type: \"String\", value: \"00:00\", name: { ru: \"‚ÄÉ‚ÄÉ–í—Ä–µ–º—è (–ß–ß:–ú–ú) (–≤–∫–ª)\", en: \"‚ÄÉ‚ÄÉTime (HH:MM) (turn on)\" }, desc: { ru: \"–í—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –≤–∫–ª—é—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '08:00, 12:00, 18:00').\\n–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π —á–µ—Ä–µ–∑ '–ê–∫—Ç–∏–≤–Ω–æ' –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.\", en: \"Times when turn on occurs (e.g., '08:00, 12:00, 18:00').\\nMultiple times can be separated by commas. Restart the script via 'Active' toggle after changing.\" } },\n    ScheduleOff: { type: \"Boolean\", value: true, name: { ru: \"–û—Ç–∫–ª—é—á–∞—Ç—å –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É\", en: \"Schedule turn off\" }, desc: { ru: \"–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–∞—Ç—å—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\", en: \"If enabled, the device will turn off according to the schedule.\" } },\n    DaysOfMonthOff: { type: \"String\", value: \"1-31\", name: { ru: \"‚ÄÉ‚ÄÉ–î–Ω–∏ –º–µ—Å—è—Ü–∞ (–æ—Ç–∫–ª)\", en: \"‚ÄÉ‚ÄÉDays of month (turn off)\" }, desc: { ru: \"–ß–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '1', '15, 30' –∏–ª–∏ '1-5').\\n–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –∏ —É–∫–∞–∑–∞–Ω–Ω—ã–º —á–∏—Å–ª–∞–º.\", en: \"Days of the month to turn off (e.g., '1', '15, 30' or '1-5').\\nDeactivation occurs on selected weekdays and specified days.\" } },\n    MondayOff: { type: \"Boolean\", value: false, name: { ru: \"‚ÄÉ‚ÄÉ–ö–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ (–æ—Ç–∫–ª)\", en: \"‚ÄÉ‚ÄÉEvery Monday (turn off)\" }, desc: { ru: \"\", en: \"\" } },\n    TuesdayOff: { type: \"Boolean\", value: false, name: { ru: \"‚ÄÉ‚ÄÉ–ö–∞–∂–¥—ã–π –≤—Ç–æ—Ä–Ω–∏–∫ (–æ—Ç–∫–ª)\", en: \"‚ÄÉ‚ÄÉEvery Tuesday (turn off)\" }, desc: { ru: \"\", en: \"\" } },\n    WednesdayOff: { type: \"Boolean\", value: false, name: { ru: \"‚ÄÉ‚ÄÉ–ö–∞–∂–¥—É—é —Å—Ä–µ–¥—É (–æ—Ç–∫–ª)\", en: \"‚ÄÉ‚ÄÉEvery Wednesday (turn off)\" }, desc: { ru: \"\", en: \"\" } },\n    ThursdayOff: { type: \"Boolean\", value: false, name: { ru: \"‚ÄÉ‚ÄÉ–ö–∞–∂–¥—ã–π —á–µ—Ç–≤–µ—Ä–≥ (–æ—Ç–∫–ª)\", en: \"‚ÄÉ‚ÄÉEvery Thursday (turn off)\" }, desc: { ru: \"\", en: \"\" } },\n    FridayOff: { type: \"Boolean\", value: false, name: { ru: \"‚ÄÉ‚ÄÉ–ö–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É (–æ—Ç–∫–ª)\", en: \"‚ÄÉ‚ÄÉEvery Friday (turn off)\" }, desc: { ru: \"\", en: \"\" } },\n    SaturdayOff: { type: \"Boolean\", value: false, name: { ru: \"‚ÄÉ‚ÄÉ–ö–∞–∂–¥—É—é —Å—É–±–±–æ—Ç—É (–æ—Ç–∫–ª)\", en: \"‚ÄÉ‚ÄÉEvery Saturday (turn off)\" }, desc: { ru: \"\", en: \"\" } },\n    SundayOff: { type: \"Boolean\", value: false, name: { ru: \"‚ÄÉ‚ÄÉ–ö–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ (–æ—Ç–∫–ª)\", en: \"‚ÄÉ‚ÄÉEvery Sunday (turn off)\" }, desc: { ru: \"\", en: \"\" } },\n    ActiveMonthsOff: { type: \"String\", value: \"1-12\", name: { ru: \"‚ÄÉ‚ÄÉ–ê–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Å—è—Ü—ã (–æ—Ç–∫–ª)\", en: \"‚ÄÉ‚ÄÉActive months (turn off)\" }, desc: { ru: \"–ú–µ—Å—è—Ü—ã, –∫–æ–≥–¥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –æ—Ç–∫–ª—é—á–∞—Ç—å—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '1', '1, 6, 12' –∏–ª–∏ '6-8').\\n–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü.\", en: \"Months when the device should turn off (e.g., '1', '1, 6, 12' or '6-8').\\nBy default every month.\" } },\n    TimeOff: { type: \"String\", value: \"00:00\", name: { ru: \"‚ÄÉ‚ÄÉ–í—Ä–µ–º—è (–ß–ß:–ú–ú) (–æ—Ç–∫–ª)\", en: \"‚ÄÉ‚ÄÉTime (HH:MM) (turn off)\" }, desc: { ru: \"–í—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '09:00, 13:00, 19:00').\\n–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π —á–µ—Ä–µ–∑ '–ê–∫—Ç–∏–≤–Ω–æ' –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.\", en: \"Times when turn off occurs (e.g., '09:00, 13:00, 19:00').\\nMultiple times can be separated by commas. Restart the script via 'Active' toggle after changing.\" } },\n    Invert: { type: \"Boolean\", value: false, name: { ru: \"–ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ\", en: \"Invert\" }, desc: { ru: \"–í–º–µ—Å—Ç–æ –≤–∫–ª—é—á–µ–Ω–∏—è –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–∞—Ç—å—Å—è, –∞ –≤–º–µ—Å—Ç–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è - –≤–∫–ª—é—á–∞—Ç—å—Å—è\", en: \"Instead of turning on it will turn off, and instead of turning off it will turn on\" } },\n    TurnOffDelay: { type: \"Integer\", value: 0, name: { ru: \"–í—ã–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–∑ (—Å–µ–∫—É–Ω–¥—ã)\", en: \"Turn off delay (seconds)\" }, desc: { ru: \"–ü–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ 0, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–∫–ª—é—á–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\\n–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ '–û—Ç–∫–ª—é—á–∞—Ç—å –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É'.\", en: \"Delay in seconds before turning off after activation. Set to 0 to disable automatic turn-off.\\nDoes not work if 'Schedule turn off' is enabled.\" } },\n    SendNotifications: { type: \"Boolean\", value: false, name: { ru: \"–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\", en: \"Send notifications\" }, desc: { ru: \"–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –∏ —Å–∏—Å—Ç–µ–º—É –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤–∫–ª—é—á–µ–Ω–∏–∏/–æ—Ç–∫–ª—é—á–µ–Ω–∏–∏.\", en: \"If enabled, sends a Telegram and system notification on each turn on/off.\" } },\n    MaintainState: { type: \"Boolean\", value: false, name: { ru: \"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ\", en: \"Maintain state\" }, desc: { ru: \"–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –±—É–¥–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –Ω—É–∂–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –¥—Ä—É–≥–∏–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–º –∏–ª–∏ –º–æ—Å—Ç–æ–º, –ø–æ–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.\", en: \"If enabled, the device will follow the current state upon manual change until the schedule triggers.\" } }\n  },\n  variables: {\n    cronTasksOn: [], // –ú–∞—Å—Å–∏–≤ –∑–∞–¥–∞—á –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è (–Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤)\n    cronTasksOff: [], // –ú–∞—Å—Å–∏–≤ –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è (–Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤)\n    prevTimeOn: undefined, // –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–∫–ª—é—á–µ–Ω–∏—è\n    prevTimeOff: undefined // –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è\n  }\n}\n\nfunction trigger(source, value, variables, options, context) {\n  let needRestoreTargetState = false\n  // –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ —Ä—É—á–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏\n  if (options.MaintainState && !isAutomaticChange(context)) {\n    needRestoreTargetState = true\n    sendNotification(source, options.SendNotifications, \"–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Ä—É—á–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è\");\n  }\n\n  // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∏–∑ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–∫–ª—é—á–µ–Ω–∏—è –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è\n  let currentTimeOn = `${options.TimeOn}|${options.DaysOfMonthOn}|${options.ActiveMonthsOn}|${options.SundayOn}|${options.MondayOn}|${options.TuesdayOn}|${options.WednesdayOn}|${options.ThursdayOn}|${options.FridayOn}|${options.SaturdayOn}`;\n  let currentTimeOff = `${options.TimeOff}|${options.DaysOfMonthOff}|${options.ActiveMonthsOff}|${options.SundayOff}|${options.MondayOff}|${options.TuesdayOff}|${options.WednesdayOff}|${options.ThursdayOff}|${options.FridayOff}|${options.SaturdayOff}`;\n\n  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n  let hasChanges = needRestoreTargetState || (variables.prevTimeOn !== currentTimeOn || variables.prevTimeOff !== currentTimeOff);\n  if (hasChanges) {\n    // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏\n    variables.cronTasksOn.forEach(task => task.clear());\n    variables.cronTasksOn = [];\n    variables.cronTasksOff.forEach(task => task.clear());\n    variables.cronTasksOff = [];\n    variables.prevTimeOn = currentTimeOn;\n    variables.prevTimeOff = currentTimeOff;\n  }\n\n  // –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è\n  if (options.ScheduleOn && variables.cronTasksOn.length === 0) {\n    let timesOn = options.TimeOn.split(',').map(t => t.trim());\n    let daysOfMonthOn = parseRange(options.DaysOfMonthOn);\n    let activeMonthsOn = parseRange(options.ActiveMonthsOn);\n    let daysOfWeekOn = [\n      options.SundayOn, options.MondayOn, options.TuesdayOn, options.WednesdayOn,\n      options.ThursdayOn, options.FridayOn, options.SaturdayOn\n    ];\n\n    timesOn.forEach(time => {\n      let timeOnObj = parseTime(time);\n      let hoursOnStr = timeOnObj.hoursStr;\n      let minutesOnStr = timeOnObj.minutesStr;\n\n      let task = Cron.schedule(`0 ${minutesOnStr} ${hoursOnStr} * * *`, function () {\n        let now = new Date();\n        let month = now.getMonth() + 1;\n        let dayOfMonth = now.getDate();\n        let dayOfWeek = now.getDay();\n\n        let isMonthMatch = activeMonthsOn.indexOf(month) !== -1;\n        let isDayOfMonthMatch = daysOfMonthOn.indexOf(dayOfMonth) !== -1;\n        let isDayOfWeekMatch = daysOfWeekOn[dayOfWeek];\n\n        if (isMonthMatch && (isDayOfMonthMatch || isDayOfWeekMatch)) {\n          if (setDeviceValue(source, true, options.Invert))\n            sendNotification(source, options.SendNotifications, \"–≤–∫–ª—é—á–µ–Ω–æ\");\n          if (options.TurnOffDelay > 0 && !options.ScheduleOff) {\n            setTimeout(function () {\n              if (setDeviceValue(source, false, options.Invert))\n                sendNotification(source, options.SendNotifications, `–æ—Ç–∫–ª—é—á–µ–Ω–æ —á–µ—Ä–µ–∑ ${options.TurnOffDelay} —Å–µ–∫`);\n            }, options.TurnOffDelay * 1000);\n          }\n        }\n      });\n      variables.cronTasksOn.push(task);\n    });\n  }\n\n  // –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è\n  if (options.ScheduleOff && variables.cronTasksOff.length === 0) {\n    let timesOff = options.TimeOff.split(',').map(t => t.trim());\n    let daysOfMonthOff = parseRange(options.DaysOfMonthOff);\n    let activeMonthsOff = parseRange(options.ActiveMonthsOff);\n    let daysOfWeekOff = [\n      options.SundayOff, options.MondayOff, options.TuesdayOff, options.WednesdayOff,\n      options.ThursdayOff, options.FridayOff, options.SaturdayOff\n    ];\n\n    timesOff.forEach(time => {\n      let timeOffObj = parseTime(time);\n      let hoursOffStr = timeOffObj.hoursStr;\n      let minutesOffStr = timeOffObj.minutesStr;\n\n      let task = Cron.schedule(`0 ${minutesOffStr} ${hoursOffStr} * * *`, function () {\n        let now = new Date();\n        let month = now.getMonth() + 1;\n        let dayOfMonth = now.getDate();\n        let dayOfWeek = now.getDay();\n\n        let isMonthMatch = activeMonthsOff.indexOf(month) !== -1;\n        let isDayOfMonthMatch = daysOfMonthOff.indexOf(dayOfMonth) !== -1;\n        let isDayOfWeekMatch = daysOfWeekOff[dayOfWeek];\n\n        if (isMonthMatch && (isDayOfMonthMatch || isDayOfWeekMatch)) {\n          if (setDeviceValue(source, false, options.Invert))\n            sendNotification(source, options.SendNotifications, \"–æ—Ç–∫–ª—é—á–µ–Ω–æ\");\n        }\n      });\n      variables.cronTasksOff.push(task);\n    });\n  }\n\n  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å\n  if (hasChanges) {\n    let now = new Date();\n    let currentTimeMinutes = now.getHours() * 60 + now.getMinutes(); // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö —Å –ø–æ–ª—É–Ω–æ—á–∏\n    let timesOn = options.TimeOn.split(',').map(t => parseTime(t.trim())).map(t => parseInt(t.hoursStr) * 60 + parseInt(t.minutesStr));\n    let timesOff = options.TimeOff.split(',').map(t => parseTime(t.trim())).map(t => parseInt(t.hoursStr) * 60 + parseInt(t.minutesStr));\n\n    let daysOfMonthOn = parseRange(options.DaysOfMonthOn);\n    let activeMonthsOn = parseRange(options.ActiveMonthsOn);\n    let daysOfWeekOn = [\n      options.SundayOn, options.MondayOn, options.TuesdayOn, options.WednesdayOn,\n      options.ThursdayOn, options.FridayOn, options.SaturdayOn\n    ];\n    let daysOfMonthOff = parseRange(options.DaysOfMonthOff);\n    let activeMonthsOff = parseRange(options.ActiveMonthsOff);\n    let daysOfWeekOff = [\n      options.SundayOff, options.MondayOff, options.TuesdayOff, options.WednesdayOff,\n      options.ThursdayOff, options.FridayOff, options.SaturdayOff\n    ];\n\n    let nowMonth = now.getMonth() + 1;\n    let nowDayOfMonth = now.getDate();\n    let nowDayOfWeek = now.getDay();\n\n    let isOnMonthMatch = activeMonthsOn.indexOf(nowMonth) !== -1;\n    let isOnDayOfMonthMatch = daysOfMonthOn.indexOf(nowDayOfMonth) !== -1;\n    let isOnDayOfWeekMatch = daysOfWeekOn[nowDayOfWeek];\n    let isOffMonthMatch = activeMonthsOff.indexOf(nowMonth) !== -1;\n    let isOffDayOfMonthMatch = daysOfMonthOff.indexOf(nowDayOfMonth) !== -1;\n    let isOffDayOfWeekMatch = daysOfWeekOff[nowDayOfWeek];\n\n    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –¥–µ–Ω—å –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è\n    let isOnDayActive = options.ScheduleOn && isOnMonthMatch && (isOnDayOfMonthMatch || isOnDayOfWeekMatch);\n    let isOffDayActive = options.ScheduleOff && isOffMonthMatch && (isOffDayOfMonthMatch || isOffDayOfWeekMatch);\n\n    if (isOnDayActive || isOffDayActive) {\n      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å —É—á—ë—Ç–æ–º –ø–µ—Ä–µ—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏\n      let events = [];\n      timesOn.forEach(time => events.push({ time: time, type: 'on' }));\n      timesOff.forEach(time => events.push({ time: time, type: 'off' }));\n\n      // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏\n      events.sort((a, b) => a.time - b.time);\n\n      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n      let shouldBeOn = false;\n      let lastEventTime = -1;\n\n      for (let event of events) {\n        if (event.time <= currentTimeMinutes && event.time > lastEventTime) {\n          shouldBeOn = (event.type === 'on' && isOnDayActive) || (shouldBeOn && !(event.type === 'off' && isOffDayActive));\n          lastEventTime = event.time;\n        }\n      }\n\n      // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ \"–≤–∫–ª—é—á–µ–Ω–∏–µ\" –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤—á–µ—Ä–∞, –∞ \"–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ\" –µ—â—ë –Ω–µ –±—ã–ª–æ —Å–µ–≥–æ–¥–Ω—è\n      if (!shouldBeOn && isOnDayActive && timesOn.some(t => t > timesOff[timesOff.length - 1])) {\n        let prevDay = new Date(now);\n        prevDay.setDate(now.getDate() - 1);\n        let prevDayOfWeek = prevDay.getDay();\n        let prevDayOfMonth = prevDay.getDate();\n        let isPrevOnDayMatch = activeMonthsOn.indexOf(nowMonth) !== -1 && (daysOfMonthOn.indexOf(prevDayOfMonth) !== -1 || daysOfWeekOn[prevDayOfWeek]);\n        if (isPrevOnDayMatch) {\n          let lastOnTimeYesterday = timesOn.filter(t => t > timesOff[timesOff.length - 1]).sort().pop();\n          if (lastOnTimeYesterday && currentTimeMinutes < timesOff[0]) {\n            shouldBeOn = true;\n          }\n        }\n      }\n\n      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ\n      if (shouldBeOn !== undefined) {\n        if (setDeviceValue(source, shouldBeOn, options.Invert))\n          sendNotification(source, options.SendNotifications, shouldBeOn ? \"–≤–∫–ª—é—á–µ–Ω–æ\" : \"–æ—Ç–∫–ª—é—á–µ–Ω–æ\");\n      }\n    }\n  }\n}\n\nfunction getDeviceName(service) {\n  const acc = service.getAccessory();\n  const room = acc.getRoom().getName();\n  const accName = service.getAccessory().getName();\n  const sName = service.getName();\n  const name = (accName == sName ? accName : accName + \" \" + sName) + \" (ID:\" + service.getUUID() + \", –∫–æ–º–Ω–∞—Ç–∞: \" + room + \")\";\n  return name;\n}\n\nfunction sendNotification(source, enabled, msg) {\n  if (enabled) {\n    let service = source.getService();\n    let deviceName = getDeviceName(service);\n    let fullMsg = `${deviceName} ${msg}`;\n    console.message(fullMsg);\n    if (global.sendToTelegram !== undefined) {\n      global.sendToTelegram(fullMsg);\n    }\n  }\n}\n\nfunction setDeviceValue(source, value, invert) {\n  if (invert) value = !value;\n  if (source.getType() === HC.On) {\n    if (source.getValue() != value) {\n      source.setValue(value);\n      return true\n    }\n  } else if (source.getType() === HC.Active) {\n    let newValue = value ? 1 : 0\n    if (source.getValue() != newValue) {\n      source.setValue(newValue);\n      return true\n    }\n  }\n  return false\n}\n\nfunction parseRange(str) {\n  var result = [];\n  if (!str) return result;\n  str.replace(/\\s/g, \"\").split(/[,;]/).forEach(function (part) {\n    var range = part.split('-');\n    if (range.length === 2) {\n      var start = parseInt(range[0], 10);\n      var end = parseInt(range[1], 10);\n      if (start && end && start <= end) {\n        for (var i = start; i <= end; i++) result.push(i);\n      }\n    } else {\n      var num = parseInt(part, 10);\n      if (num) result.push(num);\n    }\n  });\n  return result.filter(function (num) { return num; });\n}\n\nfunction parseTime(str) {\n  var time = str || \"00:00\";\n  var hours, minutes;\n  var timeMatch = time.match(/^(\\d{1,2}):(\\d{1,2})$/);\n  if (timeMatch) {\n    hours = parseInt(timeMatch[1], 10);\n    minutes = parseInt(timeMatch[2], 10);\n    if (hours < 0 || hours > 23 || minutes < 0 || minutes > 59) {\n      console.warn(\"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è \\\"\" + time + \"\\\", –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è \\\"00:00\\\"\");\n      hours = 0;\n      minutes = 0;\n    }\n  } else {\n    console.warn(\"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ \\\"\" + time + \"\\\", –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è \\\"00:00\\\"\");\n    hours = 0;\n    minutes = 0;\n  }\n  var hoursStr = hours < 10 ? \"0\" + hours : \"\" + hours;\n  var minutesStr = minutes < 10 ? \"0\" + minutes : \"\" + minutes;\n  time = hoursStr + \":\" + minutesStr;\n  return {\n    time: time,\n    hoursStr: hoursStr,\n    minutesStr: minutesStr\n  }\n}\n\nfunction isAutomaticChange(context) {\n  // –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —Å–∏–º–≤–æ–ª—É '<-'\n  const elements = context.toString().split(' <- ');\n  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –º–∞—Å—Å–∏–≤–µ\n  if (elements.length === 0) {\n    return false;\n  }\n  let last = elements[elements.length - 1];\n\n  // –£—Å–ª–æ–≤–∏–µ 1: –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'CLINK' –∏–ª–∏ 'HUB[OnStart]'\n  if (last.startsWith('CLINK') || last.startsWith('HUB[OnStart]')) {\n    return true;\n  }\n\n  // –£—Å–ª–æ–≤–∏–µ 2: –ü–µ—Ä–≤—ã–µ —Ç—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —à–∞–±–ª–æ–Ω—É 'LOGIC <- C <- LOGIC'\n  if (elements.length >= 3 &&\n    elements[0].startsWith('LOGIC') &&\n    elements[1].startsWith('C') &&\n    elements[2].startsWith('LOGIC')) {\n    return true;\n  }\n\n  // –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä—É—á–Ω–æ–µ\n  return false;\n}",
    "type": "LOGIC"
  }
}