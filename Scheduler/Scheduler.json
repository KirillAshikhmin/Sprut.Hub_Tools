{
  "scenarioTemplate": {
    "name": "📅 Планировщик расширенный",
    "desc": "Включает выключатель в заданное время в указанные дни месяца и/или дни недели. Обновления в канале https://t.me/smart_sputnik",
    "active": true,
    "onStart": true,
    "sync": false,
    "data": "info = {\n  name: \"📅 Планировщик расширенный\",\n  description: \"Включает выключатель в заданное время в указанные дни месяца и/или дни недели. Обновления в канале https://t.me/smart_sputnik\",\n  version: \"1.2\",\n  author: \"@BOOMikru\",\n  onStart: true,\n  sourceServices: [\n    HS.Switch, HS.Outlet, HS.Fan, HS.FanBasic, HS.Lightbulb,\n    HS.Faucet, HS.C_PetFeeder, HS.Valve, HS.HeaterCooler, HS.AirPurifier,\n    HS.IrrigationSystem, HS.Television, HS.HumidifierDehumidifier, HS.CameraControl\n  ],\n  sourceCharacteristics: [HC.On, HC.Active],\n\n  options: {\n    DaysOfMonth: {\n      name: {\n        en: \"Days of month\",\n        ru: \"Дни месяца\"\n      },\n      desc: {\n        en: \"Days of the month to activate (e.g., '1', '15, 30' or '1-5').\\nActivation occurs on selected weekdays and specified days. If neither days nor weekdays are set, no activation happens.\",\n        ru: \"Числа месяца для включения (например, '1', '15, 30' или '1-5').\\nВключение происходит по выбранным дням недели и указанным числам. Если не указать числа и дни недели, включение не произойдёт.\"\n      },\n      type: \"String\",\n      value: \"\"\n    },\n    Monday: {\n      name: {\n        en: \"Every Monday\",\n        ru: \"Каждый понедельник\"\n      },\n      type: \"Boolean\",\n      value: false\n    },\n    Tuesday: {\n      name: {\n        en: \"Every Tuesday\",\n        ru: \"Каждый вторник\"\n      },\n      type: \"Boolean\",\n      value: false\n    },\n    Wednesday: {\n      name: {\n        en: \"Every Wednesday\",\n        ru: \"Каждую среду\"\n      },\n      type: \"Boolean\",\n      value: false\n    },\n    Thursday: {\n      name: {\n        en: \"Every Thursday\",\n        ru: \"Каждый четверг\"\n      },\n      type: \"Boolean\",\n      value: false\n    },\n    Friday: {\n      name: {\n        en: \"Every Friday\",\n        ru: \"Каждую пятницу\"\n      },\n      type: \"Boolean\",\n      value: false\n    },\n    Saturday: {\n      name: {\n        en: \"Every Saturday\",\n        ru: \"Каждую субботу\"\n      },\n      type: \"Boolean\",\n      value: false\n    },\n    Sunday: {\n      name: {\n        en: \"Every Sunday\",\n        ru: \"Каждое воскресенье\"\n      },\n      type: \"Boolean\",\n      value: false\n    },\n    ActiveMonths: {\n      name: {\n        en: \"Active months\",\n        ru: \"Активные месяцы\"\n      },\n      desc: {\n        en: \"Months when the device should activate (e.g., '1', '1, 6, 12' or '6-8').\\nBy default every month.\",\n        ru: \"Месяцы, когда устройство должно включаться (например, '1', '1, 6, 12' или '6-8').\\nПо умолчанию каждый месяц.\"\n      },\n      type: \"String\",\n      value: \"\"\n    },\n    Time: {\n      name: {\n        en: \"Time (HH:MM)\",\n        ru: \"Время (ЧЧ:ММ)\"\n      },\n      desc: {\n        en: \"Time when activation occurs. Midnight by default.\\nTime to turn on in 24-hour format. Restart the script via 'Active' toggle after changing.\",\n        ru: \"Время, в которое произойдёт включение. По умолчанию в полночь.\\nПосле изменения времени перезапустите сценарий через переключатель 'Активно'.\"\n      },\n      type: \"String\",\n      value: \"00:00\"\n    },\n    DontTurnOff: {\n      name: {\n        en: \"Don't turn off automatically\",\n        ru: \"Не отключать автоматически\"\n      },\n      desc: {\n        en: \"If enabled, the device will only turn on without automatic turning off.\",\n        ru: \"Если включено, устройство будет только включаться без автоматического отключения.\"\n      },\n      type: \"Boolean\",\n      value: false\n    },\n    TurnOffTime: {\n      name: {\n        en: \"Turn off time (HH:MM)\",\n        ru: \"Время отключения (ЧЧ:ММ)\"\n      },\n      desc: {\n        en: \"Time to turn off the switch. Midnight by default.\\nIf turn-on and turn-off times match, it may not turn off if the next day meets the conditions.\\nWill not turn off if 'Don't turn off' is enabled.\",\n        ru: \"Время отключения выключателя. По умолчанию полночь.\\nЕсли время включения и отключения совпадает, то может не отключиться, если следующий день подходит под условия.\\nНе отключится, если включено 'Не отключать'.\"\n      },\n      type: \"String\",\n      value: \"00:00\"\n    },\n    TurnOffDelay: {\n      name: {\n        en: \"Turn off delay (seconds)\",\n        ru: \"Выключить через (секунды)\"\n      },\n      desc: {\n        en: \"Delay in seconds before turning off after activation. Set to 0 to disable automatic turn-off.\\nWill not turn off if 'Don't turn off' is enabled.\",\n        ru: \"После включения автоматически отключится через указанное количество секунд. Установите 0, чтобы отключить автоматическое отключение.\\nНе отключится, если включено 'Не отключать'.\"\n      },\n      type: \"Integer\",\n      value: 0\n    },\n    Invert: {\n      name: {\n        en: \"Invert\",\n        ru: \"Инвертировать значение\"\n      },\n      desc: {\n        en: \"Instead of turning on it will turn off, and instead of turning off it will turn on\",\n        ru: \"Вместо включения будет отключаться, а вместо отключения - включаться\"\n      },\n      type: \"Boolean\",\n      value: false\n    }\n  },\n  variables: {\n    cronTask: undefined, // Задача для включения в указанное время\n    midnightTask: undefined, // Задача для отключения в указанное время или в полночь\n    prevTime: undefined, // Предыдущее значение options.Time\n    prevTurnOffTime: undefined // Предыдущее значение options.TurnOffTime\n  }\n}\n\nfunction trigger(source, value, variables, options, context) {\n  // Проверяем, изменилось ли время включения или отключения в настройках\n  if (variables.prevTime !== options.Time || variables.prevTurnOffTime !== options.TurnOffTime) {\n    if (variables.cronTask) {\n      variables.cronTask.clear();\n      variables.cronTask = undefined;\n    }\n    if (variables.midnightTask) {\n      variables.midnightTask.clear();\n      variables.midnightTask = undefined;\n    }\n    variables.prevTime = options.Time; // Сохраняем новое значение времени включения\n    variables.prevTurnOffTime = options.TurnOffTime; // Сохраняем новое значение времени отключения\n  }\n\n  // Если задачи уже запущены, ничего не делаем\n  if (variables.cronTask) return;\n\n  let timeObj = perseTime(options.Time)\n  let time = timeObj.time\n  let hoursStr = timeObj.hoursStr\n  let minutesStr = timeObj.minutesStr\n\n  let timeOffObj = perseTime(options.TurnOffTime)\n  let turnOffTime = timeOffObj.time\n  let turnOffHoursStr = timeOffObj.hoursStr\n  let turnOffMinutesStr = timeOffObj.minutesStr\n\n  // Валидация дней месяца с поддержкой диапазонов\n  var daysOfMonth = parseRange(options.DaysOfMonth);\n  daysOfMonth = daysOfMonth.filter(function (day) {\n    if (day >= 1 && day <= 31) {\n      return true;\n    } else {\n      console.warn(\"Некорректное число месяца \\\"\" + day + \"\\\" (допустимы: 1-31), будет проигнорировано\");\n      return false;\n    }\n  });\n\n  // Валидация активных месяцев с поддержкой диапазонов\n  var activeMonths = parseRange(options.ActiveMonths);\n  activeMonths = activeMonths.filter(function (month) {\n    if (month >= 1 && month <= 12) {\n      return true;\n    } else {\n      console.warn(\"Некорректное значение месяца \\\"\" + month + \"\\\" (допустимы: 1-12), будет проигнорировано\");\n      return false;\n    }\n  });\n  if (activeMonths.length === 0) {\n    //console.warn(\"Нет валидных месяцев в \\\"\" + options.ActiveMonths + \"\\\", используются все месяцы (1-12)\");\n    activeMonths = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n  }\n\n  // Парсим дни недели\n  var daysOfWeek = [\n    options.Sunday, options.Monday, options.Tuesday, options.Wednesday,\n    options.Thursday, options.Friday, options.Saturday\n  ];\n\n  let setNewValue = function () {\n    let now = new Date();\n    let month = now.getMonth() + 1; // getMonth() возвращает 0-11, добавляем 1 для 1-12\n    let dayOfMonth = now.getDate();\n    let dayOfWeek = now.getDay(); // 0 - воскресенье, 1 - понедельник, ..., 6 - суббота\n\n    let isMonthMatch = activeMonths.indexOf(month) !== -1;\n    let isDayOfMonthMatch = daysOfMonth.length > 0 && daysOfMonth.indexOf(dayOfMonth) !== -1;\n    let isDayOfWeekMatch = daysOfWeek[dayOfWeek];\n\n    // Если указаны только месяцы, но нет ни дней месяца, ни дней недели, включение не происходит\n    if (isMonthMatch && (isDayOfMonthMatch || isDayOfWeekMatch)) {\n      setDeviceValue(source, true, options.Invert);\n      //console.info(\"Устройство включено в \" + time + \" для месяца \" + month + \", дня \" + dayOfMonth + \", дня недели \" + dayOfWeek);\n\n      // Автоматическое отключение с учётом TurnOffDelay, если не DontTurnOff и TurnOffDelay > 0\n      if (options.TurnOffDelay > 0 && !options.DontTurnOff) {\n        setTimeout(function () {\n          setDeviceValue(source, false, options.Invert);\n         // console.info(\"Устройство автоматически отключено через \" + options.TurnOffDelay + \" секунд в \" + time);\n        }, options.TurnOffDelay * 1000);\n      }\n    } else if (!options.DontTurnOff) {\n      setDeviceValue(source, false, options.Invert);\n      //console.info(\"Устройство отключено в \" + time + \" - условия не совпадают (месяц: \" + month + \", день: \" + dayOfMonth + \", день недели \" + dayOfWeek + \")\");\n    }\n  }\n\n  //console.info(\"Крон планировщика знапущен на {}\", \"0 \" + minutesStr + \" \" + hoursStr + \" * * *\")\n  // Основная задача: включение в указанное время\n  variables.cronTask = Cron.schedule(\"0 \" + minutesStr + \" \" + hoursStr + \" * * *\", setNewValue);\n\n  // Задача на отключение: используем TurnOffTime, если указано, иначе полночь (если не DontTurnOff)\n  if (!options.DontTurnOff && time != turnOffTime) {\n    var offSchedule = (turnOffTime === \"00:00\" && options.TurnOffTime === \"\") ? \"0 0 0 * * *\" : \"0 \" + turnOffMinutesStr + \" \" + turnOffHoursStr + \" * * *\";\n    //console.info(\"Крон планировщика на выкл знапущен на {}\", offSchedule)\n    variables.midnightTask = Cron.schedule(offSchedule, function () {\n      setDeviceValue(source, false, options.Invert);\n     // console.info(\"Устройство отключено в \" + turnOffTime);\n    });\n  } else {\n    //console.info(\"Крон планировщика на выкл НЕ знапущен\")\n  }\n}\n\nfunction setDeviceValue(source, value, invert) {\n  var isOnCharacteristic = source.getType() == HC.On;\n  var isActiveCharacteristic = source.getType() == HC.Active;\n  if (invert) value = !value\n  if (isOnCharacteristic) {\n    source.setValue(value);\n  } else if (isActiveCharacteristic) {\n    source.setValue(value ? 1 : 0);\n  }\n}\n\nfunction parseRange(str) {\n  var result = [];\n  if (!str) return result; // Если строка пустая, возвращаем пустой массив\n  str.replace(/\\s/g, \"\").split(/[,;]/).forEach(function (part) {\n    var range = part.split('-');\n    if (range.length === 2) {\n      var start = parseInt(range[0], 10);\n      var end = parseInt(range[1], 10);\n      if (start && end && start <= end) {\n        for (var i = start; i <= end; i++) result.push(i);\n      }\n    } else {\n      var num = parseInt(part, 10);\n      if (num) result.push(num);\n    }\n  });\n  return result.filter(function (num) { return num; });\n}\n\nfunction perseTime(str) {\n  // Валидация времени включения (Time)\n  var time = str || \"\"; // Если undefined, используем пустую строку\n  var hours, minutes;\n  var timeMatch = time.match(/^(\\d{1,2}):(\\d{1,2})$/); // Поддержка без ведущего нуля (например, \"5:30\")\n  if (timeMatch) {\n    hours = parseInt(timeMatch[1], 10);\n    minutes = parseInt(timeMatch[2], 10);\n    if (hours < 0 || hours > 23 || minutes < 0 || minutes > 59) {\n      console.warn(\"Некорректное время \\\"\" + time + \"\\\" (часы: 0-23, минуты: 0-59), используется \\\"00:00\\\"\");\n      hours = 0;\n      minutes = 0;\n    }\n  } else {\n    console.warn(\"Некорректный формат времени \\\"\" + time + \"\\\", ожидается ЧЧ:ММ, используется \\\"00:00\\\"\");\n    hours = 0;\n    minutes = 0;\n  }\n  var hoursStr = hours < 10 ? \"0\" + hours : \"\" + hours;\n  var minutesStr = minutes < 10 ? \"0\" + minutes : \"\" + minutes;\n  time = hoursStr + \":\" + minutesStr; // Формат \"ЧЧ:ММ\"\n  return {\n    time: time,\n    hoursStr: hoursStr,\n    minutesStr: minutesStr\n  }\n}",
    "type": "LOGIC"
  }
}