{
  "scenarioTemplate": {
    "name": "üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π",
    "desc": "–í–∫–ª—é—á–∞–µ—Ç –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å –≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–Ω–∏ –º–µ—Å—è—Ü–∞ –∏/–∏–ª–∏ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏. –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ https://t.me/smart_sputnik",
    "active": true,
    "onStart": true,
    "sync": false,
    "data": "const info = {\n  name: \"üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π\",\n  description: \"–í–∫–ª—é—á–∞–µ—Ç –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å –≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–Ω–∏ –º–µ—Å—è—Ü–∞ –∏/–∏–ª–∏ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏. –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ https://t.me/smart_sputnik\",\n  version: \"2.1\",\n  author: \"@BOOMikru\",\n  onStart: true,\n  sourceServices: [\n    HS.Switch, HS.Outlet, HS.Fan, HS.FanBasic, HS.Lightbulb,\n    HS.Faucet, HS.C_PetFeeder, HS.Valve, HS.HeaterCooler, HS.AirPurifier,\n    HS.IrrigationSystem, HS.Television, HS.HumidifierDehumidifier, HS.CameraControl\n  ],\n  sourceCharacteristics: [HC.On, HC.Active],\n  options: {\n    ScheduleOn: { type: \"Boolean\", value: true, name: { ru: \"–í–∫–ª—é—á–∞—Ç—å –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É\", en: \"Schedule turn on\" }, desc: { ru: \"–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –±—É–¥–µ—Ç –≤–∫–ª—é—á–∞—Ç—å—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\", en: \"If enabled, the device will turn on according to the schedule.\" } },\n    DaysOfMonthOn: { type: \"String\", value: \"1-31\", name: { ru: \"  –î–Ω–∏ –º–µ—Å—è—Ü–∞ (–≤–∫–ª)\", en: \"  Days of month (turn on)\" }, desc: { ru: \"–ß–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '1', '15, 30' –∏–ª–∏ '1-5').\\n–¢–∞–∫–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:\\n- '–ø–æ—Å–ª–µ–¥–Ω–∏–π' - –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞\\n- '–ø–µ—Ä–≤—ã–π' - –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞\\n- '—á—ë—Ç–Ω—ã–µ' - —á—ë—Ç–Ω—ã–µ —á–∏—Å–ª–∞\\n- '–Ω–µ—á—ë—Ç–Ω—ã–µ' - –Ω–µ—á—ë—Ç–Ω—ã–µ —á–∏—Å–ª–∞\\n- '–ø–æ—Å–ª–µ–¥–Ω–∏–π-N' - N-–π –¥–µ–Ω—å —Å –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞\\n- –ù–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞' –∏ —Ç.–¥. –∏–ª–∏ —Å–æ–∫—Ä–∞—â—ë–Ω–Ω–æ '–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±', '–≤—Å')\\n–í–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –∏ —É–∫–∞–∑–∞–Ω–Ω—ã–º —á–∏—Å–ª–∞–º.\", en: \"Days of the month to turn on (e.g., '1', '15, 30' or '1-5').\\nSpecial values are also supported:\\n- 'last' - last day of the month\\n- 'first' - first day of the month\\n- 'even' - even days\\n- 'odd' - odd days\\n- 'last-N' - Nth day from the end of the month\\n- Weekday names (e.g., 'monday', 'tuesday', 'wednesday', etc.)\\nActivation occurs on selected weekdays and specified days.\" } },\n    MondayOn: { type: \"Boolean\", value: false, name: { ru: \"‚ÄÉ‚ÄÉ–ö–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ (–≤–∫–ª)\", en: \"‚ÄÉ‚ÄÉEvery Monday (turn on)\" }, desc: { ru: \"\", en: \"\" } },\n    TuesdayOn: { type: \"Boolean\", value: false, name: { ru: \"‚ÄÉ‚ÄÉ–ö–∞–∂–¥—ã–π –≤—Ç–æ—Ä–Ω–∏–∫ (–≤–∫–ª)\", en: \"‚ÄÉ‚ÄÉEvery Tuesday (turn on)\" }, desc: { ru: \"\", en: \"\" } },\n    WednesdayOn: { type: \"Boolean\", value: false, name: { ru: \"‚ÄÉ‚ÄÉ–ö–∞–∂–¥—É—é —Å—Ä–µ–¥—É (–≤–∫–ª)\", en: \"‚ÄÉ‚ÄÉEvery Wednesday (turn on)\" }, desc: { ru: \"\", en: \"\" } },\n    ThursdayOn: { type: \"Boolean\", value: false, name: { ru: \"‚ÄÉ‚ÄÉ–ö–∞–∂–¥—ã–π —á–µ—Ç–≤–µ—Ä–≥ (–≤–∫–ª)\", en: \"‚ÄÉ‚ÄÉEvery Thursday (turn on)\" }, desc: { ru: \"\", en: \"\" } },\n    FridayOn: { type: \"Boolean\", value: false, name: { ru: \"‚ÄÉ‚ÄÉ–ö–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É (–≤–∫–ª)\", en: \"‚ÄÉ‚ÄÉEvery Friday (turn on)\" }, desc: { ru: \"\", en: \"\" } },\n    SaturdayOn: { type: \"Boolean\", value: false, name: { ru: \"‚ÄÉ‚ÄÉ–ö–∞–∂–¥—É—é —Å—É–±–±–æ—Ç—É (–≤–∫–ª)\", en: \"‚ÄÉ‚ÄÉEvery Saturday (turn on)\" }, desc: { ru: \"\", en: \"\" } },\n    SundayOn: { type: \"Boolean\", value: false, name: { ru: \"‚ÄÉ‚ÄÉ–ö–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ (–≤–∫–ª)\", en: \"‚ÄÉ‚ÄÉEvery Sunday (turn on)\" }, desc: { ru: \"\", en: \"\" } },\n    ActiveMonthsOn: { type: \"String\", value: \"1-12\", name: { ru: \"‚ÄÉ‚ÄÉ–ê–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Å—è—Ü—ã (–≤–∫–ª)\", en: \"‚ÄÉ‚ÄÉActive months (turn on)\" }, desc: { ru: \"–ú–µ—Å—è—Ü—ã, –∫–æ–≥–¥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '1', '1, 6, 12' –∏–ª–∏ '6-8').\\n–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü.\", en: \"Months when the device should turn on (e.g., '1', '1, 6, 12' or '6-8').\\nBy default every month.\" } },\n    TimeOn: { type: \"String\", value: \"00:00\", name: { ru: \"‚ÄÉ‚ÄÉ–í—Ä–µ–º—è (–ß–ß:–ú–ú) (–≤–∫–ª)\", en: \"‚ÄÉ‚ÄÉTime (HH:MM) (turn on)\" }, desc: { ru: \"–í—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –≤–∫–ª—é—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '08:00, 12:00, 18:00').\\n–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π —á–µ—Ä–µ–∑ '–ê–∫—Ç–∏–≤–Ω–æ' –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.\", en: \"Times when turn on occurs (e.g., '08:00, 12:00, 18:00').\\nMultiple times can be separated by commas. Restart the script via 'Active' toggle after changing.\" } },\n    ScheduleOff: { type: \"Boolean\", value: true, name: { ru: \"–û—Ç–∫–ª—é—á–∞—Ç—å –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É\", en: \"Schedule turn off\" }, desc: { ru: \"–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–∞—Ç—å—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\", en: \"If enabled, the device will turn off according to the schedule.\" } },\n    DaysOfMonthOff: { type: \"String\", value: \"1-31\", name: { ru: \"  –î–Ω–∏ –º–µ—Å—è—Ü–∞ (–æ—Ç–∫–ª)\", en: \"  Days of month (turn off)\" }, desc: { ru: \"–ß–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ –∂–µ —Ñ–æ—Ä–º–∞—Ç—ã –∑–Ω–∞—á–µ–Ω–∏–π, —á—Ç–æ –∏ –ø–æ–ª–µ '–î–Ω–∏ –º–µ—Å—è—Ü–∞ (–≤–∫–ª)'.\\n–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –∏ —É–∫–∞–∑–∞–Ω–Ω—ã–º —á–∏—Å–ª–∞–º.\", en: \"Days of the month to turn off. Supports the same value formats as 'Days of month (turn on)' field.\\nDeactivation occurs on selected weekdays and specified days.\" } },\n    MondayOff: { type: \"Boolean\", value: false, name: { ru: \"‚ÄÉ‚ÄÉ–ö–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ (–æ—Ç–∫–ª)\", en: \"‚ÄÉ‚ÄÉEvery Monday (turn off)\" }, desc: { ru: \"\", en: \"\" } },\n    TuesdayOff: { type: \"Boolean\", value: false, name: { ru: \"‚ÄÉ‚ÄÉ–ö–∞–∂–¥—ã–π –≤—Ç–æ—Ä–Ω–∏–∫ (–æ—Ç–∫–ª)\", en: \"‚ÄÉ‚ÄÉEvery Tuesday (turn off)\" }, desc: { ru: \"\", en: \"\" } },\n    WednesdayOff: { type: \"Boolean\", value: false, name: { ru: \"‚ÄÉ‚ÄÉ–ö–∞–∂–¥—É—é —Å—Ä–µ–¥—É (–æ—Ç–∫–ª)\", en: \"‚ÄÉ‚ÄÉEvery Wednesday (turn off)\" }, desc: { ru: \"\", en: \"\" } },\n    ThursdayOff: { type: \"Boolean\", value: false, name: { ru: \"‚ÄÉ‚ÄÉ–ö–∞–∂–¥—ã–π —á–µ—Ç–≤–µ—Ä–≥ (–æ—Ç–∫–ª)\", en: \"‚ÄÉ‚ÄÉEvery Thursday (turn off)\" }, desc: { ru: \"\", en: \"\" } },\n    FridayOff: { type: \"Boolean\", value: false, name: { ru: \"‚ÄÉ‚ÄÉ–ö–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É (–æ—Ç–∫–ª)\", en: \"‚ÄÉ‚ÄÉEvery Friday (turn off)\" }, desc: { ru: \"\", en: \"\" } },\n    SaturdayOff: { type: \"Boolean\", value: false, name: { ru: \"‚ÄÉ‚ÄÉ–ö–∞–∂–¥—É—é —Å—É–±–±–æ—Ç—É (–æ—Ç–∫–ª)\", en: \"‚ÄÉ‚ÄÉEvery Saturday (turn off)\" }, desc: { ru: \"\", en: \"\" } },\n    SundayOff: { type: \"Boolean\", value: false, name: { ru: \"‚ÄÉ‚ÄÉ–ö–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ (–æ—Ç–∫–ª)\", en: \"‚ÄÉ‚ÄÉEvery Sunday (turn off)\" }, desc: { ru: \"\", en: \"\" } },\n    ActiveMonthsOff: { type: \"String\", value: \"1-12\", name: { ru: \"‚ÄÉ‚ÄÉ–ê–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Å—è—Ü—ã (–æ—Ç–∫–ª)\", en: \"‚ÄÉ‚ÄÉActive months (turn off)\" }, desc: { ru: \"–ú–µ—Å—è—Ü—ã, –∫–æ–≥–¥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –æ—Ç–∫–ª—é—á–∞—Ç—å—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '1', '1, 6, 12' –∏–ª–∏ '6-8').\\n–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü.\", en: \"Months when the device should turn off (e.g., '1', '1, 6, 12' or '6-8').\\nBy default every month.\" } },\n    TimeOff: { type: \"String\", value: \"00:00\", name: { ru: \"‚ÄÉ‚ÄÉ–í—Ä–µ–º—è (–ß–ß:–ú–ú) (–æ—Ç–∫–ª)\", en: \"‚ÄÉ‚ÄÉTime (HH:MM) (turn off)\" }, desc: { ru: \"–í—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '09:00, 13:00, 19:00').\\n–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π —á–µ—Ä–µ–∑ '–ê–∫—Ç–∏–≤–Ω–æ' –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.\", en: \"Times when turn off occurs (e.g., '09:00, 13:00, 19:00').\\nMultiple times can be separated by commas. Restart the script via 'Active' toggle after changing.\" } },\n    Invert: { type: \"Boolean\", value: false, name: { ru: \"–ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ\", en: \"Invert\" }, desc: { ru: \"–í–º–µ—Å—Ç–æ –≤–∫–ª—é—á–µ–Ω–∏—è –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–∞—Ç—å—Å—è, –∞ –≤–º–µ—Å—Ç–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è - –≤–∫–ª—é—á–∞—Ç—å—Å—è\", en: \"Instead of turning on it will turn off, and instead of turning off it will turn on\" } },\n    TurnOffDelay: { type: \"Integer\", value: 0, name: { ru: \"–í—ã–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–∑ (—Å–µ–∫—É–Ω–¥—ã)\", en: \"Turn off delay (seconds)\" }, desc: { ru: \"–ü–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ 0, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–∫–ª—é—á–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\\n–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ '–û—Ç–∫–ª—é—á–∞—Ç—å –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É'.\", en: \"Delay in seconds before turning off after activation. Set to 0 to disable automatic turn-off.\\nDoes not work if 'Schedule turn off' is enabled.\" } },\n    SendNotifications: { type: \"Boolean\", value: false, name: { ru: \"–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\", en: \"Send notifications\" }, desc: { ru: \"–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –∏ —Å–∏—Å—Ç–µ–º—É –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤–∫–ª—é—á–µ–Ω–∏–∏/–æ—Ç–∫–ª—é—á–µ–Ω–∏–∏.\", en: \"If enabled, sends a Telegram and system notification on each turn on/off.\" } },\n    MaintainState: { type: \"Boolean\", value: false, name: { ru: \"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ\", en: \"Maintain state\" }, desc: { ru: \"–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –±—É–¥–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –Ω—É–∂–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –¥—Ä—É–≥–∏–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–º –∏–ª–∏ –º–æ—Å—Ç–æ–º, –ø–æ–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.\", en: \"If enabled, the device will follow the current state upon manual change until the schedule triggers.\" } }\n  },\n  variables: {\n    cronTasksOn: [], // –ú–∞—Å—Å–∏–≤ –∑–∞–¥–∞—á –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è (–Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤)\n    cronTasksOff: [], // –ú–∞—Å—Å–∏–≤ –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è (–Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤)\n    prevTimeOn: undefined, // –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–∫–ª—é—á–µ–Ω–∏—è\n    prevTimeOff: undefined // –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è\n  }\n};\n\nfunction trigger(source, value, variables, options, context) {\n  try {\n    let needRestoreTargetState = false;\n    // –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ —Ä—É—á–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏\n    if (options.MaintainState && !isAutomaticChange(context)) {\n      needRestoreTargetState = true;\n      sendNotification(source, options.SendNotifications, \"–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Ä—É—á–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è\");\n    }\n\n    // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∏–∑ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–∫–ª—é—á–µ–Ω–∏—è –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è\n    let currentTimeOn = `${options.TimeOn}|${options.DaysOfMonthOn}|${options.ActiveMonthsOn}|${options.SundayOn}|${options.MondayOn}|${options.TuesdayOn}|${options.WednesdayOn}|${options.ThursdayOn}|${options.FridayOn}|${options.SaturdayOn}`;\n    let currentTimeOff = `${options.TimeOff}|${options.DaysOfMonthOff}|${options.ActiveMonthsOff}|${options.SundayOff}|${options.MondayOff}|${options.TuesdayOff}|${options.WednesdayOff}|${options.ThursdayOff}|${options.FridayOff}|${options.SaturdayOff}`;\n\n    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n    let hasChanges = needRestoreTargetState || (variables.prevTimeOn !== currentTimeOn || variables.prevTimeOff !== currentTimeOff);\n    if (hasChanges) {\n      // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏\n      variables.cronTasksOn.forEach(task => task.clear());\n      variables.cronTasksOn = [];\n      variables.cronTasksOff.forEach(task => task.clear());\n      variables.cronTasksOff = [];\n      variables.prevTimeOn = currentTimeOn;\n      variables.prevTimeOff = currentTimeOff;\n    }\n\n    // –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è\n    if (options.ScheduleOn && variables.cronTasksOn.length === 0) {\n      let timesOn = options.TimeOn.split(',').map(t => t.trim());\n      let daysOfMonthOn = parseRange(options.DaysOfMonthOn) || [];\n      let activeMonthsOn = parseRange(options.ActiveMonthsOn, true) || [];\n      let daysOfWeekOn = [\n        options.SundayOn, options.MondayOn, options.TuesdayOn, options.WednesdayOn,\n        options.ThursdayOn, options.FridayOn, options.SaturdayOn\n      ];\n\n      timesOn.forEach(time => {\n        let timeOnObj = parseTime(time);\n        if (timeOnObj.time === \"00:00\" && time !== \"00:00\") {\n          return;\n        }\n        let hoursOnStr = timeOnObj.hoursStr;\n        let minutesOnStr = timeOnObj.minutesStr;\n\n        let task = Cron.schedule(`0 ${minutesOnStr} ${hoursOnStr} * * *`, () => {\n          let now = new Date();\n          let month = now.getMonth() + 1;\n          let dayOfWeek = now.getDay();\n\n          let isMonthMatch = activeMonthsOn.indexOf(month) !== -1;\n          let isDayOfMonthMatch = daysOfMonthOn.some(day => isDayMatch(day, now));\n          let isDayOfWeekMatch = daysOfWeekOn[dayOfWeek];\n\n          if (isMonthMatch && (isDayOfMonthMatch || isDayOfWeekMatch)) {\n            if (setDeviceValue(source, true, options.Invert)) {\n              sendNotification(source, options.SendNotifications, \"–≤–∫–ª—é—á–µ–Ω–æ\");\n            }\n            if (options.TurnOffDelay > 0 && !options.ScheduleOff) {\n              setTimeout(() => {\n                if (setDeviceValue(source, false, options.Invert)) {\n                  sendNotification(source, options.SendNotifications, `–æ—Ç–∫–ª—é—á–µ–Ω–æ —á–µ—Ä–µ–∑ ${options.TurnOffDelay} —Å–µ–∫`);\n                }\n              }, options.TurnOffDelay * 1000);\n            }\n          }\n        });\n        variables.cronTasksOn.push(task);\n      });\n    }\n\n    // –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è\n    if (options.ScheduleOff && variables.cronTasksOff.length === 0) {\n      let timesOff = options.TimeOff.split(',').map(t => t.trim());\n      let daysOfMonthOff = parseRange(options.DaysOfMonthOff) || [];\n      let activeMonthsOff = parseRange(options.ActiveMonthsOff, true) || [];\n      let daysOfWeekOff = [\n        options.SundayOff, options.MondayOff, options.TuesdayOff, options.WednesdayOff,\n        options.ThursdayOff, options.FridayOff, options.SaturdayOff\n      ];\n\n      timesOff.forEach(time => {\n        let timeOffObj = parseTime(time);\n        if (timeOffObj.time === \"00:00\" && time !== \"00:00\") {\n          return;\n        }\n        let hoursOffStr = timeOffObj.hoursStr;\n        let minutesOffStr = timeOffObj.minutesStr;\n\n        let task = Cron.schedule(`0 ${minutesOffStr} ${hoursOffStr} * * *`, () => {\n          let now = new Date();\n          let month = now.getMonth() + 1;\n          let dayOfWeek = now.getDay();\n\n          let isMonthMatch = activeMonthsOff.indexOf(month) !== -1;\n          let isDayOfMonthMatch = daysOfMonthOff.some(day => isDayMatch(day, now));\n          let isDayOfWeekMatch = daysOfWeekOff[dayOfWeek];\n\n          if (isMonthMatch && (isDayOfMonthMatch || isDayOfWeekMatch)) {\n            if (setDeviceValue(source, false, options.Invert)) {\n              sendNotification(source, options.SendNotifications, \"–æ—Ç–∫–ª—é—á–µ–Ω–æ\");\n            }\n          }\n        });\n        variables.cronTasksOff.push(task);\n      });\n    }\n\n    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å\n    if (hasChanges) {\n      let now = new Date();\n      let currentTimeMinutes = now.getHours() * 60 + now.getMinutes();\n\n      let timesOn = options.TimeOn.split(',').map(t => {\n        let parsed = parseTime(t.trim());\n        let minutes = parseInt(parsed.hoursStr) * 60 + parseInt(parsed.minutesStr);\n        return minutes;\n      });\n\n      let timesOff = options.TimeOff.split(',').map(t => {\n        let parsed = parseTime(t.trim());\n        let minutes = parseInt(parsed.hoursStr) * 60 + parseInt(parsed.minutesStr);\n        return minutes;\n      });\n\n      let daysOfMonthOn = parseRange(options.DaysOfMonthOn) || [];\n      let activeMonthsOn = parseRange(options.ActiveMonthsOn, true) || [];\n      let daysOfWeekOn = [\n        options.SundayOn, options.MondayOn, options.TuesdayOn, options.WednesdayOn,\n        options.ThursdayOn, options.FridayOn, options.SaturdayOn\n      ];\n\n      let daysOfMonthOff = parseRange(options.DaysOfMonthOff) || [];\n      let activeMonthsOff = parseRange(options.ActiveMonthsOff, true) || [];\n      let daysOfWeekOff = [\n        options.SundayOff, options.MondayOff, options.TuesdayOff, options.WednesdayOff,\n        options.ThursdayOff, options.FridayOff, options.SaturdayOff\n      ];\n\n      let nowMonth = now.getMonth() + 1;\n      let nowDayOfWeek = now.getDay();\n\n      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –¥–µ–Ω—å –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è\n      let isOnDayActive = options.ScheduleOn && activeMonthsOn.indexOf(nowMonth) !== -1 &&\n        (daysOfMonthOn.some(day => isDayMatch(day, now)) || daysOfWeekOn[nowDayOfWeek]);\n      let isOffDayActive = options.ScheduleOff && activeMonthsOff.indexOf(nowMonth) !== -1 &&\n        (daysOfMonthOff.some(day => isDayMatch(day, now)) || daysOfWeekOff[nowDayOfWeek]);\n\n      if (isOnDayActive || isOffDayActive) {\n        let events = [];\n\n        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –≤–∫–ª—é—á–µ–Ω–∏—è\n        if (isOnDayActive) {\n          timesOn.forEach(time => {\n            events.push({ time: time, type: 'on' });\n          });\n        }\n\n        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è\n        if (isOffDayActive) {\n          timesOff.forEach(time => {\n            events.push({ time: time, type: 'off' });\n          });\n        }\n\n        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏\n        events.sort((a, b) => a.time - b.time);\n\n        // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏\n        let lastEvent = null;\n        for (let i = events.length - 1; i >= 0; i--) {\n          if (events[i].time <= currentTimeMinutes) {\n            lastEvent = events[i];\n            break;\n          }\n        }\n\n        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–æ–±—ã—Ç–∏–µ, –ø—Ä–∏–º–µ–Ω—è–µ–º –µ–≥–æ\n        if (lastEvent !== null) {\n          let shouldBeOn = (lastEvent.type === 'on');\n          if (setDeviceValue(source, shouldBeOn, options.Invert)) {\n            sendNotification(source, options.SendNotifications, shouldBeOn ? \"–≤–∫–ª—é—á–µ–Ω–æ\" : \"–æ—Ç–∫–ª—é—á–µ–Ω–æ\");\n          }\n        }\n      }\n    }\n\n  } catch (e) {\n    logError(\"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ trigger: \" + e.stack, thermostatService);\n  }\n}\n\nfunction getDeviceName(service) {\n  const acc = service.getAccessory();\n  const room = acc.getRoom().getName();\n  const accName = acc.getName();\n  const sName = service.getName();\n  const name = (accName == sName ? accName : accName + \" \" + sName) + \" (ID:\" + service.getUUID() + \", –∫–æ–º–Ω–∞—Ç–∞: \" + room + \")\";\n  return name;\n}\n\nfunction sendNotification(source, enabled, msg) {\n  if (enabled) {\n    let service = source.getService();\n    let deviceName = getDeviceName(service);\n    let fullMsg = `${deviceName} ${msg}`;\n    console.message(fullMsg);\n    if (global.sendToTelegram !== undefined) {\n      global.sendToTelegram(fullMsg);\n    }\n  }\n}\n\nfunction setDeviceValue(source, value, invert) {\n  if (invert) value = !value;\n  if (source.getType() === HC.On) {\n    if (source.getValue() != value) {\n      source.setValue(value);\n      return true;\n    }\n  } else if (source.getType() === HC.Active) {\n    let newValue = value ? 1 : 0;\n    if (source.getValue() != newValue) {\n      source.setValue(newValue);\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isDayMatch(day, currentDate) {\n  if (!day) return false;\n\n  const dayOfMonth = currentDate.getDate();\n  const dayOfWeek = currentDate.getDay();\n  const lastDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate();\n\n  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n  const numDay = parseInt(day, 10);\n  if (!isNaN(numDay)) {\n    return numDay === dayOfMonth;\n  }\n\n  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è\n  switch (day) {\n    case 'last':\n      return dayOfMonth === lastDayOfMonth;\n    case 'first':\n      return dayOfMonth === 1;\n  }\n\n  // –ü—Ä–æ–≤–µ—Ä–∫–∞ last-N\n  if (day.startsWith('last-')) {\n    const n = parseInt(day.split('-')[1], 10);\n    if (!isNaN(n)) {\n      return dayOfMonth === (lastDayOfMonth - n);\n    }\n  }\n\n  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏\n  if (typeof day === 'string' && day.startsWith('weekday-')) {\n    const weekday = parseInt(day.split('-')[1], 10);\n    return weekday === dayOfWeek;\n  }\n\n  return false;\n}\n\nfunction parseRange(str, isMonth = false) {\n  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n  if (!str || typeof str !== 'string') {\n    return [];\n  }\n\n  // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã\n  str = str.toLowerCase().trim();\n\n  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏: —Å–∏–Ω–æ–Ω–∏–º—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ weekday-N\n  const weekdays = {\n    'weekday-0': ['sunday', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–≤—Å', 'sun'],\n    'weekday-1': ['monday', '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–ø–Ω', 'mon'],\n    'weekday-2': ['tuesday', '–≤—Ç–æ—Ä–Ω–∏–∫', '–≤—Ç', 'tue'],\n    'weekday-3': ['wednesday', '—Å—Ä–µ–¥–∞', '—Å—Ä', 'wed'],\n    'weekday-4': ['thursday', '—á–µ—Ç–≤–µ—Ä–≥', '—á—Ç', 'thu'],\n    'weekday-5': ['friday', '–ø—è—Ç–Ω–∏—Ü–∞', '–ø—Ç', 'fri'],\n    'weekday-6': ['saturday', '—Å—É–±–±–æ—Ç–∞', '—Å–±', 'sat']\n  };\n\n  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –º–µ—Å—è—Ü)\n  if (!isMonth) {\n    var weekdayKeys = Object.keys(weekdays);\n    for (var i = 0; i < weekdayKeys.length; i++) {\n      var weekday = weekdayKeys[i];\n      var synonyms = weekdays[weekday];\n      if (synonyms.indexOf(str) !== -1) {\n        return [weekday];\n      }\n    }\n  }\n\n  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –º–µ—Å—è—Ü)\n  if (!isMonth) {\n    if (str === 'last' || str === '–ø–æ—Å–ª–µ–¥–Ω–∏–π') {\n      return ['last'];\n    }\n    if (str === 'first' || str === '–ø–µ—Ä–≤—ã–π') {\n      return [1];\n    }\n    if (str === 'even' || str === '—á—ë—Ç–Ω—ã–µ' || str === '—á–µ—Ç–Ω—ã–µ') {\n      let result = [];\n      for (let i = 2; i <= 30; i += 2) {\n        result.push(i);\n      }\n      return result;\n    }\n    if (str === 'odd' || str === '–Ω–µ—á—ë—Ç–Ω—ã–µ' || str === '–Ω–µ—á–µ—Ç–Ω—ã–µ') {\n      let result = [];\n      for (let i = 1; i <= 31; i += 2) {\n        result.push(i);\n      }\n      return result;\n    }\n\n    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç last-N\n    const lastNMatch = str.match(/^(last|–ø–æ—Å–ª–µ–¥–Ω–∏–π)-(\\d+)$/);\n    if (lastNMatch) {\n      const n = parseInt(lastNMatch[2], 10);\n      if (!isNaN(n) && n > 0 && n < 31) {\n        return ['last-' + n];\n      }\n      return [];\n    }\n  }\n\n  // –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ –∑–∞–ø—è—Ç—ã–º –∏ –æ—á–∏—â–∞–µ–º –æ—Ç –ø—Ä–æ–±–µ–ª—ã\n  const parts = str.split(',').map(p => p.trim()).filter(p => p !== '');\n\n  if (parts.length === 0) {\n    return [];\n  }\n\n  const result = [];\n  const maxValue = isMonth ? 12 : 31;\n\n  const addUniqueValue = value => {\n    if (result.indexOf(value) === -1) {\n      result.push(value);\n    }\n  };\n\n  for (let part of parts) {\n    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, \"1-5\")\n    if (part.indexOf('-') !== -1) {\n      var rangeParts = part.split('-').map(n => parseInt(n, 10));\n      var start = rangeParts[0];\n      var end = rangeParts[1];\n\n      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω–∞\n      if (!isNaN(start) && !isNaN(end) && start > 0 && end <= maxValue && start <= end) {\n        for (let i = start; i <= end; i++) {\n          addUniqueValue(i);\n        }\n      }\n    } else {\n      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ —á–∏—Å–ª–∞\n      const num = parseInt(part, 10);\n      if (!isNaN(num) && num > 0 && num <= maxValue) {\n        addUniqueValue(num);\n      }\n    }\n  }\n\n  result.sort((a, b) => a - b);\n  return result;\n}\n\nfunction parseTime(str) {\n  var time = str || \"00:00\";\n  var hours, minutes;\n\n  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞\n  if (time.indexOf(',') !== -1) {\n    // –†–∞–∑–±–∏–≤–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –≤—Ä–µ–º—è –æ—Ç–¥–µ–ª—å–Ω–æ\n    let times = time.split(',').map(t => t.trim());\n    let validTimes = times.map(t => parseTime(t));\n    // –ï—Å–ª–∏ –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 00:00\n    if (validTimes.some(t => t.time === \"00:00\")) {\n      if (!inTestMode) {\n        console.warn(\"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ —Å–ø–∏—Å–∫–µ –≤—Ä–µ–º–µ–Ω: {}\", time);\n      }\n      return { time: \"00:00\", hoursStr: \"00\", minutesStr: \"00\" };\n    }\n    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏\n    return validTimes[times.indexOf(str.trim())] || validTimes[0];\n  }\n\n  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã\n  if (time.match(/[^0-9:]/)) {\n    if (!inTestMode) {\n      console.warn(\"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤–æ –≤—Ä–µ–º–µ–Ω–∏: {}\", time);\n    }\n    return { time: \"00:00\", hoursStr: \"00\", minutesStr: \"00\" };\n  }\n\n  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã X:X –∏ XX:XX\n  var timeMatch = time.match(/^(\\d{1,2}):(\\d{1,2})$/);\n  if (!timeMatch) {\n    if (!inTestMode) {\n      console.warn(\"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {}\", time);\n    }\n    return { time: \"00:00\", hoursStr: \"00\", minutesStr: \"00\" };\n  }\n\n  hours = parseInt(timeMatch[1], 10);\n  minutes = parseInt(timeMatch[2], 10);\n\n  if (hours < 0 || hours > 23 || minutes < 0 || minutes > 59) {\n    if (!inTestMode) {\n      console.warn(\"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è: {}. –ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 23, –º–∏–Ω—É—Ç—ã –æ—Ç 0 –¥–æ 59\", time);\n    }\n    return { time: \"00:00\", hoursStr: \"00\", minutesStr: \"00\" };\n  }\n\n  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏\n  var hoursStr = hours < 10 ? \"0\" + hours : \"\" + hours;\n  var minutesStr = minutes < 10 ? \"0\" + minutes : \"\" + minutes;\n  return {\n    time: hoursStr + \":\" + minutesStr,\n    hoursStr: hoursStr,\n    minutesStr: minutesStr\n  };\n}\n\nfunction isAutomaticChange(context) {\n  // –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —Å–∏–º–≤–æ–ª—É '<-'\n  const elements = context.toString().split(' <- ');\n  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –º–∞—Å—Å–∏–≤–µ\n  if (elements.length === 0) {\n    return false;\n  }\n  let last = elements[elements.length - 1];\n\n  // –£—Å–ª–æ–≤–∏–µ 1: –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'CLINK' –∏–ª–∏ 'HUB[OnStart]'\n  if (last.startsWith('CLINK') || last.startsWith('HUB[OnStart]')) {\n    return true;\n  }\n\n  // –£—Å–ª–æ–≤–∏–µ 2: –ü–µ—Ä–≤—ã–µ —Ç—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —à–∞–±–ª–æ–Ω—É 'LOGIC <- C <- LOGIC'\n  if (elements.length >= 3 &&\n    elements[0].startsWith('LOGIC') &&\n    elements[1].startsWith('C') &&\n    elements[2].startsWith('LOGIC')) {\n    return true;\n  }\n\n  // –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä—É—á–Ω–æ–µ\n  return false;\n}\n\n//#############################################################################\n//                                    –¢–ï–°–¢–´                                   #\n//#############################################################################\n\nlet isDeveloping = true; // –§–ª–∞–≥ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –í–∫–ª—é—á–∏—Ç—å —á—Ç–æ –±—ã —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω—è–ª–∏—Å—å.\n\nlet inTestMode = false;\nlet testCronCallbacks = [];\nlet originalDate = Date;\nlet mockDate = null;\n\nlet assert = global.assert; let assertNull = global.assertNull; let assertNotNull = global.assertNotNull; let assertEquals = global.assertEquals; let assertNotEquals = global.assertNotEquals; let assertTrue = global.assertTrue; let assertFalse = global.assertFalse; let assertDefined = global.assertDefined; let assertContains = global.assertContains; let assertEmpty = global.assertEmpty; let assertNotEmpty = global.assertNotEmpty; let assertLength = global.assertLength;\n\nfunction clearTestCronCallbacks() {\n  testCronCallbacks = [];\n}\n\nfunction runTestCronCallbacks() {\n  const now = new Date();\n  testCronCallbacks.forEach(task => {\n    if (shouldRunCron(task.pattern, now)) {\n      task.callback();\n    }\n  });\n}\n\nfunction shouldRunCron(pattern, now) {\n  const fields = pattern.trim().split(/\\s+/);\n  if (fields.length !== 6) {\n    console.warn(\"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Cron-–≤—ã—Ä–∞–∂–µ–Ω–∏—è:\", pattern);\n    return false;\n  }\n\n  const second = fields[0];\n  const minute = fields[1];\n  const hour = fields[2];\n  const dayOfMonth = fields[3];\n  const month = fields[4];\n  const dayOfWeek = fields[5];\n\n  const currentSecond = now.getSeconds();\n  const currentMinute = now.getMinutes();\n  const currentHour = now.getHours();\n  const currentDayOfMonth = now.getDate();\n  const currentMonth = now.getMonth() + 1; // –ú–µ—Å—è—Ü—ã –≤ JS —Å 0\n  const currentDayOfWeek = now.getDay();    // 0 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 6 - —Å—É–±–±–æ—Ç–∞\n\n  const matchField = (field, value) => {\n    if (field === '*') return true;\n    const values = field.split(',').map(v => parseInt(v, 10));\n    return values.some(v => !isNaN(v) && v === value);\n  };\n\n  return (\n    matchField(second, currentSecond) &&\n    matchField(minute, currentMinute) &&\n    matchField(hour, currentHour) &&\n    (dayOfMonth === '*' || matchField(dayOfMonth, currentDayOfMonth)) &&\n    (month === '*' || matchField(month, currentMonth)) &&\n    (dayOfWeek === '*' || matchField(dayOfWeek, currentDayOfWeek))\n  );\n}\n\nfunction setMockDate(date) {\n  mockDate = date;\n  let DateProxy = function () {\n    if (arguments.length === 0) {\n      return new originalDate(mockDate.getTime());\n    }\n    return new (Function.prototype.bind.apply(originalDate, [null].concat(Array.prototype.slice.call(arguments))));\n  };\n\n  // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞\n  Object.getOwnPropertyNames(originalDate).forEach(prop => {\n    DateProxy[prop] = originalDate[prop];\n  });\n\n  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ç–æ—Ç–∏–ø\n  DateProxy.prototype = Object.create(originalDate.prototype);\n  DateProxy.prototype.constructor = DateProxy;\n\n  // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥—ã –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞\n  let methods = [\n    'getTime', 'getDate', 'getDay', 'getFullYear', 'getHours',\n    'getMilliseconds', 'getMinutes', 'getMonth', 'getSeconds',\n    'getYear', 'toDateString', 'toISOString', 'toJSON',\n    'toLocaleDateString', 'toLocaleString', 'toLocaleTimeString',\n    'toString', 'toTimeString', 'toUTCString', 'valueOf'\n  ];\n\n  methods.forEach(method => {\n    DateProxy.prototype[method] = function () {\n      return mockDate[method].apply(mockDate, arguments);\n    };\n  });\n\n  // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º now()\n  DateProxy.now = () => mockDate.getTime();\n\n  // –ó–∞–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π Date\n  Date = DateProxy;\n}\n\nfunction restoreDate() {\n  Date = originalDate;\n  mockDate = null;\n}\n\nconst OriginalCron = Cron;\nCron = {\n  schedule: (pattern, callback) => {\n    if (inTestMode) {\n      testCronCallbacks.push({ pattern: pattern, callback: callback });\n      return {\n        clear: () => {\n          testCronCallbacks = testCronCallbacks.filter(\n            task => task.callback !== callback\n          );\n        }\n      };\n    }\n    return OriginalCron.schedule(pattern, callback);\n  }\n};\n\nfunction resetTestState() {\n  clearTestCronCallbacks();\n  restoreDate();\n}\n\n// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤\nfunction runTests() {\n  if (!isDeveloping || !global.hasUnitTests) {\n    return;\n  }\n\n  try {\n    inTestMode = true;\n\n    console.info(\"–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞\");\n\n    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞\n    console.info(\"–¢–µ—Å—Ç 1: –í–∫–ª—é—á–µ–Ω–∏–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é\");\n    test1_ScheduledTurnOn();\n\n    console.info(\"–¢–µ—Å—Ç 2: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é\");\n    test2_ScheduledTurnOff();\n\n    console.info(\"–¢–µ—Å—Ç 3: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞\");\n    test3_MultipleTimes();\n\n    console.info(\"–¢–µ—Å—Ç 4: –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞\");\n    test4_LastDayOfMonth();\n\n    console.info(\"–¢–µ—Å—Ç 5: Last-N –¥–Ω–µ–π\");\n    test5_LastNDays();\n\n    console.info(\"–¢–µ—Å—Ç 6: –ß–µ—Ç–Ω—ã–µ –¥–Ω–∏\");\n    test6_EvenDays();\n\n    console.info(\"–¢–µ—Å—Ç 7: –ù–µ—á–µ—Ç–Ω—ã–µ –¥–Ω–∏\");\n    test7_OddDays();\n\n    console.info(\"–¢–µ—Å—Ç 8: –î–Ω–∏ –Ω–µ–¥–µ–ª–∏\");\n    test8_Weekdays();\n\n    console.info(\"–¢–µ—Å—Ç 9: –†–∞–±–æ—Ç–∞ —Å HC.Active\");\n    test9_ActiveCharacteristic();\n\n    console.info(\"–¢–µ—Å—Ç 10: –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –∏ —á–∏—Å–µ–ª\");\n    test10_WeekdaysAndDays();\n\n    // Unit —Ç–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –ø–∞—Ä—Å–∏–Ω–≥–∞\n    console.info(\"–¢–µ—Å—Ç 11: –§—É–Ω–∫—Ü–∏—è parseTime\");\n    test11_ParseTime();\n\n    console.info(\"–¢–µ—Å—Ç 12: –§—É–Ω–∫—Ü–∏—è parseRange\");\n    test12_ParseRange();\n\n    console.info(\"–¢–µ—Å—Ç 13: –§—É–Ω–∫—Ü–∏—è isDayMatch\");\n    test13_IsDayMatch();\n  } finally {\n    inTestMode = false;\n    resetTestState();\n  }\n}\n\n// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞\nfunction getDefaultVariables() {\n  return {\n    cronTasksOn: [],\n    cronTasksOff: [],\n    prevTimeOn: undefined,\n    prevTimeOff: undefined\n  };\n}\n\n// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—è —Å HC.On\nfunction createTestSwitch() {\n  return global.createUnitTestFullAccessory({\n    id: 1,\n    name: \"–¢–µ—Å—Ç–æ–≤—ã–π –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å\",\n    room: \"–¢–µ—Å—Ç\",\n    services: [{\n      id: 10,\n      type: HS.Switch,\n      name: \"–í—ã–∫–ª—é—á–∞—Ç–µ–ª—å\",\n      characteristics: [{\n        id: 11,\n        type: HC.On,\n        value: false\n      }]\n    }]\n  });\n}\n\n// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å HC.Active\nfunction createTestActiveDevice() {\n  return global.createUnitTestFullAccessory({\n    id: 2,\n    name: \"–¢–µ—Å—Ç–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\",\n    room: \"–¢–µ—Å—Ç\",\n    services: [{\n      id: 20,\n      type: HS.Fan,\n      name: \"–í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä\",\n      characteristics: [{\n        id: 21,\n        type: HC.Active,\n        value: 0\n      }]\n    }]\n  });\n}\n\n// –ë–∞–∑–æ–≤—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤\nfunction getDefaultOptions() {\n  return {\n    ScheduleOn: false,\n    DaysOfMonthOn: \"\",\n    MondayOn: false,\n    TuesdayOn: false,\n    WednesdayOn: false,\n    ThursdayOn: false,\n    FridayOn: false,\n    SaturdayOn: false,\n    SundayOn: false,\n    TimeOn: \"\",\n    ActiveMonthsOn: \"1-12\",\n    ScheduleOff: false,\n    DaysOfMonthOff: \"\",\n    MondayOff: false,\n    TuesdayOff: false,\n    WednesdayOff: false,\n    ThursdayOff: false,\n    FridayOff: false,\n    SaturdayOff: false,\n    SundayOff: false,\n    TimeOff: \"\",\n    ActiveMonthsOff: \"1-12\",\n    SendNotifications: false,\n    Invert: false,\n    TurnOffDelay: 0,\n    MaintainState: false\n  };\n}\n\n// –¢–µ—Å—Ç 1: –í–∫–ª—é—á–µ–Ω–∏–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é\nfunction test1_ScheduledTurnOn() {\n  resetTestState();\n  let variables = getDefaultVariables();\n  let acc = createTestSwitch();\n  let source = acc.getService(HS.Switch).getCharacteristic(HC.On);\n\n  let options = getDefaultOptions();\n  options.ScheduleOn = true;\n  options.DaysOfMonthOn = \"1\";\n  options.TimeOn = \"12:00\";\n  options.ActiveMonthsOn = \"1-12\"; // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–µ—Å—è—Ü—ã\n\n  let mockDate = new Date(2024, 0, 1, 12, 0);\n  setMockDate(mockDate);\n\n  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ trigger\n  let activeMonths = parseRange(options.ActiveMonthsOn, true);\n  assertTrue(activeMonths.indexOf(1) !== -1, \"test1_ScheduledTurnOn: –Ø–Ω–≤–∞—Ä—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å–ø–∏—Å–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤\");\n\n  let daysOfMonth = parseRange(options.DaysOfMonthOn);\n  assertTrue(daysOfMonth.indexOf(1) !== -1, \"test1_ScheduledTurnOn: 1-–µ —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Å–ø–∏—Å–∫–µ –¥–Ω–µ–π\");\n\n  trigger(source, true, variables, options, \"LOGIC\");\n\n  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Å–ª–µ trigger\n  let now = new Date();\n  let nowMonth = now.getMonth() + 1;\n  let nowDay = now.getDate();\n\n  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –¥–µ–Ω—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–µ–º—ã–º\n  assertEquals(1, nowMonth, \"test1_ScheduledTurnOn: –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —è–Ω–≤–∞—Ä—å (1)\");\n  assertEquals(1, nowDay, \"test1_ScheduledTurnOn: –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1-–µ —á–∏—Å–ª–æ\");\n\n  runTestCronCallbacks();\n  assertTrue(source.getValue(), \"test1_ScheduledTurnOn: –í—ã–∫–ª—é—á–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω –≤ 12:00\");\n}\n\n// –¢–µ—Å—Ç 2: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é\nfunction test2_ScheduledTurnOff() {\n  resetTestState();\n  let variables = getDefaultVariables();\n  let acc = createTestSwitch();\n  let source = acc.getService(HS.Switch).getCharacteristic(HC.On);\n\n  source.setValue(true);\n  let options = getDefaultOptions();\n  options.ScheduleOff = true;\n  options.DaysOfMonthOff = \"1\";\n  options.TimeOff = \"15:00\";\n\n  trigger(source, true, variables, options, \"LOGIC\");\n  setMockDate(new Date(2024, 0, 1, 15, 0));\n  runTestCronCallbacks();\n  assertFalse(source.getValue(), \"test2_ScheduledTurnOff: –í—ã–∫–ª—é—á–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∫–ª—é—á–µ–Ω –≤ 15:00\");\n}\n\n// –¢–µ—Å—Ç 3: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞\nfunction test3_MultipleTimes() {\n  resetTestState();\n  let variables = getDefaultVariables();\n  let acc = createTestSwitch();\n  let source = acc.getService(HS.Switch).getCharacteristic(HC.On);\n\n  let options = getDefaultOptions();\n  options.ScheduleOn = true;\n  options.ScheduleOff = true;\n  options.DaysOfMonthOn = \"1\";\n  options.DaysOfMonthOff = \"1\";\n  options.TimeOn = \"09:00, 15:00, 21:00\";\n  options.TimeOff = \"12:00, 18:00, 23:00\";\n  options.ActiveMonthsOn = \"1-12\";\n  options.ActiveMonthsOff = \"1-12\";\n\n  // –ù–∞—á–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è\n  source.setValue(false);\n\n  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω–∏–µ –≤ 9:00\n  let date9am = new Date(2024, 0, 1, 9, 0);\n  setMockDate(date9am);\n  trigger(source, false, variables, options, \"LOGIC\");\n  runTestCronCallbacks();\n  assertTrue(source.getValue(), \"test3_MultipleTimes: –í—ã–∫–ª—é—á–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω –≤ 9:00\");\n\n  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –≤ 12:00\n  let date12pm = new Date(2024, 0, 1, 12, 0);\n  setMockDate(date12pm);\n  trigger(source, source.getValue(), variables, options, \"LOGIC\");\n  runTestCronCallbacks();\n  assertFalse(source.getValue(), \"test3_MultipleTimes: –í—ã–∫–ª—é—á–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∫–ª—é—á–µ–Ω –≤ 12:00\");\n\n  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω–∏–µ –≤ 15:00\n  let date3pm = new Date(2024, 0, 1, 15, 0);\n  setMockDate(date3pm);\n  trigger(source, source.getValue(), variables, options, \"LOGIC\");\n  runTestCronCallbacks();\n  assertTrue(source.getValue(), \"test3_MultipleTimes: –í—ã–∫–ª—é—á–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω –≤ 15:00\");\n\n  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –≤ 18:00\n  let date6pm = new Date(2024, 0, 1, 18, 0);\n  setMockDate(date6pm);\n  trigger(source, source.getValue(), variables, options, \"LOGIC\");\n  runTestCronCallbacks();\n  assertFalse(source.getValue(), \"test3_MultipleTimes: –í—ã–∫–ª—é—á–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∫–ª—é—á–µ–Ω –≤ 18:00\");\n\n  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω–∏–µ –≤ 21:00\n  let date9pm = new Date(2024, 0, 1, 21, 0);\n  setMockDate(date9pm);\n  trigger(source, source.getValue(), variables, options, \"LOGIC\");\n  runTestCronCallbacks();\n  assertTrue(source.getValue(), \"test3_MultipleTimes: –í—ã–∫–ª—é—á–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω –≤ 21:00\");\n\n  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –≤ 23:00\n  let date11pm = new Date(2024, 0, 1, 23, 0);\n  setMockDate(date11pm);\n  trigger(source, source.getValue(), variables, options, \"LOGIC\");\n  runTestCronCallbacks();\n  assertFalse(source.getValue(), \"test3_MultipleTimes: –í—ã–∫–ª—é—á–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∫–ª—é—á–µ–Ω –≤ 23:00\");\n}\n\n// –¢–µ—Å—Ç 4: –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞\nfunction test4_LastDayOfMonth() {\n  resetTestState();\n  let variables = getDefaultVariables();\n  let acc = createTestSwitch();\n  let source = acc.getService(HS.Switch).getCharacteristic(HC.On);\n\n  let options = getDefaultOptions();\n  options.ScheduleOn = true;\n  options.DaysOfMonthOn = \"last\";\n  options.TimeOn = \"15:00\";\n\n  trigger(source, true, variables, options, \"LOGIC\");\n  setMockDate(new Date(2024, 0, 31, 15, 0));\n  runTestCronCallbacks();\n  assertTrue(source.getValue(), \"test4_LastDayOfMonth: –î–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å—Å—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞\");\n}\n\n// –¢–µ—Å—Ç 5: Last-N –¥–Ω–µ–π\nfunction test5_LastNDays() {\n  resetTestState();\n  let variables = getDefaultVariables();\n  let acc = createTestSwitch();\n  let source = acc.getService(HS.Switch).getCharacteristic(HC.On);\n\n  let options = getDefaultOptions();\n  options.ScheduleOn = true;\n  options.DaysOfMonthOn = \"last-2\";\n  options.TimeOn = \"15:00\";\n\n  trigger(source, true, variables, options, \"LOGIC\");\n  setMockDate(new Date(2024, 0, 29, 15, 0));\n  runTestCronCallbacks();\n  assertTrue(source.getValue(), \"test5_LastNDays: –î–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å—Å—è –∑–∞ 2 –¥–Ω—è –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞\");\n}\n\n// –¢–µ—Å—Ç 6: –ß–µ—Ç–Ω—ã–µ –¥–Ω–∏\nfunction test6_EvenDays() {\n  resetTestState();\n  let variables = getDefaultVariables();\n  let acc = createTestSwitch();\n  let source = acc.getService(HS.Switch).getCharacteristic(HC.On);\n\n  let options = getDefaultOptions();\n  options.ScheduleOn = true;\n  options.DaysOfMonthOn = \"even\";\n  options.TimeOn = \"15:00\";\n\n  trigger(source, true, variables, options, \"LOGIC\");\n  setMockDate(new Date(2024, 0, 2, 15, 0));\n  runTestCronCallbacks();\n  assertTrue(source.getValue(), \"test6_EvenDays: –î–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å—Å—è –≤ —á–µ—Ç–Ω—ã–π –¥–µ–Ω—å\");\n}\n\n// –¢–µ—Å—Ç 7: –ù–µ—á–µ—Ç–Ω—ã–µ –¥–Ω–∏\nfunction test7_OddDays() {\n  resetTestState();\n  let variables = getDefaultVariables();\n  let acc = createTestSwitch();\n  let source = acc.getService(HS.Switch).getCharacteristic(HC.On);\n\n  let options = getDefaultOptions();\n  options.ScheduleOn = true;\n  options.DaysOfMonthOn = \"odd\";\n  options.TimeOn = \"15:00\";\n\n  trigger(source, true, variables, options, \"LOGIC\");\n  setMockDate(new Date(2024, 0, 3, 15, 0));\n  runTestCronCallbacks();\n  assertTrue(source.getValue(), \"test7_OddDays: –î–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å—Å—è –≤ –Ω–µ—á–µ—Ç–Ω—ã–π –¥–µ–Ω—å\");\n}\n\n// –¢–µ—Å—Ç 8: –î–Ω–∏ –Ω–µ–¥–µ–ª–∏\nfunction test8_Weekdays() {\n  resetTestState();\n  let variables = getDefaultVariables();\n  let acc = createTestSwitch();\n  let source = acc.getService(HS.Switch).getCharacteristic(HC.On);\n\n  let options = getDefaultOptions();\n  options.ScheduleOn = true;\n  options.MondayOn = true;\n  options.TimeOn = \"15:00\";\n\n  trigger(source, true, variables, options, \"LOGIC\");\n  setMockDate(new Date(2024, 0, 1, 15, 0)); // 1 —è–Ω–≤–∞—Ä—è 2024 - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫\n  runTestCronCallbacks();\n  assertTrue(source.getValue(), \"test8_Weekdays: –î–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å—Å—è –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫\");\n}\n\n// –¢–µ—Å—Ç 9: –†–∞–±–æ—Ç–∞ —Å HC.Active\nfunction test9_ActiveCharacteristic() {\n  resetTestState();\n  let variables = getDefaultVariables();\n  let acc = createTestActiveDevice();\n  let source = acc.getService(HS.Fan).getCharacteristic(HC.Active);\n\n  let options = getDefaultOptions();\n  options.ScheduleOn = true;\n  options.DaysOfMonthOn = \"1\";\n  options.TimeOn = \"12:00\";\n\n  trigger(source, true, variables, options, \"LOGIC\");\n  setMockDate(new Date(2024, 0, 1, 12, 0));\n  runTestCronCallbacks();\n  assertEquals(1, source.getValue(), \"test9_ActiveCharacteristic: –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ (–∑–Ω–∞—á–µ–Ω–∏–µ 1)\");\n\n  resetTestState();\n  variables = getDefaultVariables();\n  options = getDefaultOptions();\n  options.ScheduleOff = true;\n  options.DaysOfMonthOff = \"1\";\n  options.TimeOff = \"13:00\";\n\n  source.setValue(1);\n  trigger(source, true, variables, options, \"LOGIC\");\n  setMockDate(new Date(2024, 0, 1, 13, 0));\n  runTestCronCallbacks();\n  assertEquals(0, source.getValue(), \"test9_ActiveCharacteristic: –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ (–∑–Ω–∞—á–µ–Ω–∏–µ 0)\");\n}\n\n// –¢–µ—Å—Ç 10: –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –∏ —á–∏—Å–µ–ª\nfunction test10_WeekdaysAndDays() {\n  resetTestState();\n  let variables = getDefaultVariables();\n  let acc = createTestSwitch();\n  let source = acc.getService(HS.Switch).getCharacteristic(HC.On);\n\n  let options = getDefaultOptions();\n  options.ScheduleOn = true;\n  options.DaysOfMonthOn = \"1,15\";\n  options.MondayOn = true;\n  options.TimeOn = \"15:00\";\n\n  setMockDate(new Date(2024, 0, 1, 15, 0));\n  trigger(source, true, variables, options, \"LOGIC\");\n\n  runTestCronCallbacks();\n  assertTrue(source.getValue(), \"test10_WeekdaysAndDays: –î–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å—Å—è 1- –≥–æ —á–∏—Å–ª–∞\");\n\n  variables = getDefaultVariables();\n  source.setValue(false);\n  setMockDate(new Date(2024, 0, 8, 15, 0));\n  trigger(source, true, variables, options, \"LOGIC\");\n  runTestCronCallbacks();\n  assertTrue(source.getValue(), \"test10_WeekdaysAndDays: –î–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å—Å—è –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫\");\n}\n\n// –¢–µ—Å—Ç 11: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã\nfunction test11_InvalidFormats() {\n  resetTestState();\n  let variables = getDefaultVariables();\n  let acc = createTestSwitch();\n  let source = acc.getService(HS.Switch).getCharacteristic(HC.On);\n\n  // –¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏\n  let options = getDefaultOptions();\n  options.ScheduleOn = true;\n  options.DaysOfMonthOn = \"1\";\n  options.TimeOn = \"25:00\"; // –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –≤—Ä–µ–º—è\n\n  trigger(source, true, variables, options, \"LOGIC\");\n  setMockDate(new Date(2024, 0, 1, 0, 0));\n  runTestCronCallbacks();\n  assertFalse(source.getValue(), \"test11_InvalidFormats: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å—Å—è –ø—Ä–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\");\n\n  // –¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞\n  resetTestState();\n  variables = getDefaultVariables();\n  options = getDefaultOptions();\n  options.ScheduleOn = true;\n  options.DaysOfMonthOn = \"32\"; // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –¥–µ–Ω—å\n  options.TimeOn = \"12:00\";\n\n  trigger(source, true, variables, options, \"LOGIC\");\n  setMockDate(new Date(2024, 0, 1, 12, 0));\n  runTestCronCallbacks();\n  assertFalse(source.getValue(), \"test11_InvalidFormats: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å—Å—è –ø—Ä–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º –¥–Ω–µ –º–µ—Å—è—Ü–∞\");\n\n  // –¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ last-N\n  resetTestState();\n  variables = getDefaultVariables();\n  options = getDefaultOptions();\n  options.ScheduleOn = true;\n  options.DaysOfMonthOn = \"last-32\"; // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç last-N\n  options.TimeOn = \"12:00\";\n\n  trigger(source, true, variables, options, \"LOGIC\");\n  setMockDate(new Date(2024, 0, 1, 12, 0));\n  runTestCronCallbacks();\n  assertFalse(source.getValue(), \"test11_InvalidFormats: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å—Å—è –ø—Ä–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ last-N\");\n}\n\n// Unit —Ç–µ—Å—Ç –¥–ª—è parseTime\nfunction test11_ParseTime() {\n  // –í–∞–ª–∏–¥–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã\n  let validTimes = [\n    { input: \"0:0\", expected: { time: \"00:00\", hoursStr: \"00\", minutesStr: \"00\" } },\n    { input: \"9:5\", expected: { time: \"09:05\", hoursStr: \"09\", minutesStr: \"05\" } },\n    { input: \"23:59\", expected: { time: \"23:59\", hoursStr: \"23\", minutesStr: \"59\" } },\n    { input: \"12:00\", expected: { time: \"12:00\", hoursStr: \"12\", minutesStr: \"00\" } },\n    { input: \"9:00, 15:30, 18:45\", expected: { time: \"09:00\", hoursStr: \"09\", minutesStr: \"00\" } }\n  ];\n\n  validTimes.forEach(test => {\n    let result = parseTime(test.input);\n    assertEquals(test.expected.time, result.time, `test11_ParseTime: –í—Ä–µ–º—è \"${test.input}\" –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ \"${test.expected.time}\"`);\n    assertEquals(test.expected.hoursStr, result.hoursStr, `test11_ParseTime: –ß–∞—Å—ã –¥–ª—è \"${test.input}\" –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å \"${test.expected.hoursStr}\"`);\n    assertEquals(test.expected.minutesStr, result.minutesStr, `test11_ParseTime: –ú–∏–Ω—É—Ç—ã –¥–ª—è \"${test.input}\" –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å \"${test.expected.minutesStr}\"`);\n  });\n\n  // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã\n  let invalidTimes = [\n    \"24:00\",    // –ß–∞—Å—ã –±–æ–ª—å—à–µ 23\n    \"12:60\",    // –ú–∏–Ω—É—Ç—ã –±–æ–ª—å—à–µ 59\n    \"12:12:12\", // –õ–∏—à–Ω–∏–µ –¥–≤–æ–µ—Ç–æ—á–∏—è\n    \"abc\",      // –ù–µ—á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç\n    \"12.00\",    // –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å\n    \"-1:00\",    // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è\n    \"12:\",      // –ù–µ–ø–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n    \":30\",      // –ù–µ–ø–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n    \"\",         // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞\n    \"  \"        // –¢–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã\n  ];\n\n  invalidTimes.forEach(time => {\n    let result = parseTime(time);\n    assertEquals(\"00:00\", result.time, `test11_ParseTime: –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –≤—Ä–µ–º—è \"${time}\" –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ \"00:00\"`);\n    assertEquals(\"00\", result.hoursStr, `test11_ParseTime: –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –≤—Ä–µ–º—è \"${time}\" –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å —á–∞—Å—ã \"00\"`);\n    assertEquals(\"00\", result.minutesStr, `test11_ParseTime: –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –≤—Ä–µ–º—è \"${time}\" –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –º–∏–Ω—É—Ç—ã \"00\"`);\n  });\n}\n\n// Unit —Ç–µ—Å—Ç –¥–ª—è parseRange\nfunction test12_ParseRange() {\n  // –¢–µ—Å—Ç –¥–ª—è –º–µ—Å—è—Ü–µ–≤\n  let monthRanges = [\n    { input: \"1-12\", expected: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], isMonth: true },\n    { input: \"1,6,12\", expected: [1, 6, 12], isMonth: true },\n    { input: \"13\", expected: [], isMonth: true },  // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –º–µ—Å—è—Ü\n    { input: \"0\", expected: [], isMonth: true },   // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –º–µ—Å—è—Ü\n    { input: \"1-13\", expected: [], isMonth: true } // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω\n  ];\n\n  monthRanges.forEach(test => {\n    let result = parseRange(test.input, test.isMonth);\n    assertLength(test.expected, result.length, `test12_ParseRange: –î–∏–∞–ø–∞–∑–æ–Ω –º–µ—Å—è—Ü–µ–≤ \"${test.input}\" –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å ${test.expected.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);\n    test.expected.forEach((value, index) => {\n      assertEquals(value, result[index], `test12_ParseRange: –ú–µ—Å—è—Ü ${index} –¥–∏–∞–ø–∞–∑–æ–Ω–∞ \"${test.input}\" –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ${value}`);\n    });\n  });\n\n  // –¢–µ—Å—Ç –¥–ª—è –¥–Ω–µ–π\n  let validRanges = [\n    { input: \"1\", expected: [1] },\n    { input: \"1-5\", expected: [1, 2, 3, 4, 5] },\n    { input: \"1,15,30\", expected: [1, 15, 30] },\n    { input: \"last\", expected: [\"last\"] },\n    { input: \"–ø–æ—Å–ª–µ–¥–Ω–∏–π\", expected: [\"last\"] },\n    { input: \"first\", expected: [1] },\n    { input: \"–ø–µ—Ä–≤—ã–π\", expected: [1] },\n    { input: \"last-2\", expected: [\"last-2\"] },\n    { input: \"–ø–æ—Å–ª–µ–¥–Ω–∏–π-2\", expected: [\"last-2\"] },\n    { input: \"even\", expected: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30] },\n    { input: \"—á—ë—Ç–Ω—ã–µ\", expected: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30] },\n    { input: \"odd\", expected: [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31] },\n    { input: \"–Ω–µ—á—ë—Ç–Ω—ã–µ\", expected: [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31] },\n    { input: \"monday\", expected: [\"weekday-1\"] },\n    { input: \"–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫\", expected: [\"weekday-1\"] },\n    { input: \"sunday\", expected: [\"weekday-0\"] },\n    { input: \"–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ\", expected: [\"weekday-0\"] },\n    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—è—Ç—ã—Ö\n    { input: \"1,,2\", expected: [1, 2] },\n    { input: \"1,2,\", expected: [1, 2] },\n    { input: \",1,2\", expected: [1, 2] },\n    { input: \"1.5\", expected: [1] }\n  ];\n\n  validRanges.forEach(test => {\n    let result = parseRange(test.input);\n    assertLength(test.expected, result.length, `test12_ParseRange: –î–∏–∞–ø–∞–∑–æ–Ω \"${test.input}\" –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å ${test.expected.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);\n    test.expected.forEach((value, index) => {\n      assertEquals(value, result[index], `test12_ParseRange: –≠–ª–µ–º–µ–Ω—Ç ${index} –¥–∏–∞–ø–∞–∑–æ–Ω–∞ \"${test.input}\" –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ${value}`);\n    });\n  });\n\n  // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤\n  let invalidRanges = [\n    \"32\",           // –î–µ–Ω—å –±–æ–ª—å—à–µ 31\n    \"0\",            // –î–µ–Ω—å –º–µ–Ω—å—à–µ 1\n    \"1-32\",         // –ö–æ–Ω–µ—Ü –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –±–æ–ª—å—à–µ 31\n    \"5-1\",          // –û–±—Ä–∞—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω\n    \"abc\",          // –ù–µ—á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç\n    \"last-32\",      // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π last-N\n    \"last-0\",       // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π last-N\n    \"invalid-day\"   // –ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏\n  ];\n\n  invalidRanges.forEach(range => {\n    let result = parseRange(range);\n    assertEmpty(result, `test12_ParseRange: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω \"${range}\" –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤`);\n  });\n}\n\n// Unit —Ç–µ—Å—Ç –¥–ª—è isDayMatch\nfunction test13_IsDayMatch() {\n  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞—Ç—ã\n  let january31 = new Date(2024, 0, 31); // –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å —è–Ω–≤–∞—Ä—è\n  let january29 = new Date(2024, 0, 29); // –ó–∞ 2 –¥–Ω—è –¥–æ –∫–æ–Ω—Ü–∞ —è–Ω–≤–∞—Ä—è\n  let january15 = new Date(2024, 0, 15); // –°–µ—Ä–µ–¥–∏–Ω–∞ –º–µ—Å—è—Ü–∞\n  let monday = new Date(2024, 0, 1);     // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫\n  let sunday = new Date(2024, 0, 7);     // –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ\n\n  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–Ω—è\n  assertTrue(isDayMatch('last', january31), \"test13_IsDayMatch: 31 —è–Ω–≤–∞—Ä—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º –¥–Ω–µ–º\");\n  assertFalse(isDayMatch('last', january15), \"test13_IsDayMatch: 15 —è–Ω–≤–∞—Ä—è –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º –¥–Ω–µ–º\");\n\n  // –ü—Ä–æ–≤–µ—Ä–∫–∞ last-N\n  assertTrue(isDayMatch('last-2', january29), \"test13_IsDayMatch: 29 —è–Ω–≤–∞—Ä—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞ 2 –¥–Ω—è –¥–æ –∫–æ–Ω—Ü–∞\");\n  assertFalse(isDayMatch('last-2', january31), \"test13_IsDayMatch: 31 —è–Ω–≤–∞—Ä—è –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞ 2 –¥–Ω—è –¥–æ –∫–æ–Ω—Ü–∞\");\n\n  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏\n  assertTrue(isDayMatch('weekday-1', monday), \"test13_IsDayMatch: 1 —è–Ω–≤–∞—Ä—è 2024 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–æ–º\");\n  assertTrue(isDayMatch('weekday-0', sunday), \"test13_IsDayMatch: 7 —è–Ω–≤–∞—Ä—è 2024 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ–º\");\n  assertFalse(isDayMatch('weekday-1', sunday), \"test13_IsDayMatch: 7 —è–Ω–≤–∞—Ä—è 2024 –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–æ–º\");\n\n  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ã—á–Ω—ã—Ö –¥–Ω–µ–π\n  assertTrue(isDayMatch('15', january15), \"test13_IsDayMatch: –î–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å 15 —á–∏—Å–ª–æ–º\");\n  assertFalse(isDayMatch('16', january15), \"test13_IsDayMatch: –ù–µ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å 16 —á–∏—Å–ª–æ–º\");\n\n  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π\n  assertFalse(isDayMatch('invalid', january15), \"test13_IsDayMatch: –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å false\");\n  assertFalse(isDayMatch('32', january15), \"test13_IsDayMatch: –î–µ–Ω—å –±–æ–ª—å—à–µ 31 –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å false\");\n  assertFalse(isDayMatch('0', january15), \"test13_IsDayMatch: –î–µ–Ω—å –º–µ–Ω—å—à–µ 1 –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å false\");\n  assertFalse(isDayMatch('weekday-7', january15), \"test13_IsDayMatch: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å false\");\n}\n\n// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ü–µ–Ω–∞—Ä–∏—è\nrunTests();",
    "type": "LOGIC"
  }
}