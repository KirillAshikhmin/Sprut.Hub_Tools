info = {
  name: "üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π",
  description: "–í–∫–ª—é—á–∞–µ—Ç –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å –≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–Ω–∏ –º–µ—Å—è—Ü–∞ –∏/–∏–ª–∏ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏. –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ https://t.me/smart_sputnik",
  version: "2.1",
  author: "@BOOMikru",
  onStart: true,
  sourceServices: [
    HS.Switch, HS.Outlet, HS.Fan, HS.FanBasic, HS.Lightbulb,
    HS.Faucet, HS.C_PetFeeder, HS.Valve, HS.HeaterCooler, HS.AirPurifier,
    HS.IrrigationSystem, HS.Television, HS.HumidifierDehumidifier, HS.CameraControl
  ],
  sourceCharacteristics: [HC.On, HC.Active],
  options: {
    ScheduleOn: { type: "Boolean", value: true, name: { ru: "–í–∫–ª—é—á–∞—Ç—å –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É", en: "Schedule turn on" }, desc: { ru: "–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –±—É–¥–µ—Ç –≤–∫–ª—é—á–∞—Ç—å—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.", en: "If enabled, the device will turn on according to the schedule." } },
    DaysOfMonthOn: { type: "String", value: "1-31", name: { ru: "  –î–Ω–∏ –º–µ—Å—è—Ü–∞ (–≤–∫–ª)", en: "  Days of month (turn on)" }, desc: { ru: "–ß–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '1', '15, 30' –∏–ª–∏ '1-5').\n–¢–∞–∫–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n- '–ø–æ—Å–ª–µ–¥–Ω–∏–π' - –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞\n- '–ø–µ—Ä–≤—ã–π' - –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞\n- '—á—ë—Ç–Ω—ã–µ' - —á—ë—Ç–Ω—ã–µ —á–∏—Å–ª–∞\n- '–Ω–µ—á—ë—Ç–Ω—ã–µ' - –Ω–µ—á—ë—Ç–Ω—ã–µ —á–∏—Å–ª–∞\n- '–ø–æ—Å–ª–µ–¥–Ω–∏–π-N' - N-–π –¥–µ–Ω—å —Å –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞\n- –ù–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞' –∏ —Ç.–¥. –∏–ª–∏ —Å–æ–∫—Ä–∞—â—ë–Ω–Ω–æ '–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±', '–≤—Å')\n–í–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –∏ —É–∫–∞–∑–∞–Ω–Ω—ã–º —á–∏—Å–ª–∞–º.", en: "Days of the month to turn on (e.g., '1', '15, 30' or '1-5').\nSpecial values are also supported:\n- 'last' - last day of the month\n- 'first' - first day of the month\n- 'even' - even days\n- 'odd' - odd days\n- 'last-N' - Nth day from the end of the month\n- Weekday names (e.g., 'monday', 'tuesday', 'wednesday', etc.)\nActivation occurs on selected weekdays and specified days." } },
    MondayOn: { type: "Boolean", value: false, name: { ru: "‚ÄÉ‚ÄÉ–ö–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ (–≤–∫–ª)", en: "‚ÄÉ‚ÄÉEvery Monday (turn on)" }, desc: { ru: "", en: "" } },
    TuesdayOn: { type: "Boolean", value: false, name: { ru: "‚ÄÉ‚ÄÉ–ö–∞–∂–¥—ã–π –≤—Ç–æ—Ä–Ω–∏–∫ (–≤–∫–ª)", en: "‚ÄÉ‚ÄÉEvery Tuesday (turn on)" }, desc: { ru: "", en: "" } },
    WednesdayOn: { type: "Boolean", value: false, name: { ru: "‚ÄÉ‚ÄÉ–ö–∞–∂–¥—É—é —Å—Ä–µ–¥—É (–≤–∫–ª)", en: "‚ÄÉ‚ÄÉEvery Wednesday (turn on)" }, desc: { ru: "", en: "" } },
    ThursdayOn: { type: "Boolean", value: false, name: { ru: "‚ÄÉ‚ÄÉ–ö–∞–∂–¥—ã–π —á–µ—Ç–≤–µ—Ä–≥ (–≤–∫–ª)", en: "‚ÄÉ‚ÄÉEvery Thursday (turn on)" }, desc: { ru: "", en: "" } },
    FridayOn: { type: "Boolean", value: false, name: { ru: "‚ÄÉ‚ÄÉ–ö–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É (–≤–∫–ª)", en: "‚ÄÉ‚ÄÉEvery Friday (turn on)" }, desc: { ru: "", en: "" } },
    SaturdayOn: { type: "Boolean", value: false, name: { ru: "‚ÄÉ‚ÄÉ–ö–∞–∂–¥—É—é —Å—É–±–±–æ—Ç—É (–≤–∫–ª)", en: "‚ÄÉ‚ÄÉEvery Saturday (turn on)" }, desc: { ru: "", en: "" } },
    SundayOn: { type: "Boolean", value: false, name: { ru: "‚ÄÉ‚ÄÉ–ö–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ (–≤–∫–ª)", en: "‚ÄÉ‚ÄÉEvery Sunday (turn on)" }, desc: { ru: "", en: "" } },
    ActiveMonthsOn: { type: "String", value: "1-12", name: { ru: "‚ÄÉ‚ÄÉ–ê–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Å—è—Ü—ã (–≤–∫–ª)", en: "‚ÄÉ‚ÄÉActive months (turn on)" }, desc: { ru: "–ú–µ—Å—è—Ü—ã, –∫–æ–≥–¥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '1', '1, 6, 12' –∏–ª–∏ '6-8').\n–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü.", en: "Months when the device should turn on (e.g., '1', '1, 6, 12' or '6-8').\nBy default every month." } },
    TimeOn: { type: "String", value: "00:00", name: { ru: "‚ÄÉ‚ÄÉ–í—Ä–µ–º—è (–ß–ß:–ú–ú) (–≤–∫–ª)", en: "‚ÄÉ‚ÄÉTime (HH:MM) (turn on)" }, desc: { ru: "–í—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –≤–∫–ª—é—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '08:00, 12:00, 18:00').\n–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π —á–µ—Ä–µ–∑ '–ê–∫—Ç–∏–≤–Ω–æ' –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.", en: "Times when turn on occurs (e.g., '08:00, 12:00, 18:00').\nMultiple times can be separated by commas. Restart the script via 'Active' toggle after changing." } },
    ScheduleOff: { type: "Boolean", value: true, name: { ru: "–û—Ç–∫–ª—é—á–∞—Ç—å –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É", en: "Schedule turn off" }, desc: { ru: "–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–∞—Ç—å—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.", en: "If enabled, the device will turn off according to the schedule." } },
    DaysOfMonthOff: { type: "String", value: "1-31", name: { ru: "  –î–Ω–∏ –º–µ—Å—è—Ü–∞ (–æ—Ç–∫–ª)", en: "  Days of month (turn off)" }, desc: { ru: "–ß–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ –∂–µ —Ñ–æ—Ä–º–∞—Ç—ã –∑–Ω–∞—á–µ–Ω–∏–π, —á—Ç–æ –∏ –ø–æ–ª–µ '–î–Ω–∏ –º–µ—Å—è—Ü–∞ (–≤–∫–ª)'.\n–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –∏ —É–∫–∞–∑–∞–Ω–Ω—ã–º —á–∏—Å–ª–∞–º.", en: "Days of the month to turn off. Supports the same value formats as 'Days of month (turn on)' field.\nDeactivation occurs on selected weekdays and specified days." } },
    MondayOff: { type: "Boolean", value: false, name: { ru: "‚ÄÉ‚ÄÉ–ö–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ (–æ—Ç–∫–ª)", en: "‚ÄÉ‚ÄÉEvery Monday (turn off)" }, desc: { ru: "", en: "" } },
    TuesdayOff: { type: "Boolean", value: false, name: { ru: "‚ÄÉ‚ÄÉ–ö–∞–∂–¥—ã–π –≤—Ç–æ—Ä–Ω–∏–∫ (–æ—Ç–∫–ª)", en: "‚ÄÉ‚ÄÉEvery Tuesday (turn off)" }, desc: { ru: "", en: "" } },
    WednesdayOff: { type: "Boolean", value: false, name: { ru: "‚ÄÉ‚ÄÉ–ö–∞–∂–¥—É—é —Å—Ä–µ–¥—É (–æ—Ç–∫–ª)", en: "‚ÄÉ‚ÄÉEvery Wednesday (turn off)" }, desc: { ru: "", en: "" } },
    ThursdayOff: { type: "Boolean", value: false, name: { ru: "‚ÄÉ‚ÄÉ–ö–∞–∂–¥—ã–π —á–µ—Ç–≤–µ—Ä–≥ (–æ—Ç–∫–ª)", en: "‚ÄÉ‚ÄÉEvery Thursday (turn off)" }, desc: { ru: "", en: "" } },
    FridayOff: { type: "Boolean", value: false, name: { ru: "‚ÄÉ‚ÄÉ–ö–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É (–æ—Ç–∫–ª)", en: "‚ÄÉ‚ÄÉEvery Friday (turn off)" }, desc: { ru: "", en: "" } },
    SaturdayOff: { type: "Boolean", value: false, name: { ru: "‚ÄÉ‚ÄÉ–ö–∞–∂–¥—É—é —Å—É–±–±–æ—Ç—É (–æ—Ç–∫–ª)", en: "‚ÄÉ‚ÄÉEvery Saturday (turn off)" }, desc: { ru: "", en: "" } },
    SundayOff: { type: "Boolean", value: false, name: { ru: "‚ÄÉ‚ÄÉ–ö–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ (–æ—Ç–∫–ª)", en: "‚ÄÉ‚ÄÉEvery Sunday (turn off)" }, desc: { ru: "", en: "" } },
    ActiveMonthsOff: { type: "String", value: "1-12", name: { ru: "‚ÄÉ‚ÄÉ–ê–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Å—è—Ü—ã (–æ—Ç–∫–ª)", en: "‚ÄÉ‚ÄÉActive months (turn off)" }, desc: { ru: "–ú–µ—Å—è—Ü—ã, –∫–æ–≥–¥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –æ—Ç–∫–ª—é—á–∞—Ç—å—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '1', '1, 6, 12' –∏–ª–∏ '6-8').\n–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü.", en: "Months when the device should turn off (e.g., '1', '1, 6, 12' or '6-8').\nBy default every month." } },
    TimeOff: { type: "String", value: "00:00", name: { ru: "‚ÄÉ‚ÄÉ–í—Ä–µ–º—è (–ß–ß:–ú–ú) (–æ—Ç–∫–ª)", en: "‚ÄÉ‚ÄÉTime (HH:MM) (turn off)" }, desc: { ru: "–í—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '09:00, 13:00, 19:00').\n–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π —á–µ—Ä–µ–∑ '–ê–∫—Ç–∏–≤–Ω–æ' –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.", en: "Times when turn off occurs (e.g., '09:00, 13:00, 19:00').\nMultiple times can be separated by commas. Restart the script via 'Active' toggle after changing." } },
    Invert: { type: "Boolean", value: false, name: { ru: "–ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ", en: "Invert" }, desc: { ru: "–í–º–µ—Å—Ç–æ –≤–∫–ª—é—á–µ–Ω–∏—è –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–∞—Ç—å—Å—è, –∞ –≤–º–µ—Å—Ç–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è - –≤–∫–ª—é—á–∞—Ç—å—Å—è", en: "Instead of turning on it will turn off, and instead of turning off it will turn on" } },
    TurnOffDelay: { type: "Integer", value: 0, name: { ru: "–í—ã–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–∑ (—Å–µ–∫—É–Ω–¥—ã)", en: "Turn off delay (seconds)" }, desc: { ru: "–ü–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ 0, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–∫–ª—é—á–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ '–û—Ç–∫–ª—é—á–∞—Ç—å –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É'.", en: "Delay in seconds before turning off after activation. Set to 0 to disable automatic turn-off.\nDoes not work if 'Schedule turn off' is enabled." } },
    SendNotifications: { type: "Boolean", value: false, name: { ru: "–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", en: "Send notifications" }, desc: { ru: "–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –∏ —Å–∏—Å—Ç–µ–º—É –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤–∫–ª—é—á–µ–Ω–∏–∏/–æ—Ç–∫–ª—é—á–µ–Ω–∏–∏.", en: "If enabled, sends a Telegram and system notification on each turn on/off." } },
    MaintainState: { type: "Boolean", value: false, name: { ru: "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ", en: "Maintain state" }, desc: { ru: "–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –±—É–¥–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –Ω—É–∂–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –¥—Ä—É–≥–∏–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–º –∏–ª–∏ –º–æ—Å—Ç–æ–º, –ø–æ–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.", en: "If enabled, the device will follow the current state upon manual change until the schedule triggers." } }
  },
  variables: {
    cronTasksOn: [], // –ú–∞—Å—Å–∏–≤ –∑–∞–¥–∞—á –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è (–Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤)
    cronTasksOff: [], // –ú–∞—Å—Å–∏–≤ –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è (–Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤)
    prevTimeOn: undefined, // –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–∫–ª—é—á–µ–Ω–∏—è
    prevTimeOff: undefined // –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
  }
};

function trigger(source, value, variables, options, context) {
  try {
    let needRestoreTargetState = false;
    // –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ —Ä—É—á–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    if (options.MaintainState && !isAutomaticChange(context)) {
      needRestoreTargetState = true;
      sendNotification(source, options.SendNotifications, "–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Ä—É—á–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è");
    }

    // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∏–∑ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–∫–ª—é—á–µ–Ω–∏—è –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    let currentTimeOn = `${options.TimeOn}|${options.DaysOfMonthOn}|${options.ActiveMonthsOn}|${options.SundayOn}|${options.MondayOn}|${options.TuesdayOn}|${options.WednesdayOn}|${options.ThursdayOn}|${options.FridayOn}|${options.SaturdayOn}`;
    let currentTimeOff = `${options.TimeOff}|${options.DaysOfMonthOff}|${options.ActiveMonthsOff}|${options.SundayOff}|${options.MondayOff}|${options.TuesdayOff}|${options.WednesdayOff}|${options.ThursdayOff}|${options.FridayOff}|${options.SaturdayOff}`;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    let hasChanges = needRestoreTargetState || (variables.prevTimeOn !== currentTimeOn || variables.prevTimeOff !== currentTimeOff);
    if (hasChanges) {
      // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏
      variables.cronTasksOn.forEach(task => task.clear());
      variables.cronTasksOn = [];
      variables.cronTasksOff.forEach(task => task.clear());
      variables.cronTasksOff = [];
      variables.prevTimeOn = currentTimeOn;
      variables.prevTimeOff = currentTimeOff;
    }

    // –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è
    if (options.ScheduleOn && variables.cronTasksOn.length === 0) {
      let timesOn = options.TimeOn.split(',').map(t => t.trim());
      let daysOfMonthOn = parseRange(options.DaysOfMonthOn) || [];
      let activeMonthsOn = parseRange(options.ActiveMonthsOn, true) || [];
      let daysOfWeekOn = [
        options.SundayOn, options.MondayOn, options.TuesdayOn, options.WednesdayOn,
        options.ThursdayOn, options.FridayOn, options.SaturdayOn
      ];

      timesOn.forEach(time => {
        let timeOnObj = parseTime(time);
        if (timeOnObj.time === "00:00" && time !== "00:00") {
          return;
        }
        let hoursOnStr = timeOnObj.hoursStr;
        let minutesOnStr = timeOnObj.minutesStr;

        let task = Cron.schedule(`0 ${minutesOnStr} ${hoursOnStr} * * *`, () => {
          let now = new Date();
          let month = now.getMonth() + 1;
          let dayOfWeek = now.getDay();

          let isMonthMatch = activeMonthsOn.indexOf(month) !== -1;
          let isDayOfMonthMatch = daysOfMonthOn.some(day => isDayMatch(day, now));
          let isDayOfWeekMatch = daysOfWeekOn[dayOfWeek];

          if (isMonthMatch && (isDayOfMonthMatch || isDayOfWeekMatch)) {
            if (setDeviceValue(source, true, options.Invert)) {
              sendNotification(source, options.SendNotifications, "–≤–∫–ª—é—á–µ–Ω–æ");
            }
            if (options.TurnOffDelay > 0 && !options.ScheduleOff) {
              setTimeout(() => {
                if (setDeviceValue(source, false, options.Invert)) {
                  sendNotification(source, options.SendNotifications, `–æ—Ç–∫–ª—é—á–µ–Ω–æ —á–µ—Ä–µ–∑ ${options.TurnOffDelay} —Å–µ–∫`);
                }
              }, options.TurnOffDelay * 1000);
            }
          }
        });
        variables.cronTasksOn.push(task);
      });
    }

    // –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    if (options.ScheduleOff && variables.cronTasksOff.length === 0) {
      let timesOff = options.TimeOff.split(',').map(t => t.trim());
      let daysOfMonthOff = parseRange(options.DaysOfMonthOff) || [];
      let activeMonthsOff = parseRange(options.ActiveMonthsOff, true) || [];
      let daysOfWeekOff = [
        options.SundayOff, options.MondayOff, options.TuesdayOff, options.WednesdayOff,
        options.ThursdayOff, options.FridayOff, options.SaturdayOff
      ];

      timesOff.forEach(time => {
        let timeOffObj = parseTime(time);
        if (timeOffObj.time === "00:00" && time !== "00:00") {
          return;
        }
        let hoursOffStr = timeOffObj.hoursStr;
        let minutesOffStr = timeOffObj.minutesStr;

        let task = Cron.schedule(`0 ${minutesOffStr} ${hoursOffStr} * * *`, () => {
          let now = new Date();
          let month = now.getMonth() + 1;
          let dayOfWeek = now.getDay();

          let isMonthMatch = activeMonthsOff.indexOf(month) !== -1;
          let isDayOfMonthMatch = daysOfMonthOff.some(day => isDayMatch(day, now));
          let isDayOfWeekMatch = daysOfWeekOff[dayOfWeek];

          if (isMonthMatch && (isDayOfMonthMatch || isDayOfWeekMatch)) {
            if (setDeviceValue(source, false, options.Invert)) {
              sendNotification(source, options.SendNotifications, "–æ—Ç–∫–ª—é—á–µ–Ω–æ");
            }
          }
        });
        variables.cronTasksOff.push(task);
      });
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
    if (hasChanges) {
      let now = new Date();
      let currentTimeMinutes = now.getHours() * 60 + now.getMinutes();

      let timesOn = options.TimeOn.split(',').map(t => {
        let parsed = parseTime(t.trim());
        let minutes = parseInt(parsed.hoursStr) * 60 + parseInt(parsed.minutesStr);
        return minutes;
      });

      let timesOff = options.TimeOff.split(',').map(t => {
        let parsed = parseTime(t.trim());
        let minutes = parseInt(parsed.hoursStr) * 60 + parseInt(parsed.minutesStr);
        return minutes;
      });

      let daysOfMonthOn = parseRange(options.DaysOfMonthOn) || [];
      let activeMonthsOn = parseRange(options.ActiveMonthsOn, true) || [];
      let daysOfWeekOn = [
        options.SundayOn, options.MondayOn, options.TuesdayOn, options.WednesdayOn,
        options.ThursdayOn, options.FridayOn, options.SaturdayOn
      ];

      let daysOfMonthOff = parseRange(options.DaysOfMonthOff) || [];
      let activeMonthsOff = parseRange(options.ActiveMonthsOff, true) || [];
      let daysOfWeekOff = [
        options.SundayOff, options.MondayOff, options.TuesdayOff, options.WednesdayOff,
        options.ThursdayOff, options.FridayOff, options.SaturdayOff
      ];

      let nowMonth = now.getMonth() + 1;
      let nowDayOfWeek = now.getDay();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –¥–µ–Ω—å –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
      let isOnDayActive = options.ScheduleOn && activeMonthsOn.indexOf(nowMonth) !== -1 &&
        (daysOfMonthOn.some(day => isDayMatch(day, now)) || daysOfWeekOn[nowDayOfWeek]);
      let isOffDayActive = options.ScheduleOff && activeMonthsOff.indexOf(nowMonth) !== -1 &&
        (daysOfMonthOff.some(day => isDayMatch(day, now)) || daysOfWeekOff[nowDayOfWeek]);

      if (isOnDayActive || isOffDayActive) {
        let events = [];

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –≤–∫–ª—é—á–µ–Ω–∏—è
        if (isOnDayActive) {
          timesOn.forEach(time => {
            events.push({ time: time, type: 'on' });
          });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è
        if (isOffDayActive) {
          timesOff.forEach(time => {
            events.push({ time: time, type: 'off' });
          });
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        events.sort((a, b) => a.time - b.time);

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        let lastEvent = null;
        for (let i = events.length - 1; i >= 0; i--) {
          if (events[i].time <= currentTimeMinutes) {
            lastEvent = events[i];
            break;
          }
        }

        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–æ–±—ã—Ç–∏–µ, –ø—Ä–∏–º–µ–Ω—è–µ–º –µ–≥–æ
        if (lastEvent !== null) {
          let shouldBeOn = (lastEvent.type === 'on');
          if (setDeviceValue(source, shouldBeOn, options.Invert)) {
            sendNotification(source, options.SendNotifications, shouldBeOn ? "–≤–∫–ª—é—á–µ–Ω–æ" : "–æ—Ç–∫–ª—é—á–µ–Ω–æ");
          }
        }
      }
    }

  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: " + e.stack);
  }
}

function getDeviceName(service) {
  const acc = service.getAccessory();
  const room = acc.getRoom().getName();
  const accName = acc.getName();
  const sName = service.getName();
  const name = (accName == sName ? accName : accName + " " + sName) + " (ID:" + service.getUUID() + ", –∫–æ–º–Ω–∞—Ç–∞: " + room + ")";
  return name;
}

function sendNotification(source, enabled, msg) {
  if (enabled) {
    let service = source.getService();
    let deviceName = getDeviceName(service);
    let fullMsg = `${deviceName} ${msg}`;
    console.message(fullMsg);
    if (global.sendToTelegram !== undefined) {
      global.sendToTelegram(fullMsg);
    }
  }
}

function setDeviceValue(source, value, invert) {
  if (invert) value = !value;
  if (source.getType() === HC.On) {
    if (source.getValue() != value) {
      source.setValue(value);
      return true;
    }
  } else if (source.getType() === HC.Active) {
    let newValue = value ? 1 : 0;
    if (source.getValue() != newValue) {
      source.setValue(newValue);
      return true;
    }
  }
  return false;
}

function isDayMatch(day, currentDate) {
  if (!day) return false;

  const dayOfMonth = currentDate.getDate();
  const dayOfWeek = currentDate.getDay();
  const lastDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate();

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  const numDay = parseInt(day, 10);
  if (!isNaN(numDay)) {
    return numDay === dayOfMonth;
  }

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  switch (day) {
    case 'last':
      return dayOfMonth === lastDayOfMonth;
    case 'first':
      return dayOfMonth === 1;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ last-N
  if (day.startsWith('last-')) {
    const n = parseInt(day.split('-')[1], 10);
    if (!isNaN(n)) {
      return dayOfMonth === (lastDayOfMonth - n);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
  if (typeof day === 'string' && day.startsWith('weekday-')) {
    const weekday = parseInt(day.split('-')[1], 10);
    return weekday === dayOfWeek;
  }

  return false;
}

function parseRange(str, isMonth = false) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  if (!str || typeof str !== 'string') {
    return [];
  }

  // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
  str = str.toLowerCase().trim();

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏: —Å–∏–Ω–æ–Ω–∏–º—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ weekday-N
  const weekdays = {
    'weekday-0': ['sunday', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–≤—Å', 'sun'],
    'weekday-1': ['monday', '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–ø–Ω', 'mon'],
    'weekday-2': ['tuesday', '–≤—Ç–æ—Ä–Ω–∏–∫', '–≤—Ç', 'tue'],
    'weekday-3': ['wednesday', '—Å—Ä–µ–¥–∞', '—Å—Ä', 'wed'],
    'weekday-4': ['thursday', '—á–µ—Ç–≤–µ—Ä–≥', '—á—Ç', 'thu'],
    'weekday-5': ['friday', '–ø—è—Ç–Ω–∏—Ü–∞', '–ø—Ç', 'fri'],
    'weekday-6': ['saturday', '—Å—É–±–±–æ—Ç–∞', '—Å–±', 'sat']
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –º–µ—Å—è—Ü)
  if (!isMonth) {
    var weekdayKeys = Object.keys(weekdays);
    for (var i = 0; i < weekdayKeys.length; i++) {
      var weekday = weekdayKeys[i];
      var synonyms = weekdays[weekday];
      if (synonyms.indexOf(str) !== -1) {
        return [weekday];
      }
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –º–µ—Å—è—Ü)
  if (!isMonth) {
    if (str === 'last' || str === '–ø–æ—Å–ª–µ–¥–Ω–∏–π') {
      return ['last'];
    }
    if (str === 'first' || str === '–ø–µ—Ä–≤—ã–π') {
      return [1];
    }
    if (str === 'even' || str === '—á—ë—Ç–Ω—ã–µ' || str === '—á–µ—Ç–Ω—ã–µ') {
      let result = [];
      for (let i = 2; i <= 30; i += 2) {
        result.push(i);
      }
      return result;
    }
    if (str === 'odd' || str === '–Ω–µ—á—ë—Ç–Ω—ã–µ' || str === '–Ω–µ—á–µ—Ç–Ω—ã–µ') {
      let result = [];
      for (let i = 1; i <= 31; i += 2) {
        result.push(i);
      }
      return result;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç last-N
    const lastNMatch = str.match(/^(last|–ø–æ—Å–ª–µ–¥–Ω–∏–π)-(\d+)$/);
    if (lastNMatch) {
      const n = parseInt(lastNMatch[2], 10);
      if (!isNaN(n) && n > 0 && n < 31) {
        return ['last-' + n];
      }
      return [];
    }
  }

  // –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ –∑–∞–ø—è—Ç—ã–º –∏ –æ—á–∏—â–∞–µ–º –æ—Ç –ø—Ä–æ–±–µ–ª—ã
  const parts = str.split(',').map(p => p.trim()).filter(p => p !== '');

  if (parts.length === 0) {
    return [];
  }

  const result = [];
  const maxValue = isMonth ? 12 : 31;

  const addUniqueValue = value => {
    if (result.indexOf(value) === -1) {
      result.push(value);
    }
  };

  for (let part of parts) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1-5")
    if (part.indexOf('-') !== -1) {
      var rangeParts = part.split('-').map(n => parseInt(n, 10));
      var start = rangeParts[0];
      var end = rangeParts[1];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω–∞
      if (!isNaN(start) && !isNaN(end) && start > 0 && end <= maxValue && start <= end) {
        for (let i = start; i <= end; i++) {
          addUniqueValue(i);
        }
      }
    } else {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ —á–∏—Å–ª–∞
      const num = parseInt(part, 10);
      if (!isNaN(num) && num > 0 && num <= maxValue) {
        addUniqueValue(num);
      }
    }
  }

  result.sort((a, b) => a - b);
  return result;
}

function parseTime(str) {
  var time = str || "00:00";
  var hours, minutes;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞
  if (time.indexOf(',') !== -1) {
    // –†–∞–∑–±–∏–≤–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –≤—Ä–µ–º—è –æ—Ç–¥–µ–ª—å–Ω–æ
    let times = time.split(',').map(t => t.trim());
    let validTimes = times.map(t => parseTime(t));
    // –ï—Å–ª–∏ –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 00:00
    if (validTimes.some(t => t.time === "00:00")) {
      if (!inTestMode) {
        console.warn("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ —Å–ø–∏—Å–∫–µ –≤—Ä–µ–º–µ–Ω: {}", time);
      }
      return { time: "00:00", hoursStr: "00", minutesStr: "00" };
    }
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    return validTimes[times.indexOf(str.trim())] || validTimes[0];
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
  if (time.match(/[^0-9:]/)) {
    if (!inTestMode) {
      console.warn("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤–æ –≤—Ä–µ–º–µ–Ω–∏: {}", time);
    }
    return { time: "00:00", hoursStr: "00", minutesStr: "00" };
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã X:X –∏ XX:XX
  var timeMatch = time.match(/^(\d{1,2}):(\d{1,2})$/);
  if (!timeMatch) {
    if (!inTestMode) {
      console.warn("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {}", time);
    }
    return { time: "00:00", hoursStr: "00", minutesStr: "00" };
  }

  hours = parseInt(timeMatch[1], 10);
  minutes = parseInt(timeMatch[2], 10);

  if (hours < 0 || hours > 23 || minutes < 0 || minutes > 59) {
    if (!inTestMode) {
      console.warn("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è: {}. –ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 23, –º–∏–Ω—É—Ç—ã –æ—Ç 0 –¥–æ 59", time);
    }
    return { time: "00:00", hoursStr: "00", minutesStr: "00" };
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏
  var hoursStr = hours < 10 ? "0" + hours : "" + hours;
  var minutesStr = minutes < 10 ? "0" + minutes : "" + minutes;
  return {
    time: hoursStr + ":" + minutesStr,
    hoursStr: hoursStr,
    minutesStr: minutesStr
  };
}

function isAutomaticChange(context) {
  // –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —Å–∏–º–≤–æ–ª—É '<-'
  const elements = context.toString().split(' <- ');
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –º–∞—Å—Å–∏–≤–µ
  if (elements.length === 0) {
    return false;
  }
  let last = elements[elements.length - 1];

  // –£—Å–ª–æ–≤–∏–µ 1: –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'CLINK' –∏–ª–∏ 'HUB[OnStart]'
  if (last.startsWith('CLINK') || last.startsWith('HUB[OnStart]')) {
    return true;
  }

  // –£—Å–ª–æ–≤–∏–µ 2: –ü–µ—Ä–≤—ã–µ —Ç—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —à–∞–±–ª–æ–Ω—É 'LOGIC <- C <- LOGIC'
  if (elements.length >= 3 &&
    elements[0].startsWith('LOGIC') &&
    elements[1].startsWith('C') &&
    elements[2].startsWith('LOGIC')) {
    return true;
  }

  // –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä—É—á–Ω–æ–µ
  return false;
}

//#############################################################################
//                                    –¢–ï–°–¢–´                                   #
//#############################################################################

let isDeveloping = true; // –§–ª–∞–≥ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –í–∫–ª—é—á–∏—Ç—å —á—Ç–æ –±—ã —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω—è–ª–∏—Å—å.

let inTestMode = false;
let testCronCallbacks = [];
let originalDate = Date;
let mockDate = null;

let assert = global.assert; let assertNull = global.assertNull; let assertNotNull = global.assertNotNull; let assertEquals = global.assertEquals; let assertNotEquals = global.assertNotEquals; let assertTrue = global.assertTrue; let assertFalse = global.assertFalse; let assertDefined = global.assertDefined; let assertContains = global.assertContains; let assertEmpty = global.assertEmpty; let assertNotEmpty = global.assertNotEmpty; let assertLength = global.assertLength;

function clearTestCronCallbacks() {
  testCronCallbacks = [];
}

function runTestCronCallbacks() {
  const now = new Date();
  testCronCallbacks.forEach(task => {
    if (shouldRunCron(task.pattern, now)) {
      task.callback();
    }
  });
}

function shouldRunCron(pattern, now) {
  const fields = pattern.trim().split(/\s+/);
  if (fields.length !== 6) {
    console.warn("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Cron-–≤—ã—Ä–∞–∂–µ–Ω–∏—è:", pattern);
    return false;
  }

  const second = fields[0];
  const minute = fields[1];
  const hour = fields[2];
  const dayOfMonth = fields[3];
  const month = fields[4];
  const dayOfWeek = fields[5];

  const currentSecond = now.getSeconds();
  const currentMinute = now.getMinutes();
  const currentHour = now.getHours();
  const currentDayOfMonth = now.getDate();
  const currentMonth = now.getMonth() + 1; // –ú–µ—Å—è—Ü—ã –≤ JS —Å 0
  const currentDayOfWeek = now.getDay();    // 0 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 6 - —Å—É–±–±–æ—Ç–∞

  const matchField = (field, value) => {
    if (field === '*') return true;
    const values = field.split(',').map(v => parseInt(v, 10));
    return values.some(v => !isNaN(v) && v === value);
  };

  return (
    matchField(second, currentSecond) &&
    matchField(minute, currentMinute) &&
    matchField(hour, currentHour) &&
    (dayOfMonth === '*' || matchField(dayOfMonth, currentDayOfMonth)) &&
    (month === '*' || matchField(month, currentMonth)) &&
    (dayOfWeek === '*' || matchField(dayOfWeek, currentDayOfWeek))
  );
}

function setMockDate(date) {
  mockDate = date;
  let DateProxy = function () {
    if (arguments.length === 0) {
      return new originalDate(mockDate.getTime());
    }
    return new (Function.prototype.bind.apply(originalDate, [null].concat(Array.prototype.slice.call(arguments))));
  };

  // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
  Object.getOwnPropertyNames(originalDate).forEach(prop => {
    DateProxy[prop] = originalDate[prop];
  });

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ç–æ—Ç–∏–ø
  DateProxy.prototype = Object.create(originalDate.prototype);
  DateProxy.prototype.constructor = DateProxy;

  // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥—ã –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞
  let methods = [
    'getTime', 'getDate', 'getDay', 'getFullYear', 'getHours',
    'getMilliseconds', 'getMinutes', 'getMonth', 'getSeconds',
    'getYear', 'toDateString', 'toISOString', 'toJSON',
    'toLocaleDateString', 'toLocaleString', 'toLocaleTimeString',
    'toString', 'toTimeString', 'toUTCString', 'valueOf'
  ];

  methods.forEach(method => {
    DateProxy.prototype[method] = function () {
      return mockDate[method].apply(mockDate, arguments);
    };
  });

  // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º now()
  DateProxy.now = () => mockDate.getTime();

  // –ó–∞–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π Date
  Date = DateProxy;
}

function restoreDate() {
  Date = originalDate;
  mockDate = null;
}

const OriginalCron = Cron;
Cron = {
  schedule: (pattern, callback) => {
    if (inTestMode) {
      testCronCallbacks.push({ pattern: pattern, callback: callback });
      return {
        clear: () => {
          testCronCallbacks = testCronCallbacks.filter(
            task => task.callback !== callback
          );
        }
      };
    }
    return OriginalCron.schedule(pattern, callback);
  }
};

function resetTestState() {
  clearTestCronCallbacks();
  restoreDate();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
function runTests() {
  if (!isDeveloping || !global.hasUnitTests) {
    return;
  }

  try {
    inTestMode = true;

    console.info("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞");

    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    console.info("–¢–µ—Å—Ç 1: –í–∫–ª—é—á–µ–Ω–∏–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é");
    test1_ScheduledTurnOn();

    console.info("–¢–µ—Å—Ç 2: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é");
    test2_ScheduledTurnOff();

    console.info("–¢–µ—Å—Ç 3: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞");
    test3_MultipleTimes();

    console.info("–¢–µ—Å—Ç 4: –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞");
    test4_LastDayOfMonth();

    console.info("–¢–µ—Å—Ç 5: Last-N –¥–Ω–µ–π");
    test5_LastNDays();

    console.info("–¢–µ—Å—Ç 6: –ß–µ—Ç–Ω—ã–µ –¥–Ω–∏");
    test6_EvenDays();

    console.info("–¢–µ—Å—Ç 7: –ù–µ—á–µ—Ç–Ω—ã–µ –¥–Ω–∏");
    test7_OddDays();

    console.info("–¢–µ—Å—Ç 8: –î–Ω–∏ –Ω–µ–¥–µ–ª–∏");
    test8_Weekdays();

    console.info("–¢–µ—Å—Ç 9: –†–∞–±–æ—Ç–∞ —Å HC.Active");
    test9_ActiveCharacteristic();

    console.info("–¢–µ—Å—Ç 10: –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –∏ —á–∏—Å–µ–ª");
    test10_WeekdaysAndDays();

    // Unit —Ç–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –ø–∞—Ä—Å–∏–Ω–≥–∞
    console.info("–¢–µ—Å—Ç 11: –§—É–Ω–∫—Ü–∏—è parseTime");
    test11_ParseTime();

    console.info("–¢–µ—Å—Ç 12: –§—É–Ω–∫—Ü–∏—è parseRange");
    test12_ParseRange();

    console.info("–¢–µ—Å—Ç 13: –§—É–Ω–∫—Ü–∏—è isDayMatch");
    test13_IsDayMatch();
  } finally {
    inTestMode = false;
    resetTestState();
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
function getDefaultVariables() {
  return {
    cronTasksOn: [],
    cronTasksOff: [],
    prevTimeOn: undefined,
    prevTimeOff: undefined
  };
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—è —Å HC.On
function createTestSwitch() {
  return global.createUnitTestFullAccessory({
    id: 1,
    name: "–¢–µ—Å—Ç–æ–≤—ã–π –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å",
    room: "–¢–µ—Å—Ç",
    services: [{
      id: 10,
      type: HS.Switch,
      name: "–í—ã–∫–ª—é—á–∞—Ç–µ–ª—å",
      characteristics: [{
        id: 11,
        type: HC.On,
        value: false
      }]
    }]
  });
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å HC.Active
function createTestActiveDevice() {
  return global.createUnitTestFullAccessory({
    id: 2,
    name: "–¢–µ—Å—Ç–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ",
    room: "–¢–µ—Å—Ç",
    services: [{
      id: 20,
      type: HS.Fan,
      name: "–í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä",
      characteristics: [{
        id: 21,
        type: HC.Active,
        value: 0
      }]
    }]
  });
}

// –ë–∞–∑–æ–≤—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
function getDefaultOptions() {
  return {
    ScheduleOn: false,
    DaysOfMonthOn: "",
    MondayOn: false,
    TuesdayOn: false,
    WednesdayOn: false,
    ThursdayOn: false,
    FridayOn: false,
    SaturdayOn: false,
    SundayOn: false,
    TimeOn: "",
    ActiveMonthsOn: "1-12",
    ScheduleOff: false,
    DaysOfMonthOff: "",
    MondayOff: false,
    TuesdayOff: false,
    WednesdayOff: false,
    ThursdayOff: false,
    FridayOff: false,
    SaturdayOff: false,
    SundayOff: false,
    TimeOff: "",
    ActiveMonthsOff: "1-12",
    SendNotifications: false,
    Invert: false,
    TurnOffDelay: 0,
    MaintainState: false
  };
}

// –¢–µ—Å—Ç 1: –í–∫–ª—é—á–µ–Ω–∏–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
function test1_ScheduledTurnOn() {
  resetTestState();
  let variables = getDefaultVariables();
  let acc = createTestSwitch();
  let source = acc.getService(HS.Switch).getCharacteristic(HC.On);

  let options = getDefaultOptions();
  options.ScheduleOn = true;
  options.DaysOfMonthOn = "1";
  options.TimeOn = "12:00";
  options.ActiveMonthsOn = "1-12"; // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–µ—Å—è—Ü—ã

  let mockDate = new Date(2024, 0, 1, 12, 0);
  setMockDate(mockDate);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ trigger
  let activeMonths = parseRange(options.ActiveMonthsOn, true);
  assertTrue(activeMonths.indexOf(1) !== -1, "test1_ScheduledTurnOn: –Ø–Ω–≤–∞—Ä—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å–ø–∏—Å–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤");

  let daysOfMonth = parseRange(options.DaysOfMonthOn);
  assertTrue(daysOfMonth.indexOf(1) !== -1, "test1_ScheduledTurnOn: 1-–µ —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Å–ø–∏—Å–∫–µ –¥–Ω–µ–π");

  trigger(source, true, variables, options, "LOGIC");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Å–ª–µ trigger
  let now = new Date();
  let nowMonth = now.getMonth() + 1;
  let nowDay = now.getDate();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –¥–µ–Ω—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–µ–º—ã–º
  assertEquals(1, nowMonth, "test1_ScheduledTurnOn: –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —è–Ω–≤–∞—Ä—å (1)");
  assertEquals(1, nowDay, "test1_ScheduledTurnOn: –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1-–µ —á–∏—Å–ª–æ");

  runTestCronCallbacks();
  assertTrue(source.getValue(), "test1_ScheduledTurnOn: –í—ã–∫–ª—é—á–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω –≤ 12:00");
}

// –¢–µ—Å—Ç 2: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
function test2_ScheduledTurnOff() {
  resetTestState();
  let variables = getDefaultVariables();
  let acc = createTestSwitch();
  let source = acc.getService(HS.Switch).getCharacteristic(HC.On);

  source.setValue(true);
  let options = getDefaultOptions();
  options.ScheduleOff = true;
  options.DaysOfMonthOff = "1";
  options.TimeOff = "15:00";

  trigger(source, true, variables, options, "LOGIC");
  setMockDate(new Date(2024, 0, 1, 15, 0));
  runTestCronCallbacks();
  assertFalse(source.getValue(), "test2_ScheduledTurnOff: –í—ã–∫–ª—é—á–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∫–ª—é—á–µ–Ω –≤ 15:00");
}

// –¢–µ—Å—Ç 3: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞
function test3_MultipleTimes() {
  resetTestState();
  let variables = getDefaultVariables();
  let acc = createTestSwitch();
  let source = acc.getService(HS.Switch).getCharacteristic(HC.On);

  let options = getDefaultOptions();
  options.ScheduleOn = true;
  options.ScheduleOff = true;
  options.DaysOfMonthOn = "1";
  options.DaysOfMonthOff = "1";
  options.TimeOn = "09:00, 15:00, 21:00";
  options.TimeOff = "12:00, 18:00, 23:00";
  options.ActiveMonthsOn = "1-12";
  options.ActiveMonthsOff = "1-12";

  // –ù–∞—á–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  source.setValue(false);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω–∏–µ –≤ 9:00
  let date9am = new Date(2024, 0, 1, 9, 0);
  setMockDate(date9am);
  trigger(source, false, variables, options, "LOGIC");
  runTestCronCallbacks();
  assertTrue(source.getValue(), "test3_MultipleTimes: –í—ã–∫–ª—é—á–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω –≤ 9:00");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –≤ 12:00
  let date12pm = new Date(2024, 0, 1, 12, 0);
  setMockDate(date12pm);
  trigger(source, source.getValue(), variables, options, "LOGIC");
  runTestCronCallbacks();
  assertFalse(source.getValue(), "test3_MultipleTimes: –í—ã–∫–ª—é—á–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∫–ª—é—á–µ–Ω –≤ 12:00");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω–∏–µ –≤ 15:00
  let date3pm = new Date(2024, 0, 1, 15, 0);
  setMockDate(date3pm);
  trigger(source, source.getValue(), variables, options, "LOGIC");
  runTestCronCallbacks();
  assertTrue(source.getValue(), "test3_MultipleTimes: –í—ã–∫–ª—é—á–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω –≤ 15:00");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –≤ 18:00
  let date6pm = new Date(2024, 0, 1, 18, 0);
  setMockDate(date6pm);
  trigger(source, source.getValue(), variables, options, "LOGIC");
  runTestCronCallbacks();
  assertFalse(source.getValue(), "test3_MultipleTimes: –í—ã–∫–ª—é—á–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∫–ª—é—á–µ–Ω –≤ 18:00");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω–∏–µ –≤ 21:00
  let date9pm = new Date(2024, 0, 1, 21, 0);
  setMockDate(date9pm);
  trigger(source, source.getValue(), variables, options, "LOGIC");
  runTestCronCallbacks();
  assertTrue(source.getValue(), "test3_MultipleTimes: –í—ã–∫–ª—é—á–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω –≤ 21:00");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –≤ 23:00
  let date11pm = new Date(2024, 0, 1, 23, 0);
  setMockDate(date11pm);
  trigger(source, source.getValue(), variables, options, "LOGIC");
  runTestCronCallbacks();
  assertFalse(source.getValue(), "test3_MultipleTimes: –í—ã–∫–ª—é—á–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∫–ª—é—á–µ–Ω –≤ 23:00");
}

// –¢–µ—Å—Ç 4: –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
function test4_LastDayOfMonth() {
  resetTestState();
  let variables = getDefaultVariables();
  let acc = createTestSwitch();
  let source = acc.getService(HS.Switch).getCharacteristic(HC.On);

  let options = getDefaultOptions();
  options.ScheduleOn = true;
  options.DaysOfMonthOn = "last";
  options.TimeOn = "15:00";

  trigger(source, true, variables, options, "LOGIC");
  setMockDate(new Date(2024, 0, 31, 15, 0));
  runTestCronCallbacks();
  assertTrue(source.getValue(), "test4_LastDayOfMonth: –î–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å—Å—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞");
}

// –¢–µ—Å—Ç 5: Last-N –¥–Ω–µ–π
function test5_LastNDays() {
  resetTestState();
  let variables = getDefaultVariables();
  let acc = createTestSwitch();
  let source = acc.getService(HS.Switch).getCharacteristic(HC.On);

  let options = getDefaultOptions();
  options.ScheduleOn = true;
  options.DaysOfMonthOn = "last-2";
  options.TimeOn = "15:00";

  trigger(source, true, variables, options, "LOGIC");
  setMockDate(new Date(2024, 0, 29, 15, 0));
  runTestCronCallbacks();
  assertTrue(source.getValue(), "test5_LastNDays: –î–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å—Å—è –∑–∞ 2 –¥–Ω—è –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞");
}

// –¢–µ—Å—Ç 6: –ß–µ—Ç–Ω—ã–µ –¥–Ω–∏
function test6_EvenDays() {
  resetTestState();
  let variables = getDefaultVariables();
  let acc = createTestSwitch();
  let source = acc.getService(HS.Switch).getCharacteristic(HC.On);

  let options = getDefaultOptions();
  options.ScheduleOn = true;
  options.DaysOfMonthOn = "even";
  options.TimeOn = "15:00";

  trigger(source, true, variables, options, "LOGIC");
  setMockDate(new Date(2024, 0, 2, 15, 0));
  runTestCronCallbacks();
  assertTrue(source.getValue(), "test6_EvenDays: –î–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å—Å—è –≤ —á–µ—Ç–Ω—ã–π –¥–µ–Ω—å");
}

// –¢–µ—Å—Ç 7: –ù–µ—á–µ—Ç–Ω—ã–µ –¥–Ω–∏
function test7_OddDays() {
  resetTestState();
  let variables = getDefaultVariables();
  let acc = createTestSwitch();
  let source = acc.getService(HS.Switch).getCharacteristic(HC.On);

  let options = getDefaultOptions();
  options.ScheduleOn = true;
  options.DaysOfMonthOn = "odd";
  options.TimeOn = "15:00";

  trigger(source, true, variables, options, "LOGIC");
  setMockDate(new Date(2024, 0, 3, 15, 0));
  runTestCronCallbacks();
  assertTrue(source.getValue(), "test7_OddDays: –î–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å—Å—è –≤ –Ω–µ—á–µ—Ç–Ω—ã–π –¥–µ–Ω—å");
}

// –¢–µ—Å—Ç 8: –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
function test8_Weekdays() {
  resetTestState();
  let variables = getDefaultVariables();
  let acc = createTestSwitch();
  let source = acc.getService(HS.Switch).getCharacteristic(HC.On);

  let options = getDefaultOptions();
  options.ScheduleOn = true;
  options.MondayOn = true;
  options.TimeOn = "15:00";

  trigger(source, true, variables, options, "LOGIC");
  setMockDate(new Date(2024, 0, 1, 15, 0)); // 1 —è–Ω–≤–∞—Ä—è 2024 - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
  runTestCronCallbacks();
  assertTrue(source.getValue(), "test8_Weekdays: –î–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å—Å—è –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫");
}

// –¢–µ—Å—Ç 9: –†–∞–±–æ—Ç–∞ —Å HC.Active
function test9_ActiveCharacteristic() {
  resetTestState();
  let variables = getDefaultVariables();
  let acc = createTestActiveDevice();
  let source = acc.getService(HS.Fan).getCharacteristic(HC.Active);

  let options = getDefaultOptions();
  options.ScheduleOn = true;
  options.DaysOfMonthOn = "1";
  options.TimeOn = "12:00";

  trigger(source, true, variables, options, "LOGIC");
  setMockDate(new Date(2024, 0, 1, 12, 0));
  runTestCronCallbacks();
  assertEquals(1, source.getValue(), "test9_ActiveCharacteristic: –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ (–∑–Ω–∞—á–µ–Ω–∏–µ 1)");

  resetTestState();
  variables = getDefaultVariables();
  options = getDefaultOptions();
  options.ScheduleOff = true;
  options.DaysOfMonthOff = "1";
  options.TimeOff = "13:00";

  source.setValue(1);
  trigger(source, true, variables, options, "LOGIC");
  setMockDate(new Date(2024, 0, 1, 13, 0));
  runTestCronCallbacks();
  assertEquals(0, source.getValue(), "test9_ActiveCharacteristic: –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ (–∑–Ω–∞—á–µ–Ω–∏–µ 0)");
}

// –¢–µ—Å—Ç 10: –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –∏ —á–∏—Å–µ–ª
function test10_WeekdaysAndDays() {
  resetTestState();
  let variables = getDefaultVariables();
  let acc = createTestSwitch();
  let source = acc.getService(HS.Switch).getCharacteristic(HC.On);

  let options = getDefaultOptions();
  options.ScheduleOn = true;
  options.DaysOfMonthOn = "1,15";
  options.MondayOn = true;
  options.TimeOn = "15:00";

  setMockDate(new Date(2024, 0, 1, 15, 0));
  trigger(source, true, variables, options, "LOGIC");

  runTestCronCallbacks();
  assertTrue(source.getValue(), "test10_WeekdaysAndDays: –î–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å—Å—è 1- –≥–æ —á–∏—Å–ª–∞");

  variables = getDefaultVariables();
  source.setValue(false);
  setMockDate(new Date(2024, 0, 8, 15, 0));
  trigger(source, true, variables, options, "LOGIC");
  runTestCronCallbacks();
  assertTrue(source.getValue(), "test10_WeekdaysAndDays: –î–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å—Å—è –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫");
}

// –¢–µ—Å—Ç 11: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
function test11_InvalidFormats() {
  resetTestState();
  let variables = getDefaultVariables();
  let acc = createTestSwitch();
  let source = acc.getService(HS.Switch).getCharacteristic(HC.On);

  // –¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
  let options = getDefaultOptions();
  options.ScheduleOn = true;
  options.DaysOfMonthOn = "1";
  options.TimeOn = "25:00"; // –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –≤—Ä–µ–º—è

  trigger(source, true, variables, options, "LOGIC");
  setMockDate(new Date(2024, 0, 1, 0, 0));
  runTestCronCallbacks();
  assertFalse(source.getValue(), "test11_InvalidFormats: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å—Å—è –ø—Ä–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏");

  // –¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞
  resetTestState();
  variables = getDefaultVariables();
  options = getDefaultOptions();
  options.ScheduleOn = true;
  options.DaysOfMonthOn = "32"; // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –¥–µ–Ω—å
  options.TimeOn = "12:00";

  trigger(source, true, variables, options, "LOGIC");
  setMockDate(new Date(2024, 0, 1, 12, 0));
  runTestCronCallbacks();
  assertFalse(source.getValue(), "test11_InvalidFormats: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å—Å—è –ø—Ä–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º –¥–Ω–µ –º–µ—Å—è—Ü–∞");

  // –¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ last-N
  resetTestState();
  variables = getDefaultVariables();
  options = getDefaultOptions();
  options.ScheduleOn = true;
  options.DaysOfMonthOn = "last-32"; // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç last-N
  options.TimeOn = "12:00";

  trigger(source, true, variables, options, "LOGIC");
  setMockDate(new Date(2024, 0, 1, 12, 0));
  runTestCronCallbacks();
  assertFalse(source.getValue(), "test11_InvalidFormats: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å—Å—è –ø—Ä–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ last-N");
}

// Unit —Ç–µ—Å—Ç –¥–ª—è parseTime
function test11_ParseTime() {
  // –í–∞–ª–∏–¥–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
  let validTimes = [
    { input: "0:0", expected: { time: "00:00", hoursStr: "00", minutesStr: "00" } },
    { input: "9:5", expected: { time: "09:05", hoursStr: "09", minutesStr: "05" } },
    { input: "23:59", expected: { time: "23:59", hoursStr: "23", minutesStr: "59" } },
    { input: "12:00", expected: { time: "12:00", hoursStr: "12", minutesStr: "00" } },
    { input: "9:00, 15:30, 18:45", expected: { time: "09:00", hoursStr: "09", minutesStr: "00" } }
  ];

  validTimes.forEach(test => {
    let result = parseTime(test.input);
    assertEquals(test.expected.time, result.time, `test11_ParseTime: –í—Ä–µ–º—è "${test.input}" –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ "${test.expected.time}"`);
    assertEquals(test.expected.hoursStr, result.hoursStr, `test11_ParseTime: –ß–∞—Å—ã –¥–ª—è "${test.input}" –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å "${test.expected.hoursStr}"`);
    assertEquals(test.expected.minutesStr, result.minutesStr, `test11_ParseTime: –ú–∏–Ω—É—Ç—ã –¥–ª—è "${test.input}" –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å "${test.expected.minutesStr}"`);
  });

  // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
  let invalidTimes = [
    "24:00",    // –ß–∞—Å—ã –±–æ–ª—å—à–µ 23
    "12:60",    // –ú–∏–Ω—É—Ç—ã –±–æ–ª—å—à–µ 59
    "12:12:12", // –õ–∏—à–Ω–∏–µ –¥–≤–æ–µ—Ç–æ—á–∏—è
    "abc",      // –ù–µ—á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
    "12.00",    // –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    "-1:00",    // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    "12:",      // –ù–µ–ø–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    ":30",      // –ù–µ–ø–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    "",         // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    "  "        // –¢–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã
  ];

  invalidTimes.forEach(time => {
    let result = parseTime(time);
    assertEquals("00:00", result.time, `test11_ParseTime: –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –≤—Ä–µ–º—è "${time}" –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ "00:00"`);
    assertEquals("00", result.hoursStr, `test11_ParseTime: –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –≤—Ä–µ–º—è "${time}" –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å —á–∞—Å—ã "00"`);
    assertEquals("00", result.minutesStr, `test11_ParseTime: –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –≤—Ä–µ–º—è "${time}" –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –º–∏–Ω—É—Ç—ã "00"`);
  });
}

// Unit —Ç–µ—Å—Ç –¥–ª—è parseRange
function test12_ParseRange() {
  // –¢–µ—Å—Ç –¥–ª—è –º–µ—Å—è—Ü–µ–≤
  let monthRanges = [
    { input: "1-12", expected: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], isMonth: true },
    { input: "1,6,12", expected: [1, 6, 12], isMonth: true },
    { input: "13", expected: [], isMonth: true },  // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –º–µ—Å—è—Ü
    { input: "0", expected: [], isMonth: true },   // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –º–µ—Å—è—Ü
    { input: "1-13", expected: [], isMonth: true } // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
  ];

  monthRanges.forEach(test => {
    let result = parseRange(test.input, test.isMonth);
    assertLength(test.expected, result.length, `test12_ParseRange: –î–∏–∞–ø–∞–∑–æ–Ω –º–µ—Å—è—Ü–µ–≤ "${test.input}" –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å ${test.expected.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
    test.expected.forEach((value, index) => {
      assertEquals(value, result[index], `test12_ParseRange: –ú–µ—Å—è—Ü ${index} –¥–∏–∞–ø–∞–∑–æ–Ω–∞ "${test.input}" –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ${value}`);
    });
  });

  // –¢–µ—Å—Ç –¥–ª—è –¥–Ω–µ–π
  let validRanges = [
    { input: "1", expected: [1] },
    { input: "1-5", expected: [1, 2, 3, 4, 5] },
    { input: "1,15,30", expected: [1, 15, 30] },
    { input: "last", expected: ["last"] },
    { input: "–ø–æ—Å–ª–µ–¥–Ω–∏–π", expected: ["last"] },
    { input: "first", expected: [1] },
    { input: "–ø–µ—Ä–≤—ã–π", expected: [1] },
    { input: "last-2", expected: ["last-2"] },
    { input: "–ø–æ—Å–ª–µ–¥–Ω–∏–π-2", expected: ["last-2"] },
    { input: "even", expected: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30] },
    { input: "—á—ë—Ç–Ω—ã–µ", expected: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30] },
    { input: "odd", expected: [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31] },
    { input: "–Ω–µ—á—ë—Ç–Ω—ã–µ", expected: [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31] },
    { input: "monday", expected: ["weekday-1"] },
    { input: "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", expected: ["weekday-1"] },
    { input: "sunday", expected: ["weekday-0"] },
    { input: "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", expected: ["weekday-0"] },
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—è—Ç—ã—Ö
    { input: "1,,2", expected: [1, 2] },
    { input: "1,2,", expected: [1, 2] },
    { input: ",1,2", expected: [1, 2] },
    { input: "1.5", expected: [1] }
  ];

  validRanges.forEach(test => {
    let result = parseRange(test.input);
    assertLength(test.expected, result.length, `test12_ParseRange: –î–∏–∞–ø–∞–∑–æ–Ω "${test.input}" –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å ${test.expected.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
    test.expected.forEach((value, index) => {
      assertEquals(value, result[index], `test12_ParseRange: –≠–ª–µ–º–µ–Ω—Ç ${index} –¥–∏–∞–ø–∞–∑–æ–Ω–∞ "${test.input}" –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ${value}`);
    });
  });

  // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
  let invalidRanges = [
    "32",           // –î–µ–Ω—å –±–æ–ª—å—à–µ 31
    "0",            // –î–µ–Ω—å –º–µ–Ω—å—à–µ 1
    "1-32",         // –ö–æ–Ω–µ—Ü –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –±–æ–ª—å—à–µ 31
    "5-1",          // –û–±—Ä–∞—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
    "abc",          // –ù–µ—á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
    "last-32",      // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π last-N
    "last-0",       // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π last-N
    "invalid-day"   // –ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
  ];

  invalidRanges.forEach(range => {
    let result = parseRange(range);
    assertEmpty(result, `test12_ParseRange: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω "${range}" –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤`);
  });
}

// Unit —Ç–µ—Å—Ç –¥–ª—è isDayMatch
function test13_IsDayMatch() {
  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞—Ç—ã
  let january31 = new Date(2024, 0, 31); // –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å —è–Ω–≤–∞—Ä—è
  let january29 = new Date(2024, 0, 29); // –ó–∞ 2 –¥–Ω—è –¥–æ –∫–æ–Ω—Ü–∞ —è–Ω–≤–∞—Ä—è
  let january15 = new Date(2024, 0, 15); // –°–µ—Ä–µ–¥–∏–Ω–∞ –º–µ—Å—è—Ü–∞
  let monday = new Date(2024, 0, 1);     // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
  let sunday = new Date(2024, 0, 7);     // –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–Ω—è
  assertTrue(isDayMatch('last', january31), "test13_IsDayMatch: 31 —è–Ω–≤–∞—Ä—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º –¥–Ω–µ–º");
  assertFalse(isDayMatch('last', january15), "test13_IsDayMatch: 15 —è–Ω–≤–∞—Ä—è –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º –¥–Ω–µ–º");

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ last-N
  assertTrue(isDayMatch('last-2', january29), "test13_IsDayMatch: 29 —è–Ω–≤–∞—Ä—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞ 2 –¥–Ω—è –¥–æ –∫–æ–Ω—Ü–∞");
  assertFalse(isDayMatch('last-2', january31), "test13_IsDayMatch: 31 —è–Ω–≤–∞—Ä—è –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞ 2 –¥–Ω—è –¥–æ –∫–æ–Ω—Ü–∞");

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
  assertTrue(isDayMatch('weekday-1', monday), "test13_IsDayMatch: 1 —è–Ω–≤–∞—Ä—è 2024 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–æ–º");
  assertTrue(isDayMatch('weekday-0', sunday), "test13_IsDayMatch: 7 —è–Ω–≤–∞—Ä—è 2024 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ–º");
  assertFalse(isDayMatch('weekday-1', sunday), "test13_IsDayMatch: 7 —è–Ω–≤–∞—Ä—è 2024 –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–æ–º");

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ã—á–Ω—ã—Ö –¥–Ω–µ–π
  assertTrue(isDayMatch('15', january15), "test13_IsDayMatch: –î–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å 15 —á–∏—Å–ª–æ–º");
  assertFalse(isDayMatch('16', january15), "test13_IsDayMatch: –ù–µ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å 16 —á–∏—Å–ª–æ–º");

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
  assertFalse(isDayMatch('invalid', january15), "test13_IsDayMatch: –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å false");
  assertFalse(isDayMatch('32', january15), "test13_IsDayMatch: –î–µ–Ω—å –±–æ–ª—å—à–µ 31 –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å false");
  assertFalse(isDayMatch('0', january15), "test13_IsDayMatch: –î–µ–Ω—å –º–µ–Ω—å—à–µ 1 –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å false");
  assertFalse(isDayMatch('weekday-7', january15), "test13_IsDayMatch: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å false");
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
runTests();