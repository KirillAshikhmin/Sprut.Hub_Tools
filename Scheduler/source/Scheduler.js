info = {
  name: "üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π",
  description: "–í–∫–ª—é—á–∞–µ—Ç –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å –≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–Ω–∏ –º–µ—Å—è—Ü–∞ –∏/–∏–ª–∏ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏. –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ https://t.me/smart_sputnik",
  version: "2.0",
  author: "@BOOMikru",
  onStart: true,
  sourceServices: [
    HS.Switch, HS.Outlet, HS.Fan, HS.FanBasic, HS.Lightbulb,
    HS.Faucet, HS.C_PetFeeder, HS.Valve, HS.HeaterCooler, HS.AirPurifier,
    HS.IrrigationSystem, HS.Television, HS.HumidifierDehumidifier, HS.CameraControl
  ],
  sourceCharacteristics: [HC.On, HC.Active],

  options: {
    ScheduleOn: { type: "Boolean", value: true, name: { ru: "–í–∫–ª—é—á–∞—Ç—å –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É", en: "Schedule turn on" }, desc: { ru: "–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –±—É–¥–µ—Ç –≤–∫–ª—é—á–∞—Ç—å—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.", en: "If enabled, the device will turn on according to the schedule." } },
    DaysOfMonthOn: { type: "String", value: "1-31", name: { ru: "‚ÄÉ‚ÄÉ–î–Ω–∏ –º–µ—Å—è—Ü–∞‚ÄØ(–≤–∫–ª)", en: "‚ÄÉ‚ÄÉDays of month (turn on)" }, desc: { ru: "–ß–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '1', '15, 30' –∏–ª–∏ '1-5').\n–í–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –∏ —É–∫–∞–∑–∞–Ω–Ω—ã–º —á–∏—Å–ª–∞–º.", en: "Days of the month to turn on (e.g., '1', '15, 30' or '1-5').\nActivation occurs on selected weekdays and specified days." } },
    MondayOn: { type: "Boolean", value: false, name: { ru: "‚ÄÉ‚ÄÉ–ö–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ (–≤–∫–ª)", en: "‚ÄÉ‚ÄÉEvery Monday (turn on)" }, desc: { ru: "", en: "" } },
    TuesdayOn: { type: "Boolean", value: false, name: { ru: "‚ÄÉ‚ÄÉ–ö–∞–∂–¥—ã–π –≤—Ç–æ—Ä–Ω–∏–∫ (–≤–∫–ª)", en: "‚ÄÉ‚ÄÉEvery Tuesday (turn on)" }, desc: { ru: "", en: "" } },
    WednesdayOn: { type: "Boolean", value: false, name: { ru: "‚ÄÉ‚ÄÉ–ö–∞–∂–¥—É—é —Å—Ä–µ–¥—É (–≤–∫–ª)", en: "‚ÄÉ‚ÄÉEvery Wednesday (turn on)" }, desc: { ru: "", en: "" } },
    ThursdayOn: { type: "Boolean", value: false, name: { ru: "‚ÄÉ‚ÄÉ–ö–∞–∂–¥—ã–π —á–µ—Ç–≤–µ—Ä–≥ (–≤–∫–ª)", en: "‚ÄÉ‚ÄÉEvery Thursday (turn on)" }, desc: { ru: "", en: "" } },
    FridayOn: { type: "Boolean", value: false, name: { ru: "‚ÄÉ‚ÄÉ–ö–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É (–≤–∫–ª)", en: "‚ÄÉ‚ÄÉEvery Friday (turn on)" }, desc: { ru: "", en: "" } },
    SaturdayOn: { type: "Boolean", value: false, name: { ru: "‚ÄÉ‚ÄÉ–ö–∞–∂–¥—É—é —Å—É–±–±–æ—Ç—É (–≤–∫–ª)", en: "‚ÄÉ‚ÄÉEvery Saturday (turn on)" }, desc: { ru: "", en: "" } },
    SundayOn: { type: "Boolean", value: false, name: { ru: "‚ÄÉ‚ÄÉ–ö–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ (–≤–∫–ª)", en: "‚ÄÉ‚ÄÉEvery Sunday (turn on)" }, desc: { ru: "", en: "" } },
    ActiveMonthsOn: { type: "String", value: "1-12", name: { ru: "‚ÄÉ‚ÄÉ–ê–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Å—è—Ü—ã (–≤–∫–ª)", en: "‚ÄÉ‚ÄÉActive months (turn on)" }, desc: { ru: "–ú–µ—Å—è—Ü—ã, –∫–æ–≥–¥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '1', '1, 6, 12' –∏–ª–∏ '6-8').\n–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü.", en: "Months when the device should turn on (e.g., '1', '1, 6, 12' or '6-8').\nBy default every month." } },
    TimeOn: { type: "String", value: "00:00", name: { ru: "‚ÄÉ‚ÄÉ–í—Ä–µ–º—è (–ß–ß:–ú–ú) (–≤–∫–ª)", en: "‚ÄÉ‚ÄÉTime (HH:MM) (turn on)" }, desc: { ru: "–í—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –≤–∫–ª—é—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '08:00, 12:00, 18:00').\n–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π —á–µ—Ä–µ–∑ '–ê–∫—Ç–∏–≤–Ω–æ' –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.", en: "Times when turn on occurs (e.g., '08:00, 12:00, 18:00').\nMultiple times can be separated by commas. Restart the script via 'Active' toggle after changing." } },
    ScheduleOff: { type: "Boolean", value: true, name: { ru: "–û—Ç–∫–ª—é—á–∞—Ç—å –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É", en: "Schedule turn off" }, desc: { ru: "–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–∞—Ç—å—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.", en: "If enabled, the device will turn off according to the schedule." } },
    DaysOfMonthOff: { type: "String", value: "1-31", name: { ru: "‚ÄÉ‚ÄÉ–î–Ω–∏ –º–µ—Å—è—Ü–∞ (–æ—Ç–∫–ª)", en: "‚ÄÉ‚ÄÉDays of month (turn off)" }, desc: { ru: "–ß–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '1', '15, 30' –∏–ª–∏ '1-5').\n–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –∏ —É–∫–∞–∑–∞–Ω–Ω—ã–º —á–∏—Å–ª–∞–º.", en: "Days of the month to turn off (e.g., '1', '15, 30' or '1-5').\nDeactivation occurs on selected weekdays and specified days." } },
    MondayOff: { type: "Boolean", value: false, name: { ru: "‚ÄÉ‚ÄÉ–ö–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ (–æ—Ç–∫–ª)", en: "‚ÄÉ‚ÄÉEvery Monday (turn off)" }, desc: { ru: "", en: "" } },
    TuesdayOff: { type: "Boolean", value: false, name: { ru: "‚ÄÉ‚ÄÉ–ö–∞–∂–¥—ã–π –≤—Ç–æ—Ä–Ω–∏–∫ (–æ—Ç–∫–ª)", en: "‚ÄÉ‚ÄÉEvery Tuesday (turn off)" }, desc: { ru: "", en: "" } },
    WednesdayOff: { type: "Boolean", value: false, name: { ru: "‚ÄÉ‚ÄÉ–ö–∞–∂–¥—É—é —Å—Ä–µ–¥—É (–æ—Ç–∫–ª)", en: "‚ÄÉ‚ÄÉEvery Wednesday (turn off)" }, desc: { ru: "", en: "" } },
    ThursdayOff: { type: "Boolean", value: false, name: { ru: "‚ÄÉ‚ÄÉ–ö–∞–∂–¥—ã–π —á–µ—Ç–≤–µ—Ä–≥ (–æ—Ç–∫–ª)", en: "‚ÄÉ‚ÄÉEvery Thursday (turn off)" }, desc: { ru: "", en: "" } },
    FridayOff: { type: "Boolean", value: false, name: { ru: "‚ÄÉ‚ÄÉ–ö–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É (–æ—Ç–∫–ª)", en: "‚ÄÉ‚ÄÉEvery Friday (turn off)" }, desc: { ru: "", en: "" } },
    SaturdayOff: { type: "Boolean", value: false, name: { ru: "‚ÄÉ‚ÄÉ–ö–∞–∂–¥—É—é —Å—É–±–±–æ—Ç—É (–æ—Ç–∫–ª)", en: "‚ÄÉ‚ÄÉEvery Saturday (turn off)" }, desc: { ru: "", en: "" } },
    SundayOff: { type: "Boolean", value: false, name: { ru: "‚ÄÉ‚ÄÉ–ö–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ (–æ—Ç–∫–ª)", en: "‚ÄÉ‚ÄÉEvery Sunday (turn off)" }, desc: { ru: "", en: "" } },
    ActiveMonthsOff: { type: "String", value: "1-12", name: { ru: "‚ÄÉ‚ÄÉ–ê–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Å—è—Ü—ã (–æ—Ç–∫–ª)", en: "‚ÄÉ‚ÄÉActive months (turn off)" }, desc: { ru: "–ú–µ—Å—è—Ü—ã, –∫–æ–≥–¥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –æ—Ç–∫–ª—é—á–∞—Ç—å—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '1', '1, 6, 12' –∏–ª–∏ '6-8').\n–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü.", en: "Months when the device should turn off (e.g., '1', '1, 6, 12' or '6-8').\nBy default every month." } },
    TimeOff: { type: "String", value: "00:00", name: { ru: "‚ÄÉ‚ÄÉ–í—Ä–µ–º—è (–ß–ß:–ú–ú) (–æ—Ç–∫–ª)", en: "‚ÄÉ‚ÄÉTime (HH:MM) (turn off)" }, desc: { ru: "–í—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '09:00, 13:00, 19:00').\n–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π —á–µ—Ä–µ–∑ '–ê–∫—Ç–∏–≤–Ω–æ' –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.", en: "Times when turn off occurs (e.g., '09:00, 13:00, 19:00').\nMultiple times can be separated by commas. Restart the script via 'Active' toggle after changing." } },
    Invert: { type: "Boolean", value: false, name: { ru: "–ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ", en: "Invert" }, desc: { ru: "–í–º–µ—Å—Ç–æ –≤–∫–ª—é—á–µ–Ω–∏—è –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–∞—Ç—å—Å—è, –∞ –≤–º–µ—Å—Ç–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è - –≤–∫–ª—é—á–∞—Ç—å—Å—è", en: "Instead of turning on it will turn off, and instead of turning off it will turn on" } },
    TurnOffDelay: { type: "Integer", value: 0, name: { ru: "–í—ã–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–∑ (—Å–µ–∫—É–Ω–¥—ã)", en: "Turn off delay (seconds)" }, desc: { ru: "–ü–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ 0, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–∫–ª—é—á–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ '–û—Ç–∫–ª—é—á–∞—Ç—å –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É'.", en: "Delay in seconds before turning off after activation. Set to 0 to disable automatic turn-off.\nDoes not work if 'Schedule turn off' is enabled." } },
    SendNotifications: { type: "Boolean", value: false, name: { ru: "–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", en: "Send notifications" }, desc: { ru: "–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –∏ —Å–∏—Å—Ç–µ–º—É –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤–∫–ª—é—á–µ–Ω–∏–∏/–æ—Ç–∫–ª—é—á–µ–Ω–∏–∏.", en: "If enabled, sends a Telegram and system notification on each turn on/off." } },
    MaintainState: { type: "Boolean", value: false, name: { ru: "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ", en: "Maintain state" }, desc: { ru: "–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –±—É–¥–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –Ω—É–∂–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –¥—Ä—É–≥–∏–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–º –∏–ª–∏ –º–æ—Å—Ç–æ–º, –ø–æ–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.", en: "If enabled, the device will follow the current state upon manual change until the schedule triggers." } }
  },
  variables: {
    cronTasksOn: [], // –ú–∞—Å—Å–∏–≤ –∑–∞–¥–∞—á –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è (–Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤)
    cronTasksOff: [], // –ú–∞—Å—Å–∏–≤ –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è (–Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤)
    prevTimeOn: undefined, // –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–∫–ª—é—á–µ–Ω–∏—è
    prevTimeOff: undefined // –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
  }
}

function trigger(source, value, variables, options, context) {
  let needRestoreTargetState = false
  // –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ —Ä—É—á–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  if (options.MaintainState && !isAutomaticChange(context)) {
    needRestoreTargetState = true
    sendNotification(source, options.SendNotifications, "–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Ä—É—á–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è");
  }

  // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∏–∑ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–∫–ª—é—á–µ–Ω–∏—è –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
  let currentTimeOn = `${options.TimeOn}|${options.DaysOfMonthOn}|${options.ActiveMonthsOn}|${options.SundayOn}|${options.MondayOn}|${options.TuesdayOn}|${options.WednesdayOn}|${options.ThursdayOn}|${options.FridayOn}|${options.SaturdayOn}`;
  let currentTimeOff = `${options.TimeOff}|${options.DaysOfMonthOff}|${options.ActiveMonthsOff}|${options.SundayOff}|${options.MondayOff}|${options.TuesdayOff}|${options.WednesdayOff}|${options.ThursdayOff}|${options.FridayOff}|${options.SaturdayOff}`;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  let hasChanges = needRestoreTargetState || (variables.prevTimeOn !== currentTimeOn || variables.prevTimeOff !== currentTimeOff);
  if (hasChanges) {
    // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏
    variables.cronTasksOn.forEach(task => task.clear());
    variables.cronTasksOn = [];
    variables.cronTasksOff.forEach(task => task.clear());
    variables.cronTasksOff = [];
    variables.prevTimeOn = currentTimeOn;
    variables.prevTimeOff = currentTimeOff;
  }

  // –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è
  if (options.ScheduleOn && variables.cronTasksOn.length === 0) {
    let timesOn = options.TimeOn.split(',').map(t => t.trim());
    let daysOfMonthOn = parseRange(options.DaysOfMonthOn);
    let activeMonthsOn = parseRange(options.ActiveMonthsOn);
    let daysOfWeekOn = [
      options.SundayOn, options.MondayOn, options.TuesdayOn, options.WednesdayOn,
      options.ThursdayOn, options.FridayOn, options.SaturdayOn
    ];

    timesOn.forEach(time => {
      let timeOnObj = parseTime(time);
      let hoursOnStr = timeOnObj.hoursStr;
      let minutesOnStr = timeOnObj.minutesStr;

      let task = Cron.schedule(`0 ${minutesOnStr} ${hoursOnStr} * * *`, function () {
        let now = new Date();
        let month = now.getMonth() + 1;
        let dayOfMonth = now.getDate();
        let dayOfWeek = now.getDay();

        let isMonthMatch = activeMonthsOn.indexOf(month) !== -1;
        let isDayOfMonthMatch = daysOfMonthOn.indexOf(dayOfMonth) !== -1;
        let isDayOfWeekMatch = daysOfWeekOn[dayOfWeek];

        if (isMonthMatch && (isDayOfMonthMatch || isDayOfWeekMatch)) {
          if (setDeviceValue(source, true, options.Invert))
            sendNotification(source, options.SendNotifications, "–≤–∫–ª—é—á–µ–Ω–æ");
          if (options.TurnOffDelay > 0 && !options.ScheduleOff) {
            setTimeout(function () {
              if (setDeviceValue(source, false, options.Invert))
                sendNotification(source, options.SendNotifications, `–æ—Ç–∫–ª—é—á–µ–Ω–æ —á–µ—Ä–µ–∑ ${options.TurnOffDelay} —Å–µ–∫`);
            }, options.TurnOffDelay * 1000);
          }
        }
      });
      variables.cronTasksOn.push(task);
    });
  }

  // –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
  if (options.ScheduleOff && variables.cronTasksOff.length === 0) {
    let timesOff = options.TimeOff.split(',').map(t => t.trim());
    let daysOfMonthOff = parseRange(options.DaysOfMonthOff);
    let activeMonthsOff = parseRange(options.ActiveMonthsOff);
    let daysOfWeekOff = [
      options.SundayOff, options.MondayOff, options.TuesdayOff, options.WednesdayOff,
      options.ThursdayOff, options.FridayOff, options.SaturdayOff
    ];

    timesOff.forEach(time => {
      let timeOffObj = parseTime(time);
      let hoursOffStr = timeOffObj.hoursStr;
      let minutesOffStr = timeOffObj.minutesStr;

      let task = Cron.schedule(`0 ${minutesOffStr} ${hoursOffStr} * * *`, function () {
        let now = new Date();
        let month = now.getMonth() + 1;
        let dayOfMonth = now.getDate();
        let dayOfWeek = now.getDay();

        let isMonthMatch = activeMonthsOff.indexOf(month) !== -1;
        let isDayOfMonthMatch = daysOfMonthOff.indexOf(dayOfMonth) !== -1;
        let isDayOfWeekMatch = daysOfWeekOff[dayOfWeek];

        if (isMonthMatch && (isDayOfMonthMatch || isDayOfWeekMatch)) {
          if (setDeviceValue(source, false, options.Invert))
            sendNotification(source, options.SendNotifications, "–æ—Ç–∫–ª—é—á–µ–Ω–æ");
        }
      });
      variables.cronTasksOff.push(task);
    });
  }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
  if (hasChanges) {
    let now = new Date();
    let currentTimeMinutes = now.getHours() * 60 + now.getMinutes(); // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö —Å –ø–æ–ª—É–Ω–æ—á–∏
    let timesOn = options.TimeOn.split(',').map(t => parseTime(t.trim())).map(t => parseInt(t.hoursStr) * 60 + parseInt(t.minutesStr));
    let timesOff = options.TimeOff.split(',').map(t => parseTime(t.trim())).map(t => parseInt(t.hoursStr) * 60 + parseInt(t.minutesStr));

    let daysOfMonthOn = parseRange(options.DaysOfMonthOn);
    let activeMonthsOn = parseRange(options.ActiveMonthsOn);
    let daysOfWeekOn = [
      options.SundayOn, options.MondayOn, options.TuesdayOn, options.WednesdayOn,
      options.ThursdayOn, options.FridayOn, options.SaturdayOn
    ];
    let daysOfMonthOff = parseRange(options.DaysOfMonthOff);
    let activeMonthsOff = parseRange(options.ActiveMonthsOff);
    let daysOfWeekOff = [
      options.SundayOff, options.MondayOff, options.TuesdayOff, options.WednesdayOff,
      options.ThursdayOff, options.FridayOff, options.SaturdayOff
    ];

    let nowMonth = now.getMonth() + 1;
    let nowDayOfMonth = now.getDate();
    let nowDayOfWeek = now.getDay();

    let isOnMonthMatch = activeMonthsOn.indexOf(nowMonth) !== -1;
    let isOnDayOfMonthMatch = daysOfMonthOn.indexOf(nowDayOfMonth) !== -1;
    let isOnDayOfWeekMatch = daysOfWeekOn[nowDayOfWeek];
    let isOffMonthMatch = activeMonthsOff.indexOf(nowMonth) !== -1;
    let isOffDayOfMonthMatch = daysOfMonthOff.indexOf(nowDayOfMonth) !== -1;
    let isOffDayOfWeekMatch = daysOfWeekOff[nowDayOfWeek];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –¥–µ–Ω—å –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    let isOnDayActive = options.ScheduleOn && isOnMonthMatch && (isOnDayOfMonthMatch || isOnDayOfWeekMatch);
    let isOffDayActive = options.ScheduleOff && isOffMonthMatch && (isOffDayOfMonthMatch || isOffDayOfWeekMatch);

    if (isOnDayActive || isOffDayActive) {
      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å —É—á—ë—Ç–æ–º –ø–µ—Ä–µ—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏
      let events = [];
      timesOn.forEach(time => events.push({ time: time, type: 'on' }));
      timesOff.forEach(time => events.push({ time: time, type: 'off' }));

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
      events.sort((a, b) => a.time - b.time);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      let shouldBeOn = false;
      let lastEventTime = -1;

      for (let event of events) {
        if (event.time <= currentTimeMinutes && event.time > lastEventTime) {
          shouldBeOn = (event.type === 'on' && isOnDayActive) || (shouldBeOn && !(event.type === 'off' && isOffDayActive));
          lastEventTime = event.time;
        }
      }

      // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ "–≤–∫–ª—é—á–µ–Ω–∏–µ" –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤—á–µ—Ä–∞, –∞ "–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ" –µ—â—ë –Ω–µ –±—ã–ª–æ —Å–µ–≥–æ–¥–Ω—è
      if (!shouldBeOn && isOnDayActive && timesOn.some(t => t > timesOff[timesOff.length - 1])) {
        let prevDay = new Date(now);
        prevDay.setDate(now.getDate() - 1);
        let prevDayOfWeek = prevDay.getDay();
        let prevDayOfMonth = prevDay.getDate();
        let isPrevOnDayMatch = activeMonthsOn.indexOf(nowMonth) !== -1 && (daysOfMonthOn.indexOf(prevDayOfMonth) !== -1 || daysOfWeekOn[prevDayOfWeek]);
        if (isPrevOnDayMatch) {
          let lastOnTimeYesterday = timesOn.filter(t => t > timesOff[timesOff.length - 1]).sort().pop();
          if (lastOnTimeYesterday && currentTimeMinutes < timesOff[0]) {
            shouldBeOn = true;
          }
        }
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ
      if (shouldBeOn !== undefined) {
        if (setDeviceValue(source, shouldBeOn, options.Invert))
          sendNotification(source, options.SendNotifications, shouldBeOn ? "–≤–∫–ª—é—á–µ–Ω–æ" : "–æ—Ç–∫–ª—é—á–µ–Ω–æ");
      }
    }
  }
}

function getDeviceName(service) {
  const acc = service.getAccessory();
  const room = acc.getRoom().getName();
  const accName = service.getAccessory().getName();
  const sName = service.getName();
  const name = (accName == sName ? accName : accName + " " + sName) + " (ID:" + service.getUUID() + ", –∫–æ–º–Ω–∞—Ç–∞: " + room + ")";
  return name;
}

function sendNotification(source, enabled, msg) {
  if (enabled) {
    let service = source.getService();
    let deviceName = getDeviceName(service);
    let fullMsg = `${deviceName} ${msg}`;
    console.message(fullMsg);
    if (global.sendToTelegram !== undefined) {
      global.sendToTelegram(fullMsg);
    }
  }
}

function setDeviceValue(source, value, invert) {
  if (invert) value = !value;
  if (source.getType() === HC.On) {
    if (source.getValue() != value) {
      source.setValue(value);
      return true
    }
  } else if (source.getType() === HC.Active) {
    let newValue = value ? 1 : 0
    if (source.getValue() != newValue) {
      source.setValue(newValue);
      return true
    }
  }
  return false
}

function parseRange(str) {
  var result = [];
  if (!str) return result;
  str.replace(/\s/g, "").split(/[,;]/).forEach(function (part) {
    var range = part.split('-');
    if (range.length === 2) {
      var start = parseInt(range[0], 10);
      var end = parseInt(range[1], 10);
      if (start && end && start <= end) {
        for (var i = start; i <= end; i++) result.push(i);
      }
    } else {
      var num = parseInt(part, 10);
      if (num) result.push(num);
    }
  });
  return result.filter(function (num) { return num; });
}

function parseTime(str) {
  var time = str || "00:00";
  var hours, minutes;
  var timeMatch = time.match(/^(\d{1,2}):(\d{1,2})$/);
  if (timeMatch) {
    hours = parseInt(timeMatch[1], 10);
    minutes = parseInt(timeMatch[2], 10);
    if (hours < 0 || hours > 23 || minutes < 0 || minutes > 59) {
      console.warn("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è \"" + time + "\", –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è \"00:00\"");
      hours = 0;
      minutes = 0;
    }
  } else {
    console.warn("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ \"" + time + "\", –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è \"00:00\"");
    hours = 0;
    minutes = 0;
  }
  var hoursStr = hours < 10 ? "0" + hours : "" + hours;
  var minutesStr = minutes < 10 ? "0" + minutes : "" + minutes;
  time = hoursStr + ":" + minutesStr;
  return {
    time: time,
    hoursStr: hoursStr,
    minutesStr: minutesStr
  }
}

function isAutomaticChange(context) {
  // –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —Å–∏–º–≤–æ–ª—É '<-'
  const elements = context.toString().split(' <- ');
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –º–∞—Å—Å–∏–≤–µ
  if (elements.length === 0) {
    return false;
  }
  let last = elements[elements.length - 1];

  // –£—Å–ª–æ–≤–∏–µ 1: –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'CLINK' –∏–ª–∏ 'HUB[OnStart]'
  if (last.startsWith('CLINK') || last.startsWith('HUB[OnStart]')) {
    return true;
  }

  // –£—Å–ª–æ–≤–∏–µ 2: –ü–µ—Ä–≤—ã–µ —Ç—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —à–∞–±–ª–æ–Ω—É 'LOGIC <- C <- LOGIC'
  if (elements.length >= 3 &&
    elements[0].startsWith('LOGIC') &&
    elements[1].startsWith('C') &&
    elements[2].startsWith('LOGIC')) {
    return true;
  }

  // –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä—É—á–Ω–æ–µ
  return false;
}