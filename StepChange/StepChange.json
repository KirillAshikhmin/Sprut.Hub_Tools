{
  "scenarioTemplate": {
    "name": "üìà –ü–æ—à–∞–≥–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–µ –∏–ª–∏ –¥–∞—Ç—á–∏–∫—É –∫–∞—Å–∞–Ω–∏—è",
    "desc": "–ò–∑–º–µ–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤ —Ü–∏–∫–ª–µ, –ø–æ–∫–∞ –∫–Ω–æ–ø–∫–∞ –∑–∞–∂–∞—Ç–∞",
    "active": true,
    "onStart": false,
    "sync": false,
    "data": "let characteristicsList = [];\nlet servicesList = [];\n\nconst directionOptions = [\n    { value: 0, name: { en: \"Increase and decrease\", ru: \"–£–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –∏ —É–º–µ–Ω—å—à–∞—Ç—å\" } },\n    { value: 1, name: { en: \"Increase\", ru: \"–£–≤–µ–ª–∏—á–∏–≤–∞—Ç—å\" } },\n    { value: 2, name: { en: \"Decrease\", ru: \"–£–º–µ–Ω—å—à–∞—Ç—å\" } }\n];\n\ninfo = {\n    name: \"üìà –ü–æ—à–∞–≥–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–µ –∏–ª–∏ –¥–∞—Ç—á–∏–∫—É –∫–∞—Å–∞–Ω–∏—è\",\n    description: \"–ò–∑–º–µ–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤ —Ü–∏–∫–ª–µ, –ø–æ–∫–∞ –∫–Ω–æ–ø–∫–∞ –∑–∞–∂–∞—Ç–∞\",\n    version: \"2.1\",\n    author: \"@BOOMikru Special thx to @dshtolin\",\n    onStart: false,\n\n    sourceServices: [HS.ContactSensor, HS.StatelessProgrammableSwitch],\n    sourceCharacteristics: [HC.ContactSensorState, HC.ProgrammableSwitchEvent],\n\n    options: {\n        // –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n        characteristic: {\n            name: { en: \"Characteristic\", ru: \"–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\" },\n            type: \"String\",\n            value: \"\",\n            formType: \"list\",\n            values: servicesList\n        },\n        accessoryId: {\n            name: { en: \"‚ÄÉ‚ÄÉ‚ÄÉCharacteristic\", ru: \"‚ÄÉ‚ÄÉ‚ÄÉ–∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ ID –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞\" },\n            type: \"Integer\",\n            value: 0\n        },\n        serviceId: {\n            name: { en: \"‚ÄÉ‚ÄÉ‚ÄÉCharacteristic\", ru: \"‚ÄÉ‚ÄÉ‚ÄÉ–∏ ID —Å–µ—Ä–≤–∏—Å–∞\" },\n            type: \"Integer\",\n            value: 0\n        },\n        notification: {\n            name: { en: \"Send notifications on change\", ru: \"–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö\" },\n            desc: { en: \"System and to Telegram\", ru: \"–°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –≤ Telegram\" },\n            type: \"Boolean\",\n            value: false\n        },\n        debug: {\n            name: { en: \"Debug mode\", ru: \"–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏\" },\n            desc: { en: \"Enable debug logs\", ru: \"–í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏\" },\n            type: \"Boolean\",\n            value: false\n        },\n        singlePressTurn: {\n            name: { en: \"Turn on/off with single press\", ru: \"–í–∫–ª—é—á–∞—Ç—å/–≤—ã–∫–ª—é—á–∞—Ç—å –ø—Ä–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–º –Ω–∞–∂–∞—Ç–∏–∏\" },\n            desc: { en: \"Toggles the device power state\", ru: \"–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–≤–∫–ª/–≤—ã–∫–ª)\" },\n            type: \"Boolean\",\n            value: false\n        },\n        singlePressStopAuto: {\n            name: { en: \"Stop auto change on single press\", ru: \"–ü—Ä–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–º –Ω–∞–∂–∞—Ç–∏–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ\" },\n            desc: { en: \"If enabled, single press stops auto change without turning on/off.\", ru: \"–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, —Ç–æ –æ–¥–∏–Ω–æ—á–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –±–µ–∑ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è.\" },\n            type: \"Boolean\",\n            value: true\n        },\n        positionBehavior: {\n            name: {\n                en: \"Target position stopping behavior\",\n                ru: \"–°–ø–æ—Å–æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¢–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏\"\n            },\n            type: \"Integer\",\n            value: 0,\n            formType: \"list\",\n            values: [\n                { value: 0, name: { en: \"Basic\", ru: \"–ü—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ\" } },\n                { value: 1, name: { en: \"Target\", ru: \"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –¶–µ–ª–µ–≤—É—é –ø–æ–∑–∏—Ü–∏—é —Ä–∞–≤–Ω–æ–π —Ç–µ–∫—É—â–µ–π\" } },\n                { value: 2, name: { en: \"PositionState\", ru: \"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ö–æ–Ω–µ—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∑–Ω–∞—á–µ–Ω–∏–µ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\" } }\n            ]\n        },\n\n        // –û–¥–∏–Ω–æ—á–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ (üñ±Ô∏è)\n        singlePressOn: {\n            name: { en: \"üñ±Ô∏è Single press enabled\", ru: \"üñ±Ô∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–¥–∏–Ω–æ—á–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ\" },\n            desc: { en: \"Does not work if 'Turn on/off with single press' is enabled\", ru: \"–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ '–í–∫–ª—é—á–∞—Ç—å/–≤—ã–∫–ª—é—á–∞—Ç—å –ø—Ä–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–º –Ω–∞–∂–∞—Ç–∏–∏'\" },\n            type: \"Boolean\",\n            value: false\n        },\n        singlePressWhatChange: {\n            name: { en: \"‚ÄÉ‚ÄÉ‚ÄÉWhat change\", ru: \"‚ÄÉ‚ÄÉ‚ÄÉ–ß—Ç–æ –∏–∑–º–µ–Ω—è—Ç—å\" },\n            type: \"Integer\",\n            value: -1,\n            formType: \"list\",\n            values: characteristicsList\n        },\n        singlePressDirection: {\n            name: { en: \"‚ÄÉ‚ÄÉ‚ÄÉChange direction\", ru: \"‚ÄÉ‚ÄÉ‚ÄÉ–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è\" },\n            type: \"Integer\",\n            value: 0,\n            formType: \"list\",\n            values: directionOptions\n        },\n        singlePressToggleDirection: {\n            name: { en: \"‚ÄÉ‚ÄÉ‚ÄÉToggle direction on each trigger\", ru: \"‚ÄÉ‚ÄÉ‚ÄÉ–ú–µ–Ω—è—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏\" },\n            desc: { en: \"If enabled, direction switches with each press\", ru: \"–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –º–µ–Ω—è—Ç—å—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –Ω–∞–∂–∞—Ç–∏–∏\" },\n            type: \"Boolean\",\n            value: false\n        },\n        singlePressIntervalTime: {\n            name: { en: \"‚ÄÉ‚ÄÉ‚ÄÉInterval time (ms)\", ru: \"‚ÄÉ‚ÄÉ‚ÄÉ–í—Ä–µ–º—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (–º—Å)\" },\n            desc: { en: \"If greater than 0, enables automatic characteristic change\", ru: \"–ü—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏–∏ –±–æ–ª—å—à–µ 0 –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏. –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è '–¶–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏'\" },\n            type: \"Integer\",\n            value: 0\n        },\n        singlePressStep: {\n            name: { en: \"‚ÄÉ‚ÄÉ‚ÄÉStep\", ru: \"‚ÄÉ‚ÄÉ‚ÄÉ–®–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è\" },\n            type: \"Double\",\n            value: 10\n        },\n        singlePressZero: {\n            name: { en: \"‚ÄÉ‚ÄÉ‚ÄÉTo zero\", ru: \"‚ÄÉ‚ÄÉ‚ÄÉ–ù–µ —É–º–µ–Ω—å—à–∞—Ç—å –¥–æ 0\" },\n            desc: { en: \"For some characteristics zero value equals turn off\", ru: \"–í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö –∑–Ω–∞—á–µ–Ω–∏–µ 0 –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –≤—ã–∫–ª—é—á–µ–Ω–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–Ω–∞–ø—Ä. —è—Ä–∫–æ—Å—Ç—å —É –ª–∞–º–ø).\" },\n            type: \"Boolean\",\n            value: false\n        },\n        singlePressCustomLimits: {\n            name: { en: \"‚ÄÉ‚ÄÉ‚ÄÉCustom limits\", ru: \"‚ÄÉ‚ÄÉ‚ÄÉ–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è\" },\n            desc: { en: \"Example: 18.5 - 27 or -40 - -0.7\", ru: \"–ü—Ä–∏–º–µ—Ä: 18.5 - 27 –∏–ª–∏ -40 - -0.7.\" },\n            type: \"String\",\n            value: \"\"\n        },\n        singlePressCustomSteps: {\n            name: { en: \"‚ÄÉ‚ÄÉ‚ÄÉCustom steps\", ru: \"‚ÄÉ‚ÄÉ‚ÄÉ–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —à–∞–≥–∏\" },\n            desc: { en: \"Example: 1;7.8;16.5;35\", ru: \"–ß–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π. –ù–∞–ø—Ä–∏–º–µ—Ä: 1;7.8;16.5;35. –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ '–®–∞–≥' –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è\" },\n            type: \"String\",\n            value: \"\"\n        },\n\n        // –î–≤–æ–π–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ (üñ±Ô∏èüñ±Ô∏è)\n        doublePressOn: {\n            name: { en: \"üñ±Ô∏èüñ±Ô∏è Double press enabled\", ru: \"üñ±Ô∏èüñ±Ô∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–≤–æ–π–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ\" },\n            type: \"Boolean\",\n            value: false\n        },\n        doublePressWhatChange: {\n            name: { en: \"‚ÄÉ‚ÄÉ‚ÄÉWhat change\", ru: \"‚ÄÉ‚ÄÉ‚ÄÉ–ß—Ç–æ –∏–∑–º–µ–Ω—è—Ç—å\" },\n            type: \"Integer\",\n            value: -1,\n            formType: \"list\",\n            values: characteristicsList\n        },\n        doublePressDirection: {\n            name: { en: \"‚ÄÉ‚ÄÉ‚ÄÉChange direction\", ru: \"‚ÄÉ‚ÄÉ‚ÄÉ–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è\" },\n            type: \"Integer\",\n            value: 0,\n            formType: \"list\",\n            values: directionOptions\n        },\n        doublePressToggleDirection: {\n            name: { en: \"‚ÄÉ‚ÄÉ‚ÄÉToggle direction on each trigger\", ru: \"‚ÄÉ‚ÄÉ‚ÄÉ–ú–µ–Ω—è—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏\" },\n            desc: { en: \"If enabled, direction switches with each press\", ru: \"–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –º–µ–Ω—è—Ç—å—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –Ω–∞–∂–∞—Ç–∏–∏\" },\n            type: \"Boolean\",\n            value: false\n        },\n        doublePressIntervalTime: {\n            name: { en: \"‚ÄÉ‚ÄÉ‚ÄÉInterval time (ms)\", ru: \"‚ÄÉ‚ÄÉ‚ÄÉ–í—Ä–µ–º—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (–º—Å)\" },\n            desc: { en: \"If greater than 0, enables automatic characteristic change\", ru: \"–ü—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏–∏ –±–æ–ª—å—à–µ 0 –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏. –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è '–¶–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏'\" },\n            type: \"Integer\",\n            value: 0\n        },\n        doublePressStep: {\n            name: { en: \"‚ÄÉ‚ÄÉ‚ÄÉStep\", ru: \"‚ÄÉ‚ÄÉ‚ÄÉ–®–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è\" },\n            type: \"Double\",\n            value: 0\n        },\n        doublePressZero: {\n            name: { en: \"‚ÄÉ‚ÄÉ‚ÄÉTo zero\", ru: \"‚ÄÉ‚ÄÉ‚ÄÉ–ù–µ —É–º–µ–Ω—å—à–∞—Ç—å –¥–æ 0\" },\n            desc: { en: \"For some characteristics zero value equals turn off\", ru: \"–í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö –∑–Ω–∞—á–µ–Ω–∏–µ 0 –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –≤—ã–∫–ª—é—á–µ–Ω–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–Ω–∞–ø—Ä. —è—Ä–∫–æ—Å—Ç—å —É –ª–∞–º–ø).\" },\n            type: \"Boolean\",\n            value: false\n        },\n        doublePressCustomLimits: {\n            name: { en: \"‚ÄÉ‚ÄÉ‚ÄÉCustom limits\", ru: \"‚ÄÉ‚ÄÉ‚ÄÉ–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è\" },\n            desc: { en: \"Example: 18.5 - 27 or -40 - -0.7\", ru: \"–ü—Ä–∏–º–µ—Ä: 18.5 - 27 –∏–ª–∏ -40 - -0.7.\" },\n            type: \"String\",\n            value: \"\"\n        },\n        doublePressCustomSteps: {\n            name: { en: \"‚ÄÉ‚ÄÉ‚ÄÉCustom steps\", ru: \"‚ÄÉ‚ÄÉ‚ÄÉ–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —à–∞–≥–∏\" },\n            desc: { en: \"Example: 1;7.8;16.5;35\", ru: \"–ß–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π. –ù–∞–ø—Ä–∏–º–µ—Ä: 1;7.8;16.5;35. –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ '–®–∞–≥' –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è\" },\n            type: \"String\",\n            value: \"\"\n        },\n\n        // –î–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ (üñ±Ô∏è‚è≥)\n        longPressOn: {\n            name: { en: \"üñ±Ô∏è‚è≥ Long press enabled\", ru: \"üñ±Ô∏è‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ\" },\n            type: \"Boolean\",\n            value: false\n        },\n        longPressWhatChange: {\n            name: { en: \"‚ÄÉ‚ÄÉ‚ÄÉWhat change\", ru: \"‚ÄÉ‚ÄÉ‚ÄÉ–ß—Ç–æ –∏–∑–º–µ–Ω—è—Ç—å\" },\n            type: \"Integer\",\n            value: -1,\n            formType: \"list\",\n            values: characteristicsList\n        },\n        longPressDirection: {\n            name: { en: \"‚ÄÉ‚ÄÉ‚ÄÉChange direction\", ru: \"‚ÄÉ‚ÄÉ‚ÄÉ–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è\" },\n            type: \"Integer\",\n            value: 0,\n            formType: \"list\",\n            values: directionOptions\n        },\n        longPressToggleDirection: {\n            name: { en: \"‚ÄÉ‚ÄÉ‚ÄÉToggle direction on each trigger\", ru: \"‚ÄÉ‚ÄÉ‚ÄÉ–ú–µ–Ω—è—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏\" },\n            desc: { en: \"If enabled, direction switches with each press\", ru: \"–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –º–µ–Ω—è—Ç—å—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –Ω–∞–∂–∞—Ç–∏–∏\" },\n            type: \"Boolean\",\n            value: false\n        },\n        longPressIntervalTime: {\n            name: { en: \"‚ÄÉ‚ÄÉ‚ÄÉInterval time (ms)\", ru: \"‚ÄÉ‚ÄÉ‚ÄÉ–í—Ä–µ–º—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (–º—Å)\" },\n            desc: { en: \"If greater than 0, enables automatic characteristic change\", ru: \"–ü—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏–∏ –±–æ–ª—å—à–µ 0 –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏. –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è '–¶–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏'\" },\n            type: \"Integer\",\n            value: 0\n        },\n        longPressStep: {\n            name: { en: \"‚ÄÉ‚ÄÉ‚ÄÉStep\", ru: \"‚ÄÉ‚ÄÉ‚ÄÉ–®–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è\" },\n            type: \"Double\",\n            value: 0\n        },\n        longPressZero: {\n            name: { en: \"‚ÄÉ‚ÄÉ‚ÄÉTo zero\", ru: \"‚ÄÉ‚ÄÉ‚ÄÉ–ù–µ —É–º–µ–Ω—å—à–∞—Ç—å –¥–æ 0\" },\n            desc: { en: \"For some characteristics zero value equals turn off\", ru: \"–í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö –∑–Ω–∞—á–µ–Ω–∏–µ 0 –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –≤—ã–∫–ª—é—á–µ–Ω–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–Ω–∞–ø—Ä. —è—Ä–∫–æ—Å—Ç—å —É –ª–∞–º–ø).\" },\n            type: \"Boolean\",\n            value: false\n        },\n        longPressCustomLimits: {\n            name: { en: \"‚ÄÉ‚ÄÉ‚ÄÉCustom limits\", ru: \"‚ÄÉ‚ÄÉ‚ÄÉ–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è\" },\n            desc: { en: \"Example: 18.5 - 27 or -40 - -0.7\", ru: \"–ü—Ä–∏–º–µ—Ä: 18.5 - 27 –∏–ª–∏ -40 - -0.7.\" },\n            type: \"String\",\n            value: \"\"\n        },\n        longPressCustomSteps: {\n            name: { en: \"‚ÄÉ‚ÄÉ‚ÄÉCustom steps\", ru: \"‚ÄÉ‚ÄÉ‚ÄÉ–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —à–∞–≥–∏\" },\n            desc: { en: \"Example: 1;7.8;16.5;35\", ru: \"–ß–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π. –ù–∞–ø—Ä–∏–º–µ—Ä: 1;7.8;16.5;35. –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ '–®–∞–≥' –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è\" },\n            type: \"String\",\n            value: \"\"\n        },\n\n        // –î–∞—Ç—á–∏–∫ –∫–∞—Å–∞–Ω–∏—è (üëÜ)\n        contactSensorOn: {\n            name: { en: \"üëÜ Contact sensor enabled\", ru: \"üëÜ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–∞—Ç—á–∏–∫ –∫–∞—Å–∞–Ω–∏—è\" },\n            type: \"Boolean\",\n            value: false\n        },\n        contactSensorWhatChange: {\n            name: { en: \"‚ÄÉ‚ÄÉ‚ÄÉWhat change\", ru: \"‚ÄÉ‚ÄÉ‚ÄÉ–ß—Ç–æ –∏–∑–º–µ–Ω—è—Ç—å\" },\n            type: \"Integer\",\n            value: -1,\n            formType: \"list\",\n            values: characteristicsList\n        },\n        contactSensorDirection: {\n            name: { en: \"‚ÄÉ‚ÄÉ‚ÄÉChange direction\", ru: \"‚ÄÉ‚ÄÉ‚ÄÉ–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è\" },\n            type: \"Integer\",\n            value: 0,\n            formType: \"list\",\n            values: directionOptions\n        },\n        contactSensorToggleDirection: {\n            name: { en: \"‚ÄÉ‚ÄÉ‚ÄÉToggle direction on each trigger\", ru: \"‚ÄÉ‚ÄÉ‚ÄÉ–ú–µ–Ω—è—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏\" },\n            desc: { en: \"If enabled, direction switches with each sensor trigger\", ru: \"–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –º–µ–Ω—è—Ç—å—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ –¥–∞—Ç—á–∏–∫–∞\" },\n            type: \"Boolean\",\n            value: false\n        },\n        contactSensorIntervalTime: {\n            name: { en: \"‚ÄÉ‚ÄÉ‚ÄÉInterval time (ms)\", ru: \"‚ÄÉ‚ÄÉ‚ÄÉ–í—Ä–µ–º—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (–º—Å)\" },\n            desc: { en: \"Not use for TargetPosition\", ru: \"–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è '–¶–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏'\" },\n            type: \"Integer\",\n            value: 500\n        },\n        contactSensorStep: {\n            name: { en: \"‚ÄÉ‚ÄÉ‚ÄÉStep\", ru: \"‚ÄÉ‚ÄÉ‚ÄÉ–®–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è\" },\n            type: \"Double\",\n            value: 10\n        },\n        contactSensorZero: {\n            name: { en: \"‚ÄÉ‚ÄÉ‚ÄÉTo zero\", ru: \"‚ÄÉ‚ÄÉ‚ÄÉ–ù–µ —É–º–µ–Ω—å—à–∞—Ç—å –¥–æ 0\" },\n            desc: { en: \"For some characteristics zero value equals turn off\", ru: \"–í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö –∑–Ω–∞—á–µ–Ω–∏–µ 0 –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –≤—ã–∫–ª—é—á–µ–Ω–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–Ω–∞–ø—Ä. —è—Ä–∫–æ—Å—Ç—å —É –ª–∞–º–ø).\" },\n            type: \"Boolean\",\n            value: false\n        },\n        contactSensorCustomLimits: {\n            name: { en: \"‚ÄÉ‚ÄÉ‚ÄÉCustom limits\", ru: \"‚ÄÉ‚ÄÉ‚ÄÉ–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è\" },\n            desc: { en: \"Example: 18.5 - 27 or -40 - -0.7\", ru: \"–ü—Ä–∏–º–µ—Ä: 18.5 - 27 –∏–ª–∏ -40 - -0.7.\" },\n            type: \"String\",\n            value: \"\"\n        },\n        contactSensorCustomSteps: {\n            name: { en: \"‚ÄÉ‚ÄÉ‚ÄÉCustom steps\", ru: \"‚ÄÉ‚ÄÉ‚ÄÉ–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —à–∞–≥–∏\" },\n            desc: { en: \"Example: 1;7.8;16.5;35\", ru: \"–ß–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π. –ù–∞–ø—Ä–∏–º–µ—Ä: 1;7.8;16.5;35. –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ '–®–∞–≥' –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è\" },\n            type: \"String\",\n            value: \"\"\n        },\n        contactSensorDelay: {\n            name: { en: \"‚ÄÉ‚ÄÉ‚ÄÉDelay time (ms)\", ru: \"‚ÄÉ‚ÄÉ‚ÄÉ–í—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ (–º—Å)\" },\n            desc: { en: \"Delay before starting changes, set to 0 to disable delay\", ru: \"–ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ 0 –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏\" },\n            type: \"Integer\",\n            value: 500\n        },\n    },\n\n    variables: {\n        delayTimer: undefined,\n        buttonInterval: undefined,\n        contactSensorInterval: undefined,\n        singlePressIncreaseDirection: undefined,\n        doublePressIncreaseDirection: undefined,\n        longPressIncreaseDirection: undefined,\n        contactSensorIncreaseDirection: undefined,\n        lastLimitTime: undefined\n    }\n};\nlet inTestMode = false\n\nfunction trigger(source, value, variables, options) {\n    try {\n        let service;\n        let variableKey = \"StepChange_\" + source.getService().getUUID()\n        let variableUUID = GlobalVariables[variableKey]\n        if (variableUUID && variableKey.length >= 14) {\n            let serviceFromVariable = getServiceByUUID(variableUUID)\n            if (serviceFromVariable) {\n                service = serviceFromVariable\n            } else {\n                return\n            }\n        }\n        if (service == undefined || service == null) {\n            if (options.characteristic !== '') {\n                let serviceFromVariable = getServiceByUUID(options.characteristic)\n                if (serviceFromVariable) {\n                    service = serviceFromVariable\n                } else {\n                    return\n                }\n            } else {\n                let accessory = Hub.getAccessory(options.accessoryId);\n                if (accessory == null) {\n                    log.error(\"–í–≤–µ–¥—ë–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\");\n                    return;\n                }\n                service = accessory.getService(options.serviceId);\n                if (service == null) {\n                    log.error(\"–í–≤–µ–¥—ë–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω —É –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞ {} {}\", accessory.getName(), accessory.getUUID());\n                    return;\n                }\n            }\n        }\n\n        const notification = options.notification;\n        const isButton = source.getType() === HC.ProgrammableSwitchEvent;\n        const isContactSensor = source.getType() === HC.ContactSensorState;\n\n        if (isButton) {\n            if (value === 0 && options.singlePressStopAuto) {\n                let stopped = false\n                if (variables.buttonInterval) {\n                    debug(\"–û–¥–∏–Ω–æ—á–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ: –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è\", source, options);\n                    clearInterval(variables.buttonInterval);\n                    variables.buttonInterval = undefined;\n                    stopped = true\n                }\n                let currentPosition = service.getCharacteristic(HC.CurrentPosition)\n                if (currentPosition) {\n                    if (options.positionBehavior == 1) {\n                        let targetPosition = service.getCharacteristic(HC.TargetPosition)\n                        if (targetPosition && currentPosition.getValue() != targetPosition.getValue()) {\n                            debug(\"–û–¥–∏–Ω–æ—á–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Ä–∞–≤–Ω–æ–π —Ç–µ–∫—É—â–µ–π\", source, options);\n                            targetPosition.setValue(currentPosition.getValue())\n                            stopped = true\n                        }\n                    } else if (options.positionBehavior == 2) {\n                        let positionState = service.getCharacteristic(HC.PositionState)\n                        let targetPositionState = service.getCharacteristic(HC.C_TargetPositionState)\n                        if (positionState && targetPositionState && positionState.getValue() != 2) {\n                            debug(\"–û–¥–∏–Ω–æ—á–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω–µ—á–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\", source, options);\n                            targetPositionState.setValue(2)\n                            stopped = true\n                        }\n                    }\n                }\n                if (stopped) return\n            }\n\n            if (value === 0 && options.singlePressTurn) {\n                const currentTime = Date.now();\n                if (variables.lastLimitTime && (currentTime - variables.lastLimitTime < 3000)) {\n                    debug(\"–û–¥–∏–Ω–æ—á–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ: –ø—Ä–æ—à–ª–æ –º–µ–Ω–µ–µ 3 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞\", source, options);\n                    variables.lastLimitTime = currentTime - 10000;\n                    return;\n                }\n                debug(\"–û–¥–∏–Ω–æ—á–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ: –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\", source, options);\n                const onCharacteristic = service.getCharacteristic(HC.On);\n                const activeCharacteristic = service.getCharacteristic(HC.Active);\n                let isOn = (onCharacteristic && onCharacteristic.getValue()) || (activeCharacteristic && activeCharacteristic.getValue() === 1);\n                setDevicePowerState(service, !isOn, source, options);\n                return;\n            }\n\n            let pressType, whatChange, step, customSteps, intervalTime, direction, enabled, increaseDirectionVar, zero, customLimitsStr, toggleDirection;\n            if (value === 0 && options.singlePressOn) {\n                pressType = \"–û–¥–∏–Ω–æ—á–Ω–æ–µ\";\n                whatChange = options.singlePressWhatChange;\n                step = options.singlePressStep;\n                customSteps = parseCustomSteps(options.singlePressCustomSteps);\n                intervalTime = options.singlePressIntervalTime;\n                direction = options.singlePressDirection;\n                enabled = options.singlePressOn;\n                increaseDirectionVar = \"singlePressIncreaseDirection\";\n                zero = options.singlePressZero;\n                customLimitsStr = options.singlePressCustomLimits;\n                toggleDirection = options.singlePressToggleDirection;\n            } else if (value === 1 && options.doublePressOn) {\n                pressType = \"–î–≤–æ–π–Ω–æ–µ\";\n                whatChange = options.doublePressWhatChange;\n                step = options.doublePressStep;\n                customSteps = parseCustomSteps(options.doublePressCustomSteps);\n                intervalTime = options.doublePressIntervalTime;\n                direction = options.doublePressDirection;\n                enabled = options.doublePressOn;\n                increaseDirectionVar = \"doublePressIncreaseDirection\";\n                zero = options.doublePressZero;\n                customLimitsStr = options.doublePressCustomLimits;\n                toggleDirection = options.doublePressToggleDirection;\n            } else if (value === 2 && options.longPressOn) {\n                pressType = \"–î–æ–ª–≥–æ–µ\";\n                whatChange = options.longPressWhatChange;\n                step = options.longPressStep;\n                customSteps = parseCustomSteps(options.longPressCustomSteps);\n                intervalTime = options.longPressIntervalTime;\n                direction = options.longPressDirection;\n                enabled = options.longPressOn;\n                increaseDirectionVar = \"longPressIncreaseDirection\";\n                zero = options.longPressZero;\n                customLimitsStr = options.longPressCustomLimits;\n                toggleDirection = options.longPressToggleDirection;\n            } else {\n                debug(`–°–æ–±—ã—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —Å value=${value} –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ`, source, options);\n                return;\n            }\n\n            if (enabled) {\n                if (whatChange < 0) {\n                    log.error(`–ù–µ –≤—ã–±—Ä–∞–Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è ${pressType} –Ω–∞–∂–∞—Ç–∏—è`);\n                    return;\n                }\n                const characteristic = getCharacteristicByValue(whatChange);\n                if (!characteristic) {\n                    log.error(`–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è ${pressType} –Ω–∞–∂–∞—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);\n                    return;\n                }\n                const characteristicType = characteristic.type;\n                const serviceCharacteristic = service.getCharacteristic(characteristicType);\n                if (!serviceCharacteristic) {\n                    log.error(`–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ ${characteristicType} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —É ${getDeviceName(service)} –¥–ª—è ${pressType} –Ω–∞–∂–∞—Ç–∏—è`);\n                    return;\n                }\n\n                let defaultMin = Math.max(characteristic.min, serviceCharacteristic.getMinValue());\n                let defaultMax = (serviceCharacteristic.getMaxValue() != 0) ? Math.min(characteristic.max, serviceCharacteristic.getMaxValue()) : characteristic.max;\n                const customLimits = parseCustomLimits(customLimitsStr);\n                const characteristicMin = customLimits ? customLimits.min : (defaultMin === 0 && zero ? 1 : defaultMin);\n                const characteristicMax = customLimits ? customLimits.max : defaultMax;\n                const middleValue = (characteristicMax - characteristicMin) / 2;\n\n                let currentValue = serviceCharacteristic.getValue();\n                step = serviceCharacteristic.getMinStep() != 0 ? Math.max(step, serviceCharacteristic.getMinStep()) : step\n\n                if (step > 0 || customSteps) {\n                    let increase = getIsIncrease(direction, currentValue, middleValue, variables, increaseDirectionVar);\n                    let nextValue = getNextValue(currentValue, characteristicMin, characteristicMax, step, customSteps, increase);\n                    debug(`–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ ${characteristic.name.ru} —Å ${currentValue} –Ω–∞ ${nextValue.value} (—É–≤–µ–ª–∏—á–µ–Ω–∏–µ: ${increase}) –¥–ª—è ${pressType} –Ω–∞–∂–∞—Ç–∏—è`, source, options);\n                    setValueAndSendNotify(serviceCharacteristic, characteristic, nextValue.value, notification, source, options);\n\n                    if (nextValue.isLimit) {\n                        variables[increaseDirectionVar] = !increase;\n                        debug(`–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø—Ä–µ–¥–µ–ª: ${nextValue.value}, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${variables[increaseDirectionVar]} –¥–ª—è ${pressType} –Ω–∞–∂–∞—Ç–∏—è`, source, options);\n                    } else if (toggleDirection) {\n                        variables[increaseDirectionVar] = !increase;\n                        debug(`–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${variables[increaseDirectionVar] ? \"—É–≤–µ–ª–∏—á–µ–Ω–∏–µ\" : \"—É–º–µ–Ω—å—à–µ–Ω–∏–µ\"} –¥–ª—è ${pressType} –Ω–∞–∂–∞—Ç–∏—è`, source, options);\n                    }\n\n                    if (intervalTime > 0 && !variables.contactSensorInterval) {\n                        if (variables.buttonInterval) {\n                            debug(`–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è ${pressType} –Ω–∞–∂–∞—Ç–∏—è`, source, options);\n                            clearInterval(variables.buttonInterval);\n                            variables.buttonInterval = undefined;\n                        } else {\n                            debug(`–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è ${pressType} –Ω–∞–∂–∞—Ç–∏—è —Å –ø–µ—Ä–∏–æ–¥–æ–º ${intervalTime} –º—Å`, source, options);\n                            variables.buttonInterval = setInterval(function () {\n                                let currentValue = serviceCharacteristic.getValue();\n                                let nextValue = getNextValue(currentValue, characteristicMin, characteristicMax, step, customSteps, increase);\n                                debug(`–ò–Ω—Ç–µ—Ä–≤–∞–ª: –∏–∑–º–µ–Ω–µ–Ω–∏–µ ${characteristic.name.ru} –Ω–∞ ${nextValue.value}`, source, options);\n                                setValueAndSendNotify(serviceCharacteristic, characteristic, nextValue.value, notification, source, options);\n                                if (nextValue.isLimit) {\n                                    variables[increaseDirectionVar] = !increase;\n                                    debug(`–ò–Ω—Ç–µ—Ä–≤–∞–ª: –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ø—Ä–µ–¥–µ–ª ${nextValue.value}, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞`, source, options);\n                                    clearInterval(variables.buttonInterval);\n                                    variables.buttonInterval = undefined;\n                                    variables.lastLimitTime = Date.now();\n                                }\n                            }, intervalTime);\n                        }\n                    }\n                }\n            }\n        }\n\n\n\n        if (isContactSensor && options.contactSensorOn) {\n            const whatChange = options.contactSensorWhatChange;\n            if (whatChange < 0) {\n                log.error(\"–ù–µ –≤—ã–±—Ä–∞–Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ –∫–∞—Å–∞–Ω–∏—è\");\n                return;\n            }\n            const characteristic = getCharacteristicByValue(whatChange);\n            if (!characteristic) {\n                log.error(\"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ –∫–∞—Å–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\");\n                return;\n            }\n            const characteristicType = characteristic.type;\n            const serviceCharacteristic = service.getCharacteristic(characteristicType);\n            if (!serviceCharacteristic) {\n                log.error(`–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ ${characteristicType} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —É ${getDeviceName(service)} –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ –∫–∞—Å–∞–Ω–∏—è`);\n                return;\n            }\n\n            let defaultMin = Math.max(characteristic.min, serviceCharacteristic.getMinValue());\n            let defaultMax = (serviceCharacteristic.getMaxValue() != 0) ? Math.min(characteristic.max, serviceCharacteristic.getMaxValue()) : characteristic.max;\n            const customLimits = parseCustomLimits(options.contactSensorCustomLimits);\n            const characteristicMin = customLimits ? customLimits.min : (defaultMin === 0 && options.contactSensorZero ? 1 : defaultMin);\n            const characteristicMax = customLimits ? customLimits.max : defaultMax;\n            const middleValue = (characteristicMax - characteristicMin) / 2;\n\n            const step = serviceCharacteristic.getMinStep() != 0 ? Math.max(options.contactSensorStep, serviceCharacteristic.getMinStep()) : options.contactSensorStep\n            const customSteps = parseCustomSteps(options.contactSensorCustomSteps);\n            const intervalTime = options.contactSensorIntervalTime;\n            const direction = options.contactSensorDirection;\n            const delay = options.contactSensorDelay;\n            const toggleDirection = options.contactSensorToggleDirection;\n\n            if (value === 1) {\n                debug(\"–î–∞—Ç—á–∏–∫ –∫–∞—Å–∞–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç\", source, options);\n                if (variables.delayTimer) {\n                    debug(\"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–∞–π–º–µ—Ä–∞ –¥–∞—Ç—á–∏–∫–∞ –∫–∞—Å–∞–Ω–∏—è\", source, options);\n                    clearTimeout(variables.delayTimer);\n                    variables.delayTimer = undefined;\n                }\n\n                const startInterval = function () {\n                    variables.delayTimer = undefined;\n                    let currentValue = serviceCharacteristic.getValue();\n                    let increase = getIsIncrease(direction, currentValue, middleValue, variables, \"contactSensorIncreaseDirection\");\n                    let nextValue = getNextValue(currentValue, characteristicMin, characteristicMax, step, customSteps, increase);\n                    debug(`–ù–∞—á–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ ${characteristic.name.ru} –Ω–∞ ${nextValue.value} –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ –∫–∞—Å–∞–Ω–∏—è`, source, options);\n                    setValueAndSendNotify(serviceCharacteristic, characteristic, nextValue.value, notification, source, options);\n\n                    if (nextValue.isLimit) {\n                        variables.contactSensorIncreaseDirection = !increase;\n                        debug(`–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø—Ä–µ–¥–µ–ª: ${nextValue.value}, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${variables.contactSensorIncreaseDirection} –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ –∫–∞—Å–∞–Ω–∏—è`, source, options);\n                    } else if (toggleDirection) {\n                        variables.contactSensorIncreaseDirection = !increase;\n                        debug(`–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${variables.contactSensorIncreaseDirection ? \"—É–≤–µ–ª–∏—á–µ–Ω–∏–µ\" : \"—É–º–µ–Ω—å—à–µ–Ω–∏–µ\"} –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ –∫–∞—Å–∞–Ω–∏—è`, source, options);\n                    }\n\n                    debug(`–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–∞—Ç—á–∏–∫–∞ –∫–∞—Å–∞–Ω–∏—è —Å –ø–µ—Ä–∏–æ–¥–æ–º ${intervalTime} –º—Å`, source, options);\n                    variables.contactSensorInterval = setInterval(function () {\n                        let currentValue = serviceCharacteristic.getValue();\n                        let nextValue = getNextValue(currentValue, characteristicMin, characteristicMax, step, customSteps, increase);\n                        debug(`–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–∞—Ç—á–∏–∫–∞: –∏–∑–º–µ–Ω–µ–Ω–∏–µ ${characteristic.name.ru} –Ω–∞ ${nextValue.value}`, source, options);\n                        setValueAndSendNotify(serviceCharacteristic, characteristic, nextValue.value, notification, source, options);\n                        if (nextValue.isLimit) {\n                            variables.contactSensorIncreaseDirection = !increase;\n                            debug(`–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–∞—Ç—á–∏–∫–∞: –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ø—Ä–µ–¥–µ–ª ${nextValue.value}, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞`, source, options);\n                            clearInterval(variables.contactSensorInterval);\n                            variables.contactSensorInterval = undefined;\n                            variables.lastLimitTime = Date.now();\n                        }\n                    }, intervalTime);\n                };\n\n                if (delay > 0) {\n                    debug(`–ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ ${delay} –º—Å –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º`, source, options);\n                    variables.delayTimer = setTimeout(startInterval, delay);\n                } else {\n                    debug(\"–ó–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ (0 –º—Å), –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞\", source, options);\n                    startInterval();\n                }\n            } else {\n                debug(\"–î–∞—Ç—á–∏–∫ –∫–∞—Å–∞–Ω–∏—è –∑–∞–∫—Ä—ã—Ç\", source, options);\n                if (variables.delayTimer) {\n                    debug(\"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –¥–∞—Ç—á–∏–∫–∞ –∫–∞—Å–∞–Ω–∏—è\", source, options);\n                    clearTimeout(variables.delayTimer);\n                    variables.delayTimer = undefined;\n                }\n                if (variables.contactSensorInterval) {\n                    debug(\"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–∞—Ç—á–∏–∫–∞ –∫–∞—Å–∞–Ω–∏—è\", source, options);\n                    clearInterval(variables.contactSensorInterval);\n                    variables.contactSensorInterval = undefined;\n                }\n            }\n        }\n    } catch (e) {\n        log.error(\"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: \" + e.message);\n    }\n}\n\n\nfunction getServiceByUUID(uuid) {\n    let uuidParts = uuid.split('.');\n    const aid = uuidParts[0];\n    const sid = uuidParts[1];\n    service = getAccessoryById(aid).getService(sid);\n    if (service == null) {\n        log.error(\"–í—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\");\n        return null;\n    }\n    return service\n}\n\nfunction getAccessoryById(id) {\n    if (inTestMode) return createAccessory(id)\n    return Hub.getAccessory(id)\n}\n\nfunction debug(text, source, options) {\n    if (options.debug) {\n        console.info(`${DEBUG_TITLE} ${getDeviceName(source.getService())} ${text}`);\n    }\n}\n\nfunction parseCustomLimits(customLimitsStr) {\n    if (!customLimitsStr || customLimitsStr.trim() === \"\") return null;\n\n    const parts = customLimitsStr.split(/\\s*-\\s*/);\n    if (parts.length !== 2) {\n        log.error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç CustomLimits: ${customLimitsStr}. –û–∂–∏–¥–∞–µ—Ç—Å—è 'min - max'`);\n        return null;\n    }\n\n    const min = parseFloat(parts[0].replace(\",\", \".\"));\n    const max = parseFloat(parts[1].replace(\",\", \".\"));\n\n    if (isNaN(min) || isNaN(max)) {\n        log.error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞ –≤ CustomLimits: ${customLimitsStr}`);\n        return null;\n    }\n    if (min >= max) {\n        log.error(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (${min}) –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ (${max}) –≤ CustomLimits: ${customLimitsStr}`);\n        return null;\n    }\n\n    return { min, max };\n}\n\nfunction setDevicePowerState(service, value, source, options) {\n    const onCharacteristic = service.getCharacteristic(HC.On);\n    const activeCharacteristic = service.getCharacteristic(HC.Active);\n    if (onCharacteristic) {\n        onCharacteristic.setValue(value);\n        debug(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ On: ${value} –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ${getDeviceName(service)}`, source, options);\n    }\n    if (activeCharacteristic) {\n        activeCharacteristic.setValue(value ? 1 : 0);\n        debug(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ Active: ${value ? 1 : 0} –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ${getDeviceName(service)}`, source, options);\n    }\n}\n\nfunction setValueAndSendNotify(serviceCharacteristic, characteristic, value, notification, source, options) {\n    serviceCharacteristic.setValue(value);\n    debug(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ ${value} –¥–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ ${characteristic.name.ru} —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ${getDeviceName(serviceCharacteristic.getService())}`, source, options);\n    if (notification) {\n        const text = \"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: \" + characteristic.name.ru + \" —É \" + getDeviceName(serviceCharacteristic.getService());\n        Notify.text(value + \" \" + text).send();\n        if (global.sendToTelegram !== undefined) {\n            global.sendToTelegram([\"*\" + value + \"*\", text]);\n        }\n    }\n}\n\nfunction parseCustomSteps(customSteps) {\n    if (customSteps === '') return null;\n    let itemsStr = customSteps.trim().replace(\" \", \"\").replace(\",\", \".\").split(\";\");\n    let items = [];\n    itemsStr.forEach(function (i) { let value = parseFloat(i); if (!isNaN(value)) items.push(value); });\n    if (items.length <= 1) return null;\n    return items.sort(function (a, b) { return a - b; });\n}\n\nfunction getNextValue(current, min, max, step, customSteps, increase) {\n    let newValue;\n    if (customSteps != null) {\n        newValue = fromCustomSteps(current, customSteps, increase);\n    } else {\n        newValue = increase ? current + step : current - step;\n    }\n    newValue = Math.min(Math.max(newValue, min), max);\n    let isLimit = (!increase && newValue === min) || (increase && newValue === max);\n    return { value: newValue, isLimit: isLimit };\n}\n\nfunction bisectLeft(arr, value) {\n    let lo = 0, hi = arr.length;\n    while (lo < hi) {\n        const mid = (lo + hi) >> 1;\n        if (arr[mid] < value) {\n            lo = mid + 1;\n        } else {\n            hi = mid;\n        }\n    }\n    return lo;\n}\n\nfunction fromCustomSteps(current, customSteps, increase) {\n    if (customSteps.length === 0) return current;\n    const index = bisectLeft(customSteps, current);\n    if (index < customSteps.length && customSteps[index] === current) {\n        return increase ?\n            (index + 1 < customSteps.length ? customSteps[index + 1] : customSteps[index]) :\n            (index - 1 >= 0 ? customSteps[index - 1] : customSteps[index]);\n    } else {\n        return increase ?\n            (index < customSteps.length ? customSteps[index] : customSteps[customSteps.length - 1]) :\n            (index > 0 ? customSteps[index - 1] : customSteps[0]);\n    }\n}\n\nfunction getIsIncrease(direction, currentValue, middleValue, variables, increaseDirectionVar) {\n    let increase;\n    if (direction === 1) {\n        increase = true;\n    } else if (direction === 2) {\n        increase = false;\n    } else {\n        if (variables[increaseDirectionVar] === true) increase = true;\n        else if (variables[increaseDirectionVar] === false) increase = false;\n        else {\n            increase = currentValue < middleValue;\n            variables[increaseDirectionVar] = increase;\n        }\n    }\n    return increase;\n}\n\nfunction getCharacteristicByValue(value) {\n    var target;\n    characteristicsList.forEach(function (c) {\n        if (c.value == value) {\n            target = c;\n            return target;\n        }\n    });\n    return target;\n}\n\nfunction getDeviceName(service) {\n    const acc = service.getAccessory();\n    const room = acc.getRoom().getName();\n    const accName = acc.getName();\n    const sName = service.getName();\n    return room + \" -> \" + (accName === sName ? accName : accName + \" \" + sName) + \" (\" + service.getUUID() + \")\";\n}\n\n// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è characteristicsList\ncharacteristicsList.push({ name: { ru: \"–ù–µ –≤—ã–±—Ä–∞–Ω–æ\", en: \"Not selected\" }, value: -1 });\ncharacteristicsList.push({ name: { ru: \"–Ø—Ä–∫–æ—Å—Ç—å\", en: \"Brightness\" }, value: 0, type: HC.Brightness, min: 0, max: 100 });\ncharacteristicsList.push({ name: { ru: \"–¶–≤–µ—Ç–æ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞\", en: \"Color Temperature\" }, value: 1, type: HC.ColorTemperature, min: 50, max: 400 });\ncharacteristicsList.push({ name: { ru: \"–ù–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å\", en: \"Saturation\" }, value: 2, type: HC.Saturation, min: 0, max: 100 });\ncharacteristicsList.push({ name: { ru: \"–û—Ç—Ç–µ–Ω–æ–∫\", en: \"Hue\" }, value: 3, type: HC.Hue, min: 0, max: 360 });\ncharacteristicsList.push({ name: { ru: \"–¶–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è\", en: \"Target Position\" }, value: 4, type: HC.TargetPosition, min: 0, max: 100 });\ncharacteristicsList.push({ name: { ru: \"–¶–µ–ª–µ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞\", en: \"Target Temperature\" }, value: 5, type: HC.TargetTemperature, min: 0, max: 100 });\ncharacteristicsList.push({ name: { ru: \"–¶–µ–ª–µ–≤–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å\", en: \"Target Relative Humidity\" }, value: 6, type: HC.TargetRelativeHumidity, min: 0, max: 100 });\ncharacteristicsList.push({ name: { ru: \"–ü–æ—Ä–æ–≥ –Ω–∞–≥—Ä–µ–≤–∞\", en: \"Heating Threshold Temperature\" }, value: 7, type: HC.HeatingThresholdTemperature, min: 0, max: 100 });\ncharacteristicsList.push({ name: { ru: \"–ü–æ—Ä–æ–≥ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è\", en: \"Cooling Threshold Temperature\" }, value: 8, type: HC.CoolingThresholdTemperature, min: 0, max: 100 });\ncharacteristicsList.push({ name: { ru: \"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞ (%)\", en: \"Rotation Speed (%)\" }, value: 9, type: HC.RotationSpeed, min: 0, max: 100 });\ncharacteristicsList.push({ name: { ru: \"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞ (–®–∞–≥)\", en: \"Fan Speed (Step)\" }, value: 10, type: HC.C_FanSpeed, min: 0, max: 5 });\ncharacteristicsList.push({ name: { ru: \"–ì—Ä–æ–º–∫–æ—Å—Ç—å\", en: \"Volume\" }, value: 11, type: HC.Volume, min: 0, max: 100 });\ncharacteristicsList.push({ name: { ru: \"–¶–µ–ª–µ–≤–æ–π –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —É–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞\", en: \"Target horizontal tilt angle\" }, value: 12, type: HC.TargetHorizontalTiltAngle, min: -90, max: 90 });\ncharacteristicsList.push({ name: { ru: \"–¶–µ–ª–µ–≤–æ–π –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —É–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞\", en: \"Target vertical tilt angle\" }, value: 13, type: HC.TargetVerticalTiltAngle, min: -90, max: 90 });\ncharacteristicsList.push({ name: { ru: \"–û–ø—Ç–∏—á–µ—Å–∫–∏–π –∑—É–º\", en: \"OpticalZoom\" }, value: 14, type: HC.OpticalZoom, min: 0, max: 100 });\ncharacteristicsList.push({ name: { ru: \"–¶–∏—Ñ—Ä–æ–≤–æ–π –∑—É–º\", en: \"DigitalZoom\" }, value: 15, type: HC.DigitalZoom, min: 0, max: 100 });\ncharacteristicsList.push({ name: { ru: \"–ü–æ–≤–æ—Ä–æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\", en: \"ImageRotation\" }, value: 16, type: HC.ImageRotation, min: 0, max: 270 });\n\nlet characteristicsToFound = characteristicsList.map(c => c.type);\n\n// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è servicesList\nservicesList.push({ name: { ru: \"–ù–µ –≤—ã–±—Ä–∞–Ω–æ\", en: \"Not selected\" }, value: '' });\nlet servicesListUnsort = [];\nHub.getAccessories().forEach(function (a) {\n    a.getServices().forEach(function (s) {\n        let found = false;\n        s.getCharacteristics().forEach(function (c) {\n            if (found || characteristicsToFound.indexOf(c.getType()) < 0) return;\n            const displayname = getDeviceName(s);\n            servicesListUnsort.push({ name: { ru: displayname, en: displayname }, value: s.getUUID() });\n            found = true;\n        });\n    });\n});\nservicesListUnsort.sort((a, b) => a.name.ru.localeCompare(b.name.ru)).forEach(s => servicesList.push(s));\n\n// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏\nconst DEBUG_TITLE = \"üìà –ü–æ—à–∞–≥–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ. \";",
    "type": "LOGIC"
  }
}
