let characteristicsList = [];
let servicesList = [];

const directionOptions = [
    { value: 0, name: { en: "Increase and decrease", ru: "–£–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –∏ —É–º–µ–Ω—å—à–∞—Ç—å" } },
    { value: 1, name: { en: "Increase", ru: "–£–≤–µ–ª–∏—á–∏–≤–∞—Ç—å" } },
    { value: 2, name: { en: "Decrease", ru: "–£–º–µ–Ω—å—à–∞—Ç—å" } }
];

info = {
    name: "üìà –ü–æ—à–∞–≥–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–µ –∏–ª–∏ –¥–∞—Ç—á–∏–∫—É –∫–∞—Å–∞–Ω–∏—è",
    description: "–ò–∑–º–µ–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤ —Ü–∏–∫–ª–µ, –ø–æ–∫–∞ –∫–Ω–æ–ø–∫–∞ –∑–∞–∂–∞—Ç–∞",
    version: "2.1",
    author: "@BOOMikru Special thx to @dshtolin",
    onStart: false,

    sourceServices: [HS.ContactSensor, HS.StatelessProgrammableSwitch],
    sourceCharacteristics: [HC.ContactSensorState, HC.ProgrammableSwitchEvent],

    options: {
        // –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        characteristic: {
            name: { en: "Characteristic", ru: "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ" },
            type: "String",
            value: "",
            formType: "list",
            values: servicesList
        },
        accessoryId: {
            name: { en: "‚ÄÉ‚ÄÉ‚ÄÉCharacteristic", ru: "‚ÄÉ‚ÄÉ‚ÄÉ–∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ ID –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞" },
            type: "Integer",
            value: 0
        },
        serviceId: {
            name: { en: "‚ÄÉ‚ÄÉ‚ÄÉCharacteristic", ru: "‚ÄÉ‚ÄÉ‚ÄÉ–∏ ID —Å–µ—Ä–≤–∏—Å–∞" },
            type: "Integer",
            value: 0
        },
        notification: {
            name: { en: "Send notifications on change", ru: "–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö" },
            desc: { en: "System and to Telegram", ru: "–°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –≤ Telegram" },
            type: "Boolean",
            value: false
        },
        debug: {
            name: { en: "Debug mode", ru: "–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏" },
            desc: { en: "Enable debug logs", ru: "–í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏" },
            type: "Boolean",
            value: false
        },
        singlePressTurn: {
            name: { en: "Turn on/off with single press", ru: "–í–∫–ª—é—á–∞—Ç—å/–≤—ã–∫–ª—é—á–∞—Ç—å –ø—Ä–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–º –Ω–∞–∂–∞—Ç–∏–∏" },
            desc: { en: "Toggles the device power state", ru: "–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–≤–∫–ª/–≤—ã–∫–ª)" },
            type: "Boolean",
            value: false
        },
        singlePressStopAuto: {
            name: { en: "Stop auto change on single press", ru: "–ü—Ä–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–º –Ω–∞–∂–∞—Ç–∏–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ" },
            desc: { en: "If enabled, single press stops auto change without turning on/off.", ru: "–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, —Ç–æ –æ–¥–∏–Ω–æ—á–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –±–µ–∑ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è." },
            type: "Boolean",
            value: true
        },

        // –û–¥–∏–Ω–æ—á–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ (üñ±Ô∏è)
        singlePressOn: {
            name: { en: "üñ±Ô∏è Single press enabled", ru: "üñ±Ô∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–¥–∏–Ω–æ—á–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ" },
            desc: { en: "Does not work if 'Turn on/off with single press' is enabled", ru: "–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ '–í–∫–ª—é—á–∞—Ç—å/–≤—ã–∫–ª—é—á–∞—Ç—å –ø—Ä–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–º –Ω–∞–∂–∞—Ç–∏–∏'" },
            type: "Boolean",
            value: false
        },
        singlePressWhatChange: {
            name: { en: "‚ÄÉ‚ÄÉ‚ÄÉWhat change", ru: "‚ÄÉ‚ÄÉ‚ÄÉ–ß—Ç–æ –∏–∑–º–µ–Ω—è—Ç—å" },
            type: "Integer",
            value: -1,
            formType: "list",
            values: characteristicsList
        },
        singlePressDirection: {
            name: { en: "‚ÄÉ‚ÄÉ‚ÄÉChange direction", ru: "‚ÄÉ‚ÄÉ‚ÄÉ–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è" },
            type: "Integer",
            value: 0,
            formType: "list",
            values: directionOptions
        },
        singlePressToggleDirection: {
            name: { en: "‚ÄÉ‚ÄÉ‚ÄÉToggle direction on each trigger", ru: "‚ÄÉ‚ÄÉ‚ÄÉ–ú–µ–Ω—è—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏" },
            desc: { en: "If enabled, direction switches with each press", ru: "–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –º–µ–Ω—è—Ç—å—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –Ω–∞–∂–∞—Ç–∏–∏" },
            type: "Boolean",
            value: false
        },
        singlePressIntervalTime: {
            name: { en: "‚ÄÉ‚ÄÉ‚ÄÉInterval time (ms)", ru: "‚ÄÉ‚ÄÉ‚ÄÉ–í—Ä–µ–º—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (–º—Å)" },
            desc: { en: "If greater than 0, enables automatic characteristic change", ru: "–ü—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏–∏ –±–æ–ª—å—à–µ 0 –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏. –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è '–¶–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏'" },
            type: "Integer",
            value: 0
        },
        singlePressStep: {
            name: { en: "‚ÄÉ‚ÄÉ‚ÄÉStep", ru: "‚ÄÉ‚ÄÉ‚ÄÉ–®–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è" },
            type: "Double",
            value: 10
        },
        singlePressZero: {
            name: { en: "‚ÄÉ‚ÄÉ‚ÄÉTo zero", ru: "‚ÄÉ‚ÄÉ‚ÄÉ–ù–µ —É–º–µ–Ω—å—à–∞—Ç—å –¥–æ 0" },
            desc: { en: "For some characteristics zero value equals turn off", ru: "–í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö –∑–Ω–∞—á–µ–Ω–∏–µ 0 –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –≤—ã–∫–ª—é—á–µ–Ω–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–Ω–∞–ø—Ä. —è—Ä–∫–æ—Å—Ç—å —É –ª–∞–º–ø)." },
            type: "Boolean",
            value: false
        },
        singlePressCustomLimits: {
            name: { en: "‚ÄÉ‚ÄÉ‚ÄÉCustom limits", ru: "‚ÄÉ‚ÄÉ‚ÄÉ–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è" },
            desc: { en: "Example: 18.5 - 27 or -40 - -0.7", ru: "–ü—Ä–∏–º–µ—Ä: 18.5 - 27 –∏–ª–∏ -40 - -0.7." },
            type: "String",
            value: ""
        },
        singlePressCustomSteps: {
            name: { en: "‚ÄÉ‚ÄÉ‚ÄÉCustom steps", ru: "‚ÄÉ‚ÄÉ‚ÄÉ–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —à–∞–≥–∏" },
            desc: { en: "Example: 1;7.8;16.5;35", ru: "–ß–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π. –ù–∞–ø—Ä–∏–º–µ—Ä: 1;7.8;16.5;35. –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ '–®–∞–≥' –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è" },
            type: "String",
            value: ""
        },

        // –î–≤–æ–π–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ (üñ±Ô∏èüñ±Ô∏è)
        doublePressOn: {
            name: { en: "üñ±Ô∏èüñ±Ô∏è Double press enabled", ru: "üñ±Ô∏èüñ±Ô∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–≤–æ–π–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ" },
            type: "Boolean",
            value: false
        },
        doublePressWhatChange: {
            name: { en: "‚ÄÉ‚ÄÉ‚ÄÉWhat change", ru: "‚ÄÉ‚ÄÉ‚ÄÉ–ß—Ç–æ –∏–∑–º–µ–Ω—è—Ç—å" },
            type: "Integer",
            value: -1,
            formType: "list",
            values: characteristicsList
        },
        doublePressDirection: {
            name: { en: "‚ÄÉ‚ÄÉ‚ÄÉChange direction", ru: "‚ÄÉ‚ÄÉ‚ÄÉ–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è" },
            type: "Integer",
            value: 0,
            formType: "list",
            values: directionOptions
        },
        doublePressToggleDirection: {
            name: { en: "‚ÄÉ‚ÄÉ‚ÄÉToggle direction on each trigger", ru: "‚ÄÉ‚ÄÉ‚ÄÉ–ú–µ–Ω—è—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏" },
            desc: { en: "If enabled, direction switches with each press", ru: "–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –º–µ–Ω—è—Ç—å—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –Ω–∞–∂–∞—Ç–∏–∏" },
            type: "Boolean",
            value: false
        },
        doublePressIntervalTime: {
            name: { en: "‚ÄÉ‚ÄÉ‚ÄÉInterval time (ms)", ru: "‚ÄÉ‚ÄÉ‚ÄÉ–í—Ä–µ–º—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (–º—Å)" },
            desc: { en: "If greater than 0, enables automatic characteristic change", ru: "–ü—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏–∏ –±–æ–ª—å—à–µ 0 –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏. –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è '–¶–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏'" },
            type: "Integer",
            value: 0
        },
        doublePressStep: {
            name: { en: "‚ÄÉ‚ÄÉ‚ÄÉStep", ru: "‚ÄÉ‚ÄÉ‚ÄÉ–®–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è" },
            type: "Double",
            value: 0
        },
        doublePressZero: {
            name: { en: "‚ÄÉ‚ÄÉ‚ÄÉTo zero", ru: "‚ÄÉ‚ÄÉ‚ÄÉ–ù–µ —É–º–µ–Ω—å—à–∞—Ç—å –¥–æ 0" },
            desc: { en: "For some characteristics zero value equals turn off", ru: "–í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö –∑–Ω–∞—á–µ–Ω–∏–µ 0 –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –≤—ã–∫–ª—é—á–µ–Ω–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–Ω–∞–ø—Ä. —è—Ä–∫–æ—Å—Ç—å —É –ª–∞–º–ø)." },
            type: "Boolean",
            value: false
        },
        doublePressCustomLimits: {
            name: { en: "‚ÄÉ‚ÄÉ‚ÄÉCustom limits", ru: "‚ÄÉ‚ÄÉ‚ÄÉ–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è" },
            desc: { en: "Example: 18.5 - 27 or -40 - -0.7", ru: "–ü—Ä–∏–º–µ—Ä: 18.5 - 27 –∏–ª–∏ -40 - -0.7." },
            type: "String",
            value: ""
        },
        doublePressCustomSteps: {
            name: { en: "‚ÄÉ‚ÄÉ‚ÄÉCustom steps", ru: "‚ÄÉ‚ÄÉ‚ÄÉ–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —à–∞–≥–∏" },
            desc: { en: "Example: 1;7.8;16.5;35", ru: "–ß–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π. –ù–∞–ø—Ä–∏–º–µ—Ä: 1;7.8;16.5;35. –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ '–®–∞–≥' –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è" },
            type: "String",
            value: ""
        },

        // –î–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ (üñ±Ô∏è‚è≥)
        longPressOn: {
            name: { en: "üñ±Ô∏è‚è≥ Long press enabled", ru: "üñ±Ô∏è‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ" },
            type: "Boolean",
            value: false
        },
        longPressWhatChange: {
            name: { en: "‚ÄÉ‚ÄÉ‚ÄÉWhat change", ru: "‚ÄÉ‚ÄÉ‚ÄÉ–ß—Ç–æ –∏–∑–º–µ–Ω—è—Ç—å" },
            type: "Integer",
            value: -1,
            formType: "list",
            values: characteristicsList
        },
        longPressDirection: {
            name: { en: "‚ÄÉ‚ÄÉ‚ÄÉChange direction", ru: "‚ÄÉ‚ÄÉ‚ÄÉ–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è" },
            type: "Integer",
            value: 0,
            formType: "list",
            values: directionOptions
        },
        longPressToggleDirection: {
            name: { en: "‚ÄÉ‚ÄÉ‚ÄÉToggle direction on each trigger", ru: "‚ÄÉ‚ÄÉ‚ÄÉ–ú–µ–Ω—è—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏" },
            desc: { en: "If enabled, direction switches with each press", ru: "–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –º–µ–Ω—è—Ç—å—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –Ω–∞–∂–∞—Ç–∏–∏" },
            type: "Boolean",
            value: false
        },
        longPressIntervalTime: {
            name: { en: "‚ÄÉ‚ÄÉ‚ÄÉInterval time (ms)", ru: "‚ÄÉ‚ÄÉ‚ÄÉ–í—Ä–µ–º—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (–º—Å)" },
            desc: { en: "If greater than 0, enables automatic characteristic change", ru: "–ü—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏–∏ –±–æ–ª—å—à–µ 0 –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏. –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è '–¶–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏'" },
            type: "Integer",
            value: 0
        },
        longPressStep: {
            name: { en: "‚ÄÉ‚ÄÉ‚ÄÉStep", ru: "‚ÄÉ‚ÄÉ‚ÄÉ–®–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è" },
            type: "Double",
            value: 0
        },
        longPressZero: {
            name: { en: "‚ÄÉ‚ÄÉ‚ÄÉTo zero", ru: "‚ÄÉ‚ÄÉ‚ÄÉ–ù–µ —É–º–µ–Ω—å—à–∞—Ç—å –¥–æ 0" },
            desc: { en: "For some characteristics zero value equals turn off", ru: "–í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö –∑–Ω–∞—á–µ–Ω–∏–µ 0 –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –≤—ã–∫–ª—é—á–µ–Ω–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–Ω–∞–ø—Ä. —è—Ä–∫–æ—Å—Ç—å —É –ª–∞–º–ø)." },
            type: "Boolean",
            value: false
        },
        longPressCustomLimits: {
            name: { en: "‚ÄÉ‚ÄÉ‚ÄÉCustom limits", ru: "‚ÄÉ‚ÄÉ‚ÄÉ–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è" },
            desc: { en: "Example: 18.5 - 27 or -40 - -0.7", ru: "–ü—Ä–∏–º–µ—Ä: 18.5 - 27 –∏–ª–∏ -40 - -0.7." },
            type: "String",
            value: ""
        },
        longPressCustomSteps: {
            name: { en: "‚ÄÉ‚ÄÉ‚ÄÉCustom steps", ru: "‚ÄÉ‚ÄÉ‚ÄÉ–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —à–∞–≥–∏" },
            desc: { en: "Example: 1;7.8;16.5;35", ru: "–ß–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π. –ù–∞–ø—Ä–∏–º–µ—Ä: 1;7.8;16.5;35. –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ '–®–∞–≥' –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è" },
            type: "String",
            value: ""
        },

        // –î–∞—Ç—á–∏–∫ –∫–∞—Å–∞–Ω–∏—è (üëÜ)
        contactSensorOn: {
            name: { en: "üëÜ Contact sensor enabled", ru: "üëÜ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–∞—Ç—á–∏–∫ –∫–∞—Å–∞–Ω–∏—è" },
            type: "Boolean",
            value: false
        },
        contactSensorWhatChange: {
            name: { en: "‚ÄÉ‚ÄÉ‚ÄÉWhat change", ru: "‚ÄÉ‚ÄÉ‚ÄÉ–ß—Ç–æ –∏–∑–º–µ–Ω—è—Ç—å" },
            type: "Integer",
            value: -1,
            formType: "list",
            values: characteristicsList
        },
        contactSensorDirection: {
            name: { en: "‚ÄÉ‚ÄÉ‚ÄÉChange direction", ru: "‚ÄÉ‚ÄÉ‚ÄÉ–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è" },
            type: "Integer",
            value: 0,
            formType: "list",
            values: directionOptions
        },
        contactSensorToggleDirection: {
            name: { en: "‚ÄÉ‚ÄÉ‚ÄÉToggle direction on each trigger", ru: "‚ÄÉ‚ÄÉ‚ÄÉ–ú–µ–Ω—è—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏" },
            desc: { en: "If enabled, direction switches with each sensor trigger", ru: "–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –º–µ–Ω—è—Ç—å—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ –¥–∞—Ç—á–∏–∫–∞" },
            type: "Boolean",
            value: false
        },
        contactSensorIntervalTime: {
            name: { en: "‚ÄÉ‚ÄÉ‚ÄÉInterval time (ms)", ru: "‚ÄÉ‚ÄÉ‚ÄÉ–í—Ä–µ–º—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (–º—Å)" },
            desc: { en: "Not use for TargetPosition", ru: "–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è '–¶–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏'" },
            type: "Integer",
            value: 500
        },
        contactSensorStep: {
            name: { en: "‚ÄÉ‚ÄÉ‚ÄÉStep", ru: "‚ÄÉ‚ÄÉ‚ÄÉ–®–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è" },
            type: "Double",
            value: 10
        },
        contactSensorZero: {
            name: { en: "‚ÄÉ‚ÄÉ‚ÄÉTo zero", ru: "‚ÄÉ‚ÄÉ‚ÄÉ–ù–µ —É–º–µ–Ω—å—à–∞—Ç—å –¥–æ 0" },
            desc: { en: "For some characteristics zero value equals turn off", ru: "–í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö –∑–Ω–∞—á–µ–Ω–∏–µ 0 –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –≤—ã–∫–ª—é—á–µ–Ω–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–Ω–∞–ø—Ä. —è—Ä–∫–æ—Å—Ç—å —É –ª–∞–º–ø)." },
            type: "Boolean",
            value: false
        },
        contactSensorCustomLimits: {
            name: { en: "‚ÄÉ‚ÄÉ‚ÄÉCustom limits", ru: "‚ÄÉ‚ÄÉ‚ÄÉ–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è" },
            desc: { en: "Example: 18.5 - 27 or -40 - -0.7", ru: "–ü—Ä–∏–º–µ—Ä: 18.5 - 27 –∏–ª–∏ -40 - -0.7." },
            type: "String",
            value: ""
        },
        contactSensorCustomSteps: {
            name: { en: "‚ÄÉ‚ÄÉ‚ÄÉCustom steps", ru: "‚ÄÉ‚ÄÉ‚ÄÉ–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —à–∞–≥–∏" },
            desc: { en: "Example: 1;7.8;16.5;35", ru: "–ß–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π. –ù–∞–ø—Ä–∏–º–µ—Ä: 1;7.8;16.5;35. –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ '–®–∞–≥' –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è" },
            type: "String",
            value: ""
        },
        contactSensorDelay: {
            name: { en: "‚ÄÉ‚ÄÉ‚ÄÉDelay time (ms)", ru: "‚ÄÉ‚ÄÉ‚ÄÉ–í—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ (–º—Å)" },
            desc: { en: "Delay before starting changes, set to 0 to disable delay", ru: "–ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ 0 –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏" },
            type: "Integer",
            value: 500
        },
        positionBehavior: {
            name: {
                en: "Target position stopping behavior",
                ru: "–°–ø–æ—Å–æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¢–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏"
            },
            type: "Integer",
            value: 0,
            formType: "list",
            values: [
                { value: 0, name: { en: "Basic", ru: "–ü—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ" } },
                { value: 1, name: { en: "Target", ru: "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –¶–µ–ª–µ–≤—É—é –ø–æ–∑–∏—Ü–∏—é —Ä–∞–≤–Ω–æ–π —Ç–µ–∫—É—â–µ–π" } },
                { value: 2, name: { en: "PositionState", ru: "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ö–æ–Ω–µ—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∑–Ω–∞—á–µ–Ω–∏–µ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" } }
            ]
        },
    },

    variables: {
        delayTimer: undefined,
        buttonInterval: undefined,
        contactSensorInterval: undefined,
        singlePressIncreaseDirection: undefined,
        doublePressIncreaseDirection: undefined,
        longPressIncreaseDirection: undefined,
        contactSensorIncreaseDirection: undefined,
        lastLimitTime: undefined
    }
};
let inTestMode = false

function trigger(source, value, variables, options) {
    try {
        let service;
        let variableKey = "StepChange_" + source.getService().getUUID()
        let variableUUID = GlobalVariables[variableKey]
        if (variableUUID && variableKey.length >= 14) {
            let serviceFromVariable = getServiceByUUID(variableUUID)
            if (serviceFromVariable) {
                service = serviceFromVariable
            } else {
                return
            }
        }
        if (service == undefined || service == null) {
            if (options.characteristic !== '') {
                let serviceFromVariable = getServiceByUUID(options.characteristic)
                if (serviceFromVariable) {
                    service = serviceFromVariable
                } else {
                    return
                }
            } else {
                let accessory = Hub.getAccessory(options.accessoryId);
                if (accessory == null) {
                    log.error("–í–≤–µ–¥—ë–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
                    return;
                }
                service = accessory.getService(options.serviceId);
                if (service == null) {
                    log.error("–í–≤–µ–¥—ë–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω —É –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞ {} {}", accessory.getName(), accessory.getUUID());
                    return;
                }
            }
        }

        const notification = options.notification;
        const isButton = source.getType() === HC.ProgrammableSwitchEvent;
        const isContactSensor = source.getType() === HC.ContactSensorState;

        if (isButton) {
            if (value === 0 && options.singlePressStopAuto) {
                let stopped = false
                if (variables.buttonInterval) {
                    debug("–û–¥–∏–Ω–æ—á–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ: –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è", source, options);
                    clearInterval(variables.buttonInterval);
                    variables.buttonInterval = undefined;
                    stopped = true
                }
                let currentPosition = service.getCharacteristic(HC.CurrentPosition)
                if (currentPosition) {
                    if (options.positionBehavior == 1) {
                        let targetPosition = service.getCharacteristic(HC.TargetPosition)
                        if (targetPosition && currentPosition.getValue() != targetPosition.getValue()) {
                            debug("–û–¥–∏–Ω–æ—á–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Ä–∞–≤–Ω–æ–π —Ç–µ–∫—É—â–µ–π", source, options);
                            targetPosition.setValue(currentPosition.getValue())
                            stopped = true
                        }
                    } else if (options.positionBehavior == 2) {
                        let targetPositionState = service.getCharacteristic(HC.C_TargetPositionState)
                        if (targetPositionState) {
                            debug("–û–¥–∏–Ω–æ—á–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω–µ—á–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", source, options);
                            targetPositionState.setValue(2)
                            stopped = true
                        }
                    }
                }
                if (stopped) return
            }

            if (value === 0 && options.singlePressTurn) {
                const currentTime = Date.now();
                if (variables.lastLimitTime && (currentTime - variables.lastLimitTime < 3000)) {
                    debug("–û–¥–∏–Ω–æ—á–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ: –ø—Ä–æ—à–ª–æ –º–µ–Ω–µ–µ 3 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞", source, options);
                    variables.lastLimitTime = currentTime - 10000;
                    return;
                }
                debug("–û–¥–∏–Ω–æ—á–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ: –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", source, options);
                const onCharacteristic = service.getCharacteristic(HC.On);
                const activeCharacteristic = service.getCharacteristic(HC.Active);
                let isOn = (onCharacteristic && onCharacteristic.getValue()) || (activeCharacteristic && activeCharacteristic.getValue() === 1);
                setDevicePowerState(service, !isOn, source, options);
                return;
            }

            let pressType, whatChange, step, customSteps, intervalTime, direction, enabled, increaseDirectionVar, zero, customLimitsStr, toggleDirection;
            if (value === 0 && options.singlePressOn) {
                pressType = "–û–¥–∏–Ω–æ—á–Ω–æ–µ";
                whatChange = options.singlePressWhatChange;
                step = options.singlePressStep;
                customSteps = parseCustomSteps(options.singlePressCustomSteps);
                intervalTime = options.singlePressIntervalTime;
                direction = options.singlePressDirection;
                enabled = options.singlePressOn;
                increaseDirectionVar = "singlePressIncreaseDirection";
                zero = options.singlePressZero;
                customLimitsStr = options.singlePressCustomLimits;
                toggleDirection = options.singlePressToggleDirection;
            } else if (value === 1 && options.doublePressOn) {
                pressType = "–î–≤–æ–π–Ω–æ–µ";
                whatChange = options.doublePressWhatChange;
                step = options.doublePressStep;
                customSteps = parseCustomSteps(options.doublePressCustomSteps);
                intervalTime = options.doublePressIntervalTime;
                direction = options.doublePressDirection;
                enabled = options.doublePressOn;
                increaseDirectionVar = "doublePressIncreaseDirection";
                zero = options.doublePressZero;
                customLimitsStr = options.doublePressCustomLimits;
                toggleDirection = options.doublePressToggleDirection;
            } else if (value === 2 && options.longPressOn) {
                pressType = "–î–æ–ª–≥–æ–µ";
                whatChange = options.longPressWhatChange;
                step = options.longPressStep;
                customSteps = parseCustomSteps(options.longPressCustomSteps);
                intervalTime = options.longPressIntervalTime;
                direction = options.longPressDirection;
                enabled = options.longPressOn;
                increaseDirectionVar = "longPressIncreaseDirection";
                zero = options.longPressZero;
                customLimitsStr = options.longPressCustomLimits;
                toggleDirection = options.longPressToggleDirection;
            } else {
                debug(`–°–æ–±—ã—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —Å value=${value} –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ`, source, options);
                return;
            }

            if (enabled) {
                if (whatChange < 0) {
                    log.error(`–ù–µ –≤—ã–±—Ä–∞–Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è ${pressType} –Ω–∞–∂–∞—Ç–∏—è`);
                    return;
                }
                const characteristic = getCharacteristicByValue(whatChange);
                if (!characteristic) {
                    log.error(`–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è ${pressType} –Ω–∞–∂–∞—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
                    return;
                }
                const characteristicType = characteristic.type;
                const serviceCharacteristic = service.getCharacteristic(characteristicType);
                if (!serviceCharacteristic) {
                    log.error(`–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ ${characteristicType} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —É ${getDeviceName(service)} –¥–ª—è ${pressType} –Ω–∞–∂–∞—Ç–∏—è`);
                    return;
                }

                let defaultMin = Math.max(characteristic.min, serviceCharacteristic.getMinValue());
                let defaultMax = (characteristic.getMaxValue() != 0) ? Math.min(characteristic.max, characteristic.getMaxValue()) : characteristic.max;
                const customLimits = parseCustomLimits(customLimitsStr);
                const characteristicMin = customLimits ? customLimits.min : (defaultMin === 0 && zero ? 1 : defaultMin);
                const characteristicMax = customLimits ? customLimits.max : defaultMax;
                const middleValue = (characteristicMax - characteristicMin) / 2;

                let currentValue = serviceCharacteristic.getValue();
                step = serviceCharacteristic.getMinStep() != 0 ? Math.max(step, serviceCharacteristic.getMinStep()) : step

                if (step > 0 || customSteps) {
                    let increase = getIsIncrease(direction, currentValue, middleValue, variables, increaseDirectionVar);
                    let nextValue = getNextValue(currentValue, characteristicMin, characteristicMax, step, customSteps, increase);
                    debug(`–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ ${characteristic.name.ru} —Å ${currentValue} –Ω–∞ ${nextValue.value} (—É–≤–µ–ª–∏—á–µ–Ω–∏–µ: ${increase}) –¥–ª—è ${pressType} –Ω–∞–∂–∞—Ç–∏—è`, source, options);
                    setValueAndSendNotify(serviceCharacteristic, characteristic, nextValue.value, notification, source, options);

                    if (nextValue.isLimit) {
                        variables[increaseDirectionVar] = !increase;
                        debug(`–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø—Ä–µ–¥–µ–ª: ${nextValue.value}, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${variables[increaseDirectionVar]} –¥–ª—è ${pressType} –Ω–∞–∂–∞—Ç–∏—è`, source, options);
                    } else if (toggleDirection) {
                        variables[increaseDirectionVar] = !increase;
                        debug(`–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${variables[increaseDirectionVar] ? "—É–≤–µ–ª–∏—á–µ–Ω–∏–µ" : "—É–º–µ–Ω—å—à–µ–Ω–∏–µ"} –¥–ª—è ${pressType} –Ω–∞–∂–∞—Ç–∏—è`, source, options);
                    }

                    if (intervalTime > 0 && !variables.contactSensorInterval) {
                        if (variables.buttonInterval) {
                            debug(`–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è ${pressType} –Ω–∞–∂–∞—Ç–∏—è`, source, options);
                            clearInterval(variables.buttonInterval);
                            variables.buttonInterval = undefined;
                        } else {
                            debug(`–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è ${pressType} –Ω–∞–∂–∞—Ç–∏—è —Å –ø–µ—Ä–∏–æ–¥–æ–º ${intervalTime} –º—Å`, source, options);
                            variables.buttonInterval = setInterval(function () {
                                let currentValue = serviceCharacteristic.getValue();
                                let nextValue = getNextValue(currentValue, characteristicMin, characteristicMax, step, customSteps, increase);
                                debug(`–ò–Ω—Ç–µ—Ä–≤–∞–ª: –∏–∑–º–µ–Ω–µ–Ω–∏–µ ${characteristic.name.ru} –Ω–∞ ${nextValue.value}`, source, options);
                                setValueAndSendNotify(serviceCharacteristic, characteristic, nextValue.value, notification, source, options);
                                if (nextValue.isLimit) {
                                    variables[increaseDirectionVar] = !increase;
                                    debug(`–ò–Ω—Ç–µ—Ä–≤–∞–ª: –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ø—Ä–µ–¥–µ–ª ${nextValue.value}, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞`, source, options);
                                    clearInterval(variables.buttonInterval);
                                    variables.buttonInterval = undefined;
                                    variables.lastLimitTime = Date.now();
                                }
                            }, intervalTime);
                        }
                    }
                }
            }
        }



        if (isContactSensor && options.contactSensorOn) {
            const whatChange = options.contactSensorWhatChange;
            if (whatChange < 0) {
                log.error("–ù–µ –≤—ã–±—Ä–∞–Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ –∫–∞—Å–∞–Ω–∏—è");
                return;
            }
            const characteristic = getCharacteristicByValue(whatChange);
            if (!characteristic) {
                log.error("–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ –∫–∞—Å–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
                return;
            }
            const characteristicType = characteristic.type;
            const serviceCharacteristic = service.getCharacteristic(characteristicType);
            if (!serviceCharacteristic) {
                log.error(`–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ ${characteristicType} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —É ${getDeviceName(service)} –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ –∫–∞—Å–∞–Ω–∏—è`);
                return;
            }

            let defaultMin = Math.max(characteristic.min, serviceCharacteristic.getMinValue());
            let defaultMax = (characteristic.getMaxValue() != 0) ? Math.min(characteristic.max, characteristic.getMaxValue()) : characteristic.max;
            const customLimits = parseCustomLimits(options.contactSensorCustomLimits);
            const characteristicMin = customLimits ? customLimits.min : (defaultMin === 0 && options.contactSensorZero ? 1 : defaultMin);
            const characteristicMax = customLimits ? customLimits.max : defaultMax;
            const middleValue = (characteristicMax - characteristicMin) / 2;

            const step = serviceCharacteristic.getMinStep() != 0 ? Math.max(options.contactSensorStep, serviceCharacteristic.getMinStep()) : options.contactSensorStep
            const customSteps = parseCustomSteps(options.contactSensorCustomSteps);
            const intervalTime = options.contactSensorIntervalTime;
            const direction = options.contactSensorDirection;
            const delay = options.contactSensorDelay;
            const toggleDirection = options.contactSensorToggleDirection;

            if (value === 1) {
                debug("–î–∞—Ç—á–∏–∫ –∫–∞—Å–∞–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç", source, options);
                if (variables.delayTimer) {
                    debug("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–∞–π–º–µ—Ä–∞ –¥–∞—Ç—á–∏–∫–∞ –∫–∞—Å–∞–Ω–∏—è", source, options);
                    clearTimeout(variables.delayTimer);
                    variables.delayTimer = undefined;
                }

                const startInterval = function () {
                    variables.delayTimer = undefined;
                    let currentValue = serviceCharacteristic.getValue();
                    let increase = getIsIncrease(direction, currentValue, middleValue, variables, "contactSensorIncreaseDirection");
                    let nextValue = getNextValue(currentValue, characteristicMin, characteristicMax, step, customSteps, increase);
                    debug(`–ù–∞—á–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ ${characteristic.name.ru} –Ω–∞ ${nextValue.value} –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ –∫–∞—Å–∞–Ω–∏—è`, source, options);
                    setValueAndSendNotify(serviceCharacteristic, characteristic, nextValue.value, notification, source, options);

                    if (nextValue.isLimit) {
                        variables.contactSensorIncreaseDirection = !increase;
                        debug(`–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø—Ä–µ–¥–µ–ª: ${nextValue.value}, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${variables.contactSensorIncreaseDirection} –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ –∫–∞—Å–∞–Ω–∏—è`, source, options);
                    } else if (toggleDirection) {
                        variables.contactSensorIncreaseDirection = !increase;
                        debug(`–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${variables.contactSensorIncreaseDirection ? "—É–≤–µ–ª–∏—á–µ–Ω–∏–µ" : "—É–º–µ–Ω—å—à–µ–Ω–∏–µ"} –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ –∫–∞—Å–∞–Ω–∏—è`, source, options);
                    }

                    debug(`–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–∞—Ç—á–∏–∫–∞ –∫–∞—Å–∞–Ω–∏—è —Å –ø–µ—Ä–∏–æ–¥–æ–º ${intervalTime} –º—Å`, source, options);
                    variables.contactSensorInterval = setInterval(function () {
                        let currentValue = serviceCharacteristic.getValue();
                        let nextValue = getNextValue(currentValue, characteristicMin, characteristicMax, step, customSteps, increase);
                        debug(`–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–∞—Ç—á–∏–∫–∞: –∏–∑–º–µ–Ω–µ–Ω–∏–µ ${characteristic.name.ru} –Ω–∞ ${nextValue.value}`, source, options);
                        setValueAndSendNotify(serviceCharacteristic, characteristic, nextValue.value, notification, source, options);
                        if (nextValue.isLimit) {
                            variables.contactSensorIncreaseDirection = !increase;
                            debug(`–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–∞—Ç—á–∏–∫–∞: –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ø—Ä–µ–¥–µ–ª ${nextValue.value}, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞`, source, options);
                            clearInterval(variables.contactSensorInterval);
                            variables.contactSensorInterval = undefined;
                            variables.lastLimitTime = Date.now();
                        }
                    }, intervalTime);
                };

                if (delay > 0) {
                    debug(`–ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ ${delay} –º—Å –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º`, source, options);
                    variables.delayTimer = setTimeout(startInterval, delay);
                } else {
                    debug("–ó–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ (0 –º—Å), –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞", source, options);
                    startInterval();
                }
            } else {
                debug("–î–∞—Ç—á–∏–∫ –∫–∞—Å–∞–Ω–∏—è –∑–∞–∫—Ä—ã—Ç", source, options);
                if (variables.delayTimer) {
                    debug("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –¥–∞—Ç—á–∏–∫–∞ –∫–∞—Å–∞–Ω–∏—è", source, options);
                    clearTimeout(variables.delayTimer);
                    variables.delayTimer = undefined;
                }
                if (variables.contactSensorInterval) {
                    debug("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–∞—Ç—á–∏–∫–∞ –∫–∞—Å–∞–Ω–∏—è", source, options);
                    clearInterval(variables.contactSensorInterval);
                    variables.contactSensorInterval = undefined;
                }
            }
        }
    } catch (e) {
        log.error("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: " + e.message);
    }
}


function getServiceByUUID(uuid) {
    let uuidParts = uuid.split('.');
    const aid = uuidParts[0];
    const sid = uuidParts[1];
    service = getAccessoryById(aid).getService(sid);
    if (service == null) {
        log.error("–í—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
        return null;
    }
    return service
}

function getAccessoryById(id) {
    if (inTestMode) return createAccessory(id)
    return Hub.getAccessory(id)
}

function debug(text, source, options) {
    if (options.debug) {
        console.info(`${DEBUG_TITLE} ${getDeviceName(source.getService())} ${text}`);
    }
}

function parseCustomLimits(customLimitsStr) {
    if (!customLimitsStr || customLimitsStr.trim() === "") return null;

    const parts = customLimitsStr.split(/\s*-\s*/);
    if (parts.length !== 2) {
        log.error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç CustomLimits: ${customLimitsStr}. –û–∂–∏–¥–∞–µ—Ç—Å—è 'min - max'`);
        return null;
    }

    const min = parseFloat(parts[0].replace(",", "."));
    const max = parseFloat(parts[1].replace(",", "."));

    if (isNaN(min) || isNaN(max)) {
        log.error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞ –≤ CustomLimits: ${customLimitsStr}`);
        return null;
    }
    if (min >= max) {
        log.error(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (${min}) –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ (${max}) –≤ CustomLimits: ${customLimitsStr}`);
        return null;
    }

    return { min, max };
}

function setDevicePowerState(service, value, source, options) {
    const onCharacteristic = service.getCharacteristic(HC.On);
    const activeCharacteristic = service.getCharacteristic(HC.Active);
    if (onCharacteristic) {
        onCharacteristic.setValue(value);
        debug(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ On: ${value} –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ${getDeviceName(service)}`, source, options);
    }
    if (activeCharacteristic) {
        activeCharacteristic.setValue(value ? 1 : 0);
        debug(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ Active: ${value ? 1 : 0} –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ${getDeviceName(service)}`, source, options);
    }
}

function setValueAndSendNotify(serviceCharacteristic, characteristic, value, notification, source, options) {
    serviceCharacteristic.setValue(value);
    debug(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ ${value} –¥–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ ${characteristic.name.ru} —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ${getDeviceName(serviceCharacteristic.getService())}`, source, options);
    if (notification) {
        const text = "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: " + characteristic.name.ru + " —É " + getDeviceName(serviceCharacteristic.getService());
        Notify.text(value + " " + text).send();
        if (global.sendToTelegram !== undefined) {
            global.sendToTelegram(["*" + value + "*", text]);
        }
    }
}

function parseCustomSteps(customSteps) {
    if (customSteps === '') return null;
    let itemsStr = customSteps.trim().replace(" ", "").replace(",", ".").split(";");
    let items = [];
    itemsStr.forEach(function (i) { let value = parseFloat(i); if (!isNaN(value)) items.push(value); });
    if (items.length <= 1) return null;
    return items.sort(function (a, b) { return a - b; });
}

function getNextValue(current, min, max, step, customSteps, increase) {
    let newValue;
    if (customSteps != null) {
        newValue = fromCustomSteps(current, customSteps, increase);
    } else {
        newValue = increase ? current + step : current - step;
    }
    newValue = Math.min(Math.max(newValue, min), max);
    let isLimit = (!increase && newValue === min) || (increase && newValue === max);
    return { value: newValue, isLimit: isLimit };
}

function bisectLeft(arr, value) {
    let lo = 0, hi = arr.length;
    while (lo < hi) {
        const mid = (lo + hi) >> 1;
        if (arr[mid] < value) {
            lo = mid + 1;
        } else {
            hi = mid;
        }
    }
    return lo;
}

function fromCustomSteps(current, customSteps, increase) {
    if (customSteps.length === 0) return current;
    const index = bisectLeft(customSteps, current);
    if (index < customSteps.length && customSteps[index] === current) {
        return increase ?
            (index + 1 < customSteps.length ? customSteps[index + 1] : customSteps[index]) :
            (index - 1 >= 0 ? customSteps[index - 1] : customSteps[index]);
    } else {
        return increase ?
            (index < customSteps.length ? customSteps[index] : customSteps[customSteps.length - 1]) :
            (index > 0 ? customSteps[index - 1] : customSteps[0]);
    }
}

function getIsIncrease(direction, currentValue, middleValue, variables, increaseDirectionVar) {
    let increase;
    if (direction === 1) {
        increase = true;
    } else if (direction === 2) {
        increase = false;
    } else {
        if (variables[increaseDirectionVar] === true) increase = true;
        else if (variables[increaseDirectionVar] === false) increase = false;
        else {
            increase = currentValue < middleValue;
            variables[increaseDirectionVar] = increase;
        }
    }
    return increase;
}

function getCharacteristicByValue(value) {
    var target;
    characteristicsList.forEach(function (c) {
        if (c.value == value) {
            target = c;
            return target;
        }
    });
    return target;
}

function getDeviceName(service) {
    const acc = service.getAccessory();
    const room = acc.getRoom().getName();
    const accName = acc.getName();
    const sName = service.getName();
    return room + " -> " + (accName === sName ? accName : accName + " " + sName) + " (" + service.getUUID() + ")";
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è characteristicsList
characteristicsList.push({ name: { ru: "–ù–µ –≤—ã–±—Ä–∞–Ω–æ", en: "Not selected" }, value: -1 });
characteristicsList.push({ name: { ru: "–Ø—Ä–∫–æ—Å—Ç—å", en: "Brightness" }, value: 0, type: HC.Brightness, min: 0, max: 100 });
characteristicsList.push({ name: { ru: "–¶–≤–µ—Ç–æ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", en: "Color Temperature" }, value: 1, type: HC.ColorTemperature, min: 50, max: 400 });
characteristicsList.push({ name: { ru: "–ù–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å", en: "Saturation" }, value: 2, type: HC.Saturation, min: 0, max: 100 });
characteristicsList.push({ name: { ru: "–û—Ç—Ç–µ–Ω–æ–∫", en: "Hue" }, value: 3, type: HC.Hue, min: 0, max: 360 });
characteristicsList.push({ name: { ru: "–¶–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è", en: "Target Position" }, value: 4, type: HC.TargetPosition, min: 0, max: 100 });
characteristicsList.push({ name: { ru: "–¶–µ–ª–µ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", en: "Target Temperature" }, value: 5, type: HC.TargetTemperature, min: 0, max: 100 });
characteristicsList.push({ name: { ru: "–¶–µ–ª–µ–≤–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å", en: "Target Relative Humidity" }, value: 6, type: HC.TargetRelativeHumidity, min: 0, max: 100 });
characteristicsList.push({ name: { ru: "–ü–æ—Ä–æ–≥ –Ω–∞–≥—Ä–µ–≤–∞", en: "Heating Threshold Temperature" }, value: 7, type: HC.HeatingThresholdTemperature, min: 0, max: 100 });
characteristicsList.push({ name: { ru: "–ü–æ—Ä–æ–≥ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è", en: "Cooling Threshold Temperature" }, value: 8, type: HC.CoolingThresholdTemperature, min: 0, max: 100 });
characteristicsList.push({ name: { ru: "–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞ (%)", en: "Rotation Speed (%)" }, value: 9, type: HC.RotationSpeed, min: 0, max: 100 });
characteristicsList.push({ name: { ru: "–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞ (–®–∞–≥)", en: "Fan Speed (Step)" }, value: 10, type: HC.C_FanSpeed, min: 0, max: 5 });
characteristicsList.push({ name: { ru: "–ì—Ä–æ–º–∫–æ—Å—Ç—å", en: "Volume" }, value: 11, type: HC.Volume, min: 0, max: 100 });
characteristicsList.push({ name: { ru: "–¶–µ–ª–µ–≤–æ–π –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —É–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞", en: "Target horizontal tilt angle" }, value: 12, type: HC.TargetHorizontalTiltAngle, min: -90, max: 90 });
characteristicsList.push({ name: { ru: "–¶–µ–ª–µ–≤–æ–π –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —É–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞", en: "Target vertical tilt angle" }, value: 13, type: HC.TargetVerticalTiltAngle, min: -90, max: 90 });
characteristicsList.push({ name: { ru: "–û–ø—Ç–∏—á–µ—Å–∫–∏–π –∑—É–º", en: "OpticalZoom" }, value: 14, type: HC.OpticalZoom, min: 0, max: 100 });
characteristicsList.push({ name: { ru: "–¶–∏—Ñ—Ä–æ–≤–æ–π –∑—É–º", en: "DigitalZoom" }, value: 15, type: HC.DigitalZoom, min: 0, max: 100 });
characteristicsList.push({ name: { ru: "–ü–æ–≤–æ—Ä–æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", en: "ImageRotation" }, value: 16, type: HC.ImageRotation, min: 0, max: 270 });

let characteristicsToFound = characteristicsList.map(c => c.type);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è servicesList
servicesList.push({ name: { ru: "–ù–µ –≤—ã–±—Ä–∞–Ω–æ", en: "Not selected" }, value: '' });
let servicesListUnsort = [];
Hub.getAccessories().forEach(function (a) {
    a.getServices().forEach(function (s) {
        let found = false;
        s.getCharacteristics().forEach(function (c) {
            if (found || characteristicsToFound.indexOf(c.getType()) < 0) return;
            const displayname = getDeviceName(s);
            servicesListUnsort.push({ name: { ru: displayname, en: displayname }, value: s.getUUID() });
            found = true;
        });
    });
});
servicesListUnsort.sort((a, b) => a.name.ru.localeCompare(b.name.ru)).forEach(s => servicesList.push(s));

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
const DEBUG_TITLE = "üìà –ü–æ—à–∞–≥–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ. ";