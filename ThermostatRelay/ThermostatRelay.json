{
  "scenarioTemplate": {
    "name": "Реле для термостата",
    "desc": "Позволяет устанавливать реле охлаждения и нагрева для вирутального термостата",
    "active": true,
    "onStart": true,
    "sync": false,
    "data": "let servicesList = [];\n\ninfo = {\n    name: \"Реле для термостата\",\n    description: \"Позволяет устанавливать реле охлаждения и нагрева для вирутального термостата\",\n    version: \"1.0\",\n    author: \"@BOOMikru\",\n    onStart: true,\n\n    sourceServices: [HS.Thermostat],\n    sourceCharacteristics: [HC.CurrentHeatingCoolingState, HC.TargetHeatingCoolingState],\n\n    options: {\n        heatingRelay: {\n            name: {\n                en: \"Heating relay\",\n                ru: \"Выберите реле для нагрева\"\n            },\n            type: \"String\",\n            value: \"\",\n            formType: \"list\",\n            values: servicesList\n        },\n        heatingRelayAccessoryId: {\n            name: {\n                en: \"Heating relay Accessory\",\n                ru: \"   или укажите ID аксессуара\"\n            },\n            type: \"Integer\",\n            value: 0,\n        },\n        heatingRelayServiceId: {\n            name: {\n                en: \"Heating relay Characteristic\",\n                ru: \"   и ID сервиса\"\n            },\n            type: \"Integer\",\n            value: 0,\n        },\n        coolingRelay: {\n            name: {\n                en: \"Cooling relay\",\n                ru: \"Выберите реле для охлаждения\"\n            },\n            type: \"String\",\n            value: \"\",\n            formType: \"list\",\n            values: servicesList\n        },\n        coolingRelayAccessoryId: {\n            name: {\n                en: \"Lamp 2 Accessory\",\n                ru: \"   или укажите ID аксессуара\"\n            },\n            type: \"Integer\",\n            value: 0,\n        },\n        coolingRelayServiceId: {\n            name: {\n                en: \"Lamp 2 Characteristic\",\n                ru: \"   и ID сервиса\"\n            },\n            type: \"Integer\",\n            value: 0,\n        }\n    }\n};\n\nfunction trigger(source, value, variables, options) {\n    try {\n        const heatingRelay = getDevice(options, \"heatingRelay\")\n        const coolingRelay = getDevice(options, \"coolingRelay\")\n\n        const currentState = source.getService().getCharacteristic(HC.CurrentHeatingCoolingState).getValue()\n        const targetState = source.getService().getCharacteristic(HC.TargetHeatingCoolingState).getValue()\n\n        //Выключено\n        if (targetState == 0 || currentState == 0) {\n            if (heatingRelay) heatingRelay.getCharacteristic(HC.On).setValue(false)\n            if (coolingRelay) coolingRelay.getCharacteristic(HC.On).setValue(false)\n        }\n        // Нагрев\n        if ((targetState == 1 || targetState == 3) && currentState == 1) {\n            if (heatingRelay) heatingRelay.getCharacteristic(HC.On).setValue(true)\n            if (coolingRelay) coolingRelay.getCharacteristic(HC.On).setValue(false)\n        }\n        // Охлаждение\n        if ((targetState == 2 || targetState == 3) && currentState == 2) {\n            if (heatingRelay) heatingRelay.getCharacteristic(HC.On).setValue(false)\n            if (coolingRelay) coolingRelay.getCharacteristic(HC.On).setValue(true)\n        }\n    } catch (e) {\n        log.error(\"Ошибка выполнения задачи: \" + e.message);\n    }\n}\n\n\nfunction getDevice(options, type) {\n    if (options[type] === '' && (options[type + \"AccessoryId\"] <= 0 || options[type + \"ServiceId\"] <= 0)) {\n        return undefined;\n    }\n    var service\n    if (options[type] != '') {\n        const cdata = options[type].split('.');\n        const aid = cdata[0];\n        const sid = cdata[1];\n        service = Hub.getAccessory(aid).getService(sid)\n        if (service == null) {\n            log.error(\"Выбранное устройство не найдено {}\", options[type]);\n            return undefined;\n        }\n    } else {\n        let accessory = Hub.getAccessory(options[type + \"AccessoryId\"])\n        if (accessory == null) {\n            log.error(\"Введённое устройство не найдено {}\", options[type + \"AccessoryId\"]);\n            return undefined;\n        }\n        service = accessory.getService(options[type + \"ServiceId\"])\n        if (service == null) {\n            log.error(\"Введённый сервис не найден у аксессуара {} {}\", accessory.getName(), accessory.getUUID());\n            return undefined;\n        }\n    }\n    return service\n}\n\nfunction getDeviceName(service) {\n    const acc = service.getAccessory();\n    const room = acc.getRoom().getName()\n    const accName = service.getAccessory().getName()\n    const sName = service.getName()\n    const name = room + \" -> \" + (accName == sName ? accName : accName + \" \" + sName) + \" (\" + service.getUUID() + \")\"\n    return name\n}\n\nlet servicesListUnsort = [];\nservicesListUnsort\n// подготовка списка характеристик для выбора в настройке логики\nHub.getAccessories().forEach(function (a) {\n    a.getServices(HS.Switch).forEach(function (s) {\n        const c = s.getCharacteristic(HC.On);\n        if (!c) return;\n        let displayname = getDeviceName(s)\n        servicesListUnsort.push({\n            name: { ru: displayname, en: displayname },\n            value: s.getUUID()\n        });\n    })\n});\n\nservicesList.push({ name: { ru: \"Не выбрано\", en: \"Not selected\", en: \"\" }, value: '' });\nservicesListUnsort.sort(function (a, b) { return a.name.ru.localeCompare(b.name.ru); }).forEach(function (s) { servicesList.push(s) })\n",
    "type": "LOGIC"
  }
}