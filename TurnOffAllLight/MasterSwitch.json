{
  "scenarioTemplate": {
    "name": "Выключить весь свет",
    "desc": "Выключает все светильники и выключатели в доме.\nvar excludeRoomsNames = [\"Информер\", \"Комп\", \"Виртуальная\", \"Контрольная\"]; //ID комнат, где не надо выключать свет\nvar excludeAccessoriesId = [130]; //ID устройств, которые не надо выключать \n\nВызывать из блочного сценария блоком кода\nglobal.turnOffLight()\n\nВ вызов можно передать название комнат(ы) global.turnOffLight([\"Коридор\",\"Двор\"]), ID определённых устройств global.turnOffLight([],[11,42]), так и всё вместе global.turnOffLight([\"Коридор\",\"Двор\"],[11,42])\nПри этом не будет отключаться свет из комнат в теле сценария и те, что в вызове.",
    "active": true,
    "onStart": false,
    "sync": false,
    "data": "/**\r\n * Отключает все лампы, выключатели и розетки и т.д. в доме\r\n * \r\n * Использование:\r\n * global.turnAllOff({\r\n *   excludeRooms: [\"Коридор\", \"Двор\"],           // Названия комнат, где не надо выключать свет\r\n *   excludeAccessories: [130, 188.15],           // ID устройств и сервисов, которые не надо выключать\r\n *   additionalDevices: [200, 300.5],             // ID дополнительных устройств для отключения\r\n *   lightbulbs: true,                            // Отключать лампочки\r\n *   switches: true,                              // Отключать выключатели  \r\n *   outlets: false,                              // Отключать розетки\r\n *   hidden: false,                               // Отключать скрытые устройства\r\n *   interval: 500,                               // Интервал выключения в миллисекундах\r\n *   debug: false                                 // Режим отладки\r\n * })\r\n */\r\nfunction turnAllOff(params) {\r\n    var excludeRoomsNames = [\"Информер\", \"Комп\", \"Виртуальная\", \"Element\"]; //ID комнат, где не надо выключать свет (например: [\"Коридор\", \"Двор\", \"Информер\"])\r\n    var excludeAccessoriesId = [130, 188, 6]; //ID устройств, которые не надо выключать (например: [130, \"188\", 200.15, \"300.20\"])\r\n    var additionalDevicesDefault = []; //ID устройств и сервисов для дополнительного отключения любых типов устройств (например: [130, \"188\", 200.15, \"300.20\"])\r\n    var hiddenDefault = false; // Отключать скрытые\r\n    var outletsDefault = false; // Отключать розетки\r\n    var lightbulbsDefault = true; // Отключать лампочки\r\n    var switchesDefault = true; // Отключать выключатели\r\n    var intervalDefault = 0; // Интервал выключения устройств в миллисекундах (0 = одновременно, >0 = по очереди)\r\n    var debugDefault = false; // Активация дополнительного логгирования для отладки\r\n\r\n    // Валидация входных параметров\r\n    if (!params || typeof params !== 'object') {\r\n        console.error(\"turnAllOff: параметр params должен быть объектом\");\r\n        return;\r\n    }\r\n\r\n    // Используем переданные параметры или значения по умолчанию\r\n    var actualAdditionalDevices = params.additionalDevices !== undefined ? params.additionalDevices : additionalDevicesDefault;\r\n    var actualLightbulbs = params.lightbulbs !== undefined ? params.lightbulbs : lightbulbsDefault;\r\n    var actualSwitches = params.switches !== undefined ? params.switches : switchesDefault;\r\n    var actualOutlets = params.outlets !== undefined ? params.outlets : outletsDefault;\r\n    var actualHidden = params.hidden !== undefined ? params.hidden : hiddenDefault;\r\n    var actualInterval = params.interval !== undefined ? params.interval : intervalDefault;\r\n    var actualDebug = params.debug !== undefined ? params.debug : debugDefault;\r\n\r\n    // Валидация интервала выключения\r\n    var interval = parseInt(actualInterval) || 0;\r\n    if (interval < 0) {\r\n        interval = 0;\r\n        if (actualDebug) {\r\n            console.warn(\"Некорректное значение interval, установлено 0\");\r\n        }\r\n    }\r\n\r\n    var excRooms = []\r\n    var excAccessories = []\r\n    var excServices = []\r\n\r\n    // Обработка исключений комнат\r\n    excludeRoomsNames.forEach(function fe(room) { excRooms.push(room) })\r\n    getArrayFromValue(params.excludeRooms, \"string\").forEach(function fe(room) { excRooms.push(room) })\r\n\r\n    // Обработка исключений аксессуаров и сервисов из глобальных настроек\r\n    var globalExclusions = parseExclusions(excludeAccessoriesId);\r\n    excAccessories = excAccessories.concat(globalExclusions.excAccessories);\r\n    excServices = excServices.concat(globalExclusions.excServices);\r\n\r\n    // Обработка исключений аксессуаров и сервисов из параметров функции\r\n    var paramExclusions = parseExclusions(params.excludeAccessories);\r\n    excAccessories = excAccessories.concat(paramExclusions.excAccessories);\r\n    excServices = excServices.concat(paramExclusions.excServices);\r\n\r\n    // Парсим дополнительные устройства для отключения\r\n    var additionalDevices = [];\r\n    if (actualAdditionalDevices && actualAdditionalDevices.length > 0) {\r\n        var additionalExclusions = parseExclusions(actualAdditionalDevices);\r\n        additionalDevices = additionalExclusions.excAccessories.concat(additionalExclusions.excServices);\r\n    }\r\n\r\n    /**\r\n     * Парсит идентификаторы исключений в различных форматах\r\n     * Поддерживает:\r\n     * - Целые числа: 130, \"130\"\r\n     * - Дробные числа: 130.13, \"130.13\" (аксессуар.сервис)\r\n     * - Массивы с любыми из вышеперечисленных форматов\r\n     * @param {*} value - Значение для парсинга\r\n     * @returns {Object} Объект с массивами excAccessories и excServices\r\n     */\r\n    function parseExclusions(value) {\r\n        var excAccessories = [];\r\n        var excServices = [];\r\n\r\n        if (!value) {\r\n            return { excAccessories: excAccessories, excServices: excServices };\r\n        }\r\n\r\n        var items = [];\r\n        if (Array.isArray(value)) {\r\n            items = value;\r\n        } else {\r\n            items.push(value);\r\n        }\r\n\r\n        items.forEach(function (item) {\r\n            var parsed = parseExclusionItem(item);\r\n            if (parsed.accessoryId !== null) {\r\n                excAccessories.push(parsed.accessoryId);\r\n            }\r\n            if (parsed.serviceId !== null) {\r\n                excServices.push(parsed.serviceId);\r\n            }\r\n        });\r\n\r\n        return { excAccessories: excAccessories, excServices: excServices };\r\n    }\r\n\r\n    /**\r\n     * Парсит отдельный элемент исключения\r\n     * @param {*} item - Элемент для парсинга\r\n     * @returns {Object} Объект с accessoryId и serviceId\r\n     */\r\n    function parseExclusionItem(item) {\r\n        var accessoryId = null;\r\n        var serviceId = null;\r\n\r\n        if (typeof item === 'number') {\r\n            if (item % 1 === 0) {\r\n                // Целое число - только аксессуар\r\n                accessoryId = item;\r\n            } else {\r\n                // Дробное число - аксессуар.сервис\r\n                var parts = item.toString().split('.');\r\n                accessoryId = parseInt(parts[0]);\r\n                serviceId = parts[1] ? parts[1] : null;\r\n            }\r\n        } else if (typeof item === 'string') {\r\n            if (item.indexOf('.') !== -1) {\r\n                // Строка с точкой - аксессуар.сервис\r\n                var parts = item.split('.');\r\n                accessoryId = parseInt(parts[0]);\r\n                serviceId = parts[1] ? parts[1] : null;\r\n            } else {\r\n                // Строка без точки - только аксессуар\r\n                accessoryId = parseInt(item);\r\n            }\r\n        }\r\n\r\n        return { accessoryId: accessoryId, serviceId: serviceId };\r\n    }\r\n\r\n    function getArrayFromValue(value, type) {\r\n        var result = [];\r\n        if (Array.isArray(value)) {\r\n            result = value;\r\n        } else if (typeof value === type) {\r\n            result.push(value);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    if (actualDebug) console.info(\"Исключаемые комнаты: \" + excRooms.join(\"- \"));\r\n    if (actualDebug) console.info(\"Исключаемые аксессуары: \" + excAccessories.join(\"- \"));\r\n    if (actualDebug) console.info(\"Исключаемые сервисы: \" + excServices.join(\"- \"));\r\n    if (actualDebug) console.info(\"Дополнительные устройства: \" + additionalDevices.join(\"- \"));\r\n\r\n    const rooms = Hub.getRooms().filter(function loopRooms(room) { return excRooms.indexOf(room.getName()) < 0 });\r\n\r\n    // Собираем все устройства для отключения в массив\r\n    var devicesToTurnOff = [];\r\n\r\n    rooms.forEach(function loopRooms(room) {\r\n        var accessories = room.getAccessories().filter(function loopRooms(accessory) { return excAccessories.indexOf(parseInt(accessory.getUUID())) < 0 });\r\n        accessories.forEach(function loopAccessories(accessory) {\r\n            // Оптимизация: кэшируем проверки для каждого аксессуара\r\n            var modelId = accessory.getModelId();\r\n            if (modelId == \"Sprut.hub\") return;\r\n            \r\n            var status = accessory.getService(HS.AccessoryInformation).getCharacteristic(HC.C_Online).getValue();\r\n            if (status == false) return;\r\n\r\n            accessory.getServices().forEach(function loopServices(service) {\r\n                var serviceType = service.getType();\r\n                var shouldProcess = false;\r\n\r\n                // Проверяем тип сервиса и соответствующие опции\r\n                if (serviceType == HS.Lightbulb && actualLightbulbs) {\r\n                    shouldProcess = true;\r\n                } else if (serviceType == HS.Switch && actualSwitches) {\r\n                    shouldProcess = true;\r\n                } else if (serviceType == HS.Outlet && actualOutlets) {\r\n                    shouldProcess = true;\r\n                }\r\n\r\n                if (shouldProcess) {\r\n                    // Проверяем, не исключен ли конкретный сервис\r\n                    var serviceId = accessory.getUUID() + \".\" + service.getUUID();\r\n                    if (excServices.indexOf(serviceId) >= 0) {\r\n                        if (actualDebug) console.info(\"Сервис \" + serviceId + \" исключен\");\r\n                        return;\r\n                    }\r\n\r\n                    // Оптимизация: проверяем видимость и состояние в одном условии\r\n                    if (!service.isVisible() && !actualHidden) return;\r\n                    \r\n                    var on = service.getCharacteristic(HC.On);\r\n                    if (!on || !on.getValue()) return;\r\n                    \r\n                    devicesToTurnOff.push({\r\n                        room: room,\r\n                        accessory: accessory,\r\n                        service: service,\r\n                        serviceId: serviceId,\r\n                        serviceType: serviceType\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    });\r\n\r\n    // Добавляем дополнительные устройства в список\r\n    if (additionalDevices.length > 0) {\r\n        additionalDevices.forEach(function (deviceId) {\r\n            try {\r\n                if (deviceId.indexOf('.') !== -1) {\r\n                    // Это конкретный сервис (аксессуар.сервис)\r\n                    var parts = deviceId.split('.');\r\n                    var accessoryId = parseInt(parts[0]);\r\n                    var serviceId = parts[1];\r\n\r\n                    var accessory = Hub.getAccessory(accessoryId);\r\n                    if (accessory) {\r\n                        var service = accessory.getService(serviceId);\r\n                        if (service) {\r\n                            devicesToTurnOff.push({\r\n                                room: accessory.getRoom(),\r\n                                accessory: accessory,\r\n                                service: service,\r\n                                serviceId: accessoryId + \".\" + serviceId,\r\n                                serviceType: service.getType(),\r\n                                isAdditional: true\r\n                            });\r\n                        } else if (actualDebug) {\r\n                            console.warn(\"Сервис не найден: \" + serviceId + \" в аксессуаре: \" + accessoryId);\r\n                        }\r\n                    } else if (actualDebug) {\r\n                        console.warn(\"Аксессуар не найден: \" + accessoryId);\r\n                    }\r\n                } else {\r\n                    // Это аксессуар целиком\r\n                    var accessoryId = parseInt(deviceId);\r\n                    var accessory = Hub.getAccessory(accessoryId);\r\n                    if (accessory) {\r\n                        var services = accessory.getServices();\r\n                        services.forEach(function (service) {\r\n                            devicesToTurnOff.push({\r\n                                room: accessory.getRoom(),\r\n                                accessory: accessory,\r\n                                service: service,\r\n                                serviceId: accessoryId + \".\" + service.getUUID(),\r\n                                serviceType: service.getType(),\r\n                                isAdditional: true\r\n                            });\r\n                        });\r\n                    } else if (actualDebug) {\r\n                        console.warn(\"Аксессуар не найден: \" + accessoryId);\r\n                    }\r\n                }\r\n            } catch (e) {\r\n                if (actualDebug) {\r\n                    console.error(\"Ошибка обработки устройства: \" + deviceId + \" Ошибка: \" + e.message);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    // Отключаем устройства\r\n    if (interval > 0) {\r\n        // Последовательное отключение с интервалом\r\n        turnOffDevicesSequentially(devicesToTurnOff, interval, actualDebug);\r\n    } else {\r\n        // Одновременное отключение\r\n        devicesToTurnOff.forEach(function (device) {\r\n            turnOffDevice(device, actualDebug);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Отключает сервис, ища все характеристики для отключения\r\n     * \r\n     * Поддерживаемые характеристики и сервисы:\r\n     * - HC.On (false) - Switch, Lightbulb, Outlet, FanBasic\r\n     * - HC.Active (0) - AirPurifier, HeaterCooler, HumidifierDehumidifier, Door, Faucet, IrrigationSystem, Valve, WindowCovering\r\n     * - HC.TargetHeatingCoolingState (0) - Thermostat\r\n     * - HC.TargetHeaterCoolerState (0) - HeaterCooler\r\n     * - HC.TargetAirPurifierState (0) - AirPurifier\r\n     * - HC.TargetHumidifierDehumidifierState (0) - HumidifierDehumidifier\r\n     * - HC.TargetDoorState (0) - Door\r\n     * - HC.TargetPosition (0) - Door, Faucet, IrrigationSystem, Valve, WindowCovering\r\n     * - HC.Mute (true) - Speaker, Microphone, TelevisionSpeaker\r\n     * \r\n     * @param {Service} service - Сервис для отключения\r\n     * @param {boolean} debug - Режим отладки\r\n     */\r\n    function turnOffService(service, debug) {\r\n        var accessory = service.getAccessory();\r\n\r\n        // Список характеристик для отключения с их значениями\r\n        var turnOffCharacteristics = [\r\n            { type: HC.On, value: false, name: \"On\" },\r\n            { type: HC.Active, value: 0, name: \"Active\" },\r\n            { type: HC.TargetHeatingCoolingState, value: 0, name: \"TargetHeatingCoolingState\" }, // Off\r\n            { type: HC.TargetHeaterCoolerState, value: 0, name: \"TargetHeaterCoolerState\" }, // Off\r\n            { type: HC.TargetAirPurifierState, value: 0, name: \"TargetAirPurifierState\" }, // Off\r\n            { type: HC.TargetHumidifierDehumidifierState, value: 0, name: \"TargetHumidifierDehumidifierState\" }, // Off\r\n            { type: HC.TargetDoorState, value: 0, name: \"TargetDoorState\" }, // Open\r\n            { type: HC.TargetPosition, value: 0, name: \"TargetPosition\" }, // 0%\r\n            { type: HC.Mute, value: true, name: \"Mute\" }, // Mute\r\n        ];\r\n\r\n        var turnedOffCount = 0;\r\n\r\n        turnOffCharacteristics.forEach(function (charConfig) {\r\n            try {\r\n                var characteristic = service.getCharacteristic(charConfig.type);\r\n                if (characteristic) {\r\n                    var currentValue = characteristic.getValue();\r\n                    if (currentValue !== charConfig.value) {\r\n                        characteristic.setValue(charConfig.value);\r\n                        turnedOffCount++;\r\n\r\n                        if (debug) {\r\n                            console.info(\"Выключено \" + charConfig.name + \" в \" + accessory.getName() + \" сервис \" + service.getName() + \" с \" + currentValue + \" на \" + charConfig.value);\r\n                        }\r\n                    }\r\n                }\r\n            } catch (e) {\r\n                // Игнорируем ошибки для характеристик, которые не поддерживаются сервисом\r\n                if (debug) {\r\n                    console.debug(\"Характеристика \" + charConfig.name + \" не поддерживается в сервисе \" + service.getName());\r\n                }\r\n            }\r\n        });\r\n\r\n        if (debug && turnedOffCount > 0) {\r\n            console.info(\"Выключено \" + turnedOffCount + \" характеристик в \" + accessory.getName() + \" сервис \" + service.getName());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Отключает устройства последовательно с заданным интервалом\r\n     * @param {Array} devices - Массив устройств для отключения\r\n     * @param {number} interval - Интервал в миллисекундах\r\n     * @param {boolean} debug - Режим отладки\r\n     */\r\n    function turnOffDevicesSequentially(devices, interval, debug) {\r\n        if (devices.length === 0) {\r\n            return;\r\n        }\r\n\r\n        var currentIndex = 0;\r\n\r\n        function turnOffNext() {\r\n            if (currentIndex >= devices.length) {\r\n                if (debug) {\r\n                    console.info(\"Последовательное выключение завершено. Всего устройств: \" + devices.length);\r\n                }\r\n                return;\r\n            }\r\n\r\n            var device = devices[currentIndex];\r\n            turnOffDevice(device, debug);\r\n\r\n            currentIndex++;\r\n\r\n            if (currentIndex < devices.length) {\r\n                setTimeout(turnOffNext, interval);\r\n            } else if (debug) {\r\n                console.info(\"Последовательное выключение завершено. Всего устройств: \" + devices.length);\r\n            }\r\n        }\r\n\r\n        if (debug) {\r\n            console.info(\"Начинаем последовательное выключение с интервалом: \" + interval + \" мс. Всего устройств: \" + devices.length);\r\n        }\r\n\r\n        // Начинаем отключение\r\n        turnOffNext();\r\n    }\r\n\r\n    /**\r\n     * Отключает одно устройство\r\n     * @param {Object} device - Объект устройства с информацией о комнате, аксессуаре и сервисе\r\n     * @param {boolean} debug - Режим отладки\r\n     */\r\n    function turnOffDevice(device, debug) {\r\n        try {\r\n            if (device.isAdditional) {\r\n                // Для дополнительных устройств используем универсальную функцию\r\n                turnOffService(device.service, debug);\r\n            } else {\r\n                // Для обычных устройств (лампы, выключатели, розетки)\r\n                var on = device.service.getCharacteristic(HC.On);\r\n                if (on && on.getValue()) {\r\n                    on.setValue(false);\r\n\r\n                    if (debug) {\r\n                        console.info(\"Выключено: \" + device.room.getName() + \" - \" + device.accessory.getName() + \" - \" + device.service.getName() + \" (Тип: \" + device.serviceType + \")\");\r\n                    }\r\n                }\r\n            }\r\n        } catch (e) {\r\n            if (debug) {\r\n                console.error(\"Ошибка выключения устройства: \" + device.serviceId + \" Ошибка: \" + e.message);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Функция обратной совместимости для отключения всех ламп, выключателей и розеток\r\n * @deprecated Используйте turnAllOff() для полной функциональности\r\n */\r\nfunction turnOffLight(excludeRooms, excludeAccessories) {\r\n    return turnAllOff({\r\n        excludeRooms: excludeRooms || [],\r\n        excludeAccessories: excludeAccessories || []\r\n    });\r\n}",
    "type": "GLOBAL"
  }
}
