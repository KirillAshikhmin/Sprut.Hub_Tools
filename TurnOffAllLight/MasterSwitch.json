{
  "scenarioTemplate": {
    "name": "Мастер-Выключатель. Глобальный",
    "desc": "",
    "active": true,
    "onStart": true,
    "sync": false,
    "data": "/**\n * Мастер-выключатель - отключает все лампы, выключатели и розетки и т.д. в доме\n * \n * Использование:\n * global.masterSwitch({\n *   // Типы устройств для отключения\n *   lightbulbs: true,                            // Отключать лампочки\n *   switches: true,                              // Отключать выключатели  \n *   outlets: false,                              // Отключать розетки\n *   hidden: false,                               // Отключать скрытые устройства\n *   \n *   // Выбор комнат и исключения\n *   rooms: [\"Кухня\"],                            // Названия комнат для выключения (если пустой - весь дом)\n *   excludeRooms: [\"Коридор\", \"Двор\"],           // Названия комнат, где не надо выключать свет\n *   excludeAccessories: [130, 188.15],           // ID устройств и сервисов, которые не надо выключать\n *   additionalDevices: [200, 300.5],             // ID дополнительных устройств для отключения\n *   \n *   // Настройки выключения\n *   interval: 500,                               // Интервал выключения в миллисекундах\n *   turnOffOrder: [130, 188.15],                 // Порядок выключения устройств. Приоритетные устройства выключаются первыми в указанном порядке. Не указанные устройства выключаются после них\n *   verifyTurnOff: true,                         // Повторять выключение через 5 секунд\n *   delayedDevices: [42, 123.15],                // ID устройств и сервисов для отложенного выключения\n *   delayedTurnOffTime: 5000,                    // Время отложенного выключения в миллисекундах\n *   debug: false                                 // Режим отладки\n * })\n */\nfunction masterSwitch(params) {\n    // Типы устройств для отключения\n    var lightbulbsDefault = true; // Отключать лампочки\n    var switchesDefault = true; // Отключать выключатели\n    var outletsDefault = false; // Отключать розетки\n    var hiddenDefault = false; // Отключать скрытые устройства\n    var roomsDefault = []; // Комнаты для выключения (если пустой - весь дом) (например: [\"Кухня\", \"Гостиная\"])\n    var excludeRoomsNamesDefault = []; //Названия комнат, где не надо выключать свет (например: [\"Коридор\", \"Двор\", \"Информер\"])\n    var excludeAccessoriesIdDefault = []; //ID устройств, которые не надо выключать (например: [130, \"188\", 200.15, \"300.20\"])\n    var additionalDevicesDefault = []; //ID устройств и сервисов для дополнительного отключения любых типов устройств (например: [130, \"188\", 200.15, \"300.20\"])\n    var intervalDefault = 0; // Интервал выключения устройств в миллисекундах (0 = одновременно, >0 = по очереди)\n    var turnOffOrderDefault = []; // Порядок выключения устройств (приоритетные сначала)\n    var verifyTurnOffDefault = true; // Повторять выключение через 5 секунд\n    var delayedDevicesDefault = []; // ID устройств и сервисов для отложенного выключения\n    var delayedTurnOffTimeDefault = 0; // Время отложенного выключения в миллисекундах\n    var debugDefault = false; // Активация дополнительного логгирования для отладки\n\n    // Валидация входных параметров\n    if (!params || typeof params !== 'object') {\n        console.error(\"masterSwitch: параметр params должен быть объектом\");\n        return;\n    }\n    // Используем переданные параметры или значения по умолчанию\n    // Типы устройств для отключения\n    var actualLightbulbs = params.lightbulbs !== undefined ? params.lightbulbs : lightbulbsDefault;\n    var actualSwitches = params.switches !== undefined ? params.switches : switchesDefault;\n    var actualOutlets = params.outlets !== undefined ? params.outlets : outletsDefault;\n    var actualHidden = params.hidden !== undefined ? params.hidden : hiddenDefault;\n    \n    // Выбор комнат и исключения\n    var actualRooms = params.rooms !== undefined ? params.rooms : roomsDefault;\n    var actualExcludeRooms = params.excludeRooms !== undefined ? params.excludeRooms : [];\n    var actualExcludeAccessories = params.excludeAccessories !== undefined ? params.excludeAccessories : [];\n    var actualAdditionalDevices = params.additionalDevices !== undefined ? params.additionalDevices : additionalDevicesDefault;\n    \n    // Настройки выключения\n    var actualInterval = params.interval !== undefined ? params.interval : intervalDefault;\n    var actualTurnOffOrder = params.turnOffOrder !== undefined ? params.turnOffOrder : turnOffOrderDefault;\n    var actualVerifyTurnOff = params.verifyTurnOff !== undefined ? params.verifyTurnOff : verifyTurnOffDefault;\n    var actualDelayedDevices = params.delayedDevices !== undefined ? params.delayedDevices : delayedDevicesDefault;\n    var actualDelayedTurnOffTime = params.delayedTurnOffTime !== undefined ? params.delayedTurnOffTime : delayedTurnOffTimeDefault;\n    var actualDebug = params.debug !== undefined ? params.debug : debugDefault;\n\n    // Валидация интервала выключения\n    var interval = parseInt(actualInterval) || 0;\n    if (interval < 0) {\n        interval = 0;\n        if (actualDebug) {\n            console.warn(\"Некорректное значение interval, установлено 0\");\n        }\n    }\n\n    // Валидация времени отложенного выключения\n    var delayedTurnOffTime = parseInt(actualDelayedTurnOffTime) || 0;\n    if (delayedTurnOffTime < 0) {\n        delayedTurnOffTime = 0;\n        if (actualDebug) {\n            console.warn(\"Некорректное значение delayedTurnOffTime, установлено 0\");\n        }\n    }\n\n    var excRooms = []\n    var excAccessories = []\n    var excServices = []\n\n    // Обработка исключений комнат из глобальных настроек\n    excludeRoomsNamesDefault.forEach(function fe(room) { excRooms.push(room) })\n    // Обработка исключений комнат из параметров функции\n    masterSwitchGetArrayFromValue(actualExcludeRooms, \"string\").forEach(function fe(room) { excRooms.push(room) })\n\n    // Обработка исключений аксессуаров и сервисов из глобальных настроек\n    var globalExclusions = masterSwitchParseExclusions(excludeAccessoriesIdDefault);\n    excAccessories = excAccessories.concat(globalExclusions.excAccessories);\n    excServices = excServices.concat(globalExclusions.excServices);\n\n    // Обработка исключений аксессуаров и сервисов из параметров функции\n    var paramExclusions = masterSwitchParseExclusions(actualExcludeAccessories);\n    excAccessories = excAccessories.concat(paramExclusions.excAccessories);\n    excServices = excServices.concat(paramExclusions.excServices);\n\n    // Обработка отложенных устройств - добавляем их в исключения для основного выключения\n    var delayedExclusions = masterSwitchParseExclusions(actualDelayedDevices);\n    excAccessories = excAccessories.concat(delayedExclusions.excAccessories);\n    excServices = excServices.concat(delayedExclusions.excServices);\n\n    // Парсим дополнительные устройства для отключения\n    var additionalDevices = [];\n    if (actualAdditionalDevices && actualAdditionalDevices.length > 0) {\n        var additionalExclusions = masterSwitchParseExclusions(actualAdditionalDevices);\n        additionalDevices = additionalExclusions.excAccessories.concat(additionalExclusions.excServices);\n    }\n\n\n    // Обрабатываем выбранные комнаты\n    var targetRooms = [];\n    if (actualRooms && actualRooms.length > 0) {\n        // Если указаны конкретные комнаты, используем их\n        const allRooms = Hub.getRooms();\n        \n        // Создаем Map для быстрого поиска комнат по имени\n        var roomsMap = new Map();\n        allRooms.forEach(function(room) {\n            roomsMap.set(room.getName(), room);\n        });\n        \n        actualRooms.forEach(function(roomName) {\n            var room = roomsMap.get(roomName);\n            if (room) {\n                targetRooms.push(room);\n            } else if (actualDebug) {\n                console.warn(\"Комната '\" + roomName + \"' не найдена\");\n            }\n        });\n    } else {\n        // Если комнаты не указаны, используем все комнаты\n        targetRooms = Hub.getRooms();\n    }\n\n    // Применяем фильтр исключений комнат\n    const rooms = targetRooms.filter(function loopRooms(room) { \n        return excRooms.indexOf(room.getName()) < 0; \n    });\n\n    if (actualDebug) console.info(\"Выбранные комнаты: \" + (actualRooms.length > 0 ? actualRooms.join(\"- \") : \"Весь дом\"));\n    if (actualDebug) console.info(\"Исключаемые комнаты: \" + excRooms.join(\"- \"));\n    if (actualDebug) console.info(\"Исключаемые аксессуары: \" + excAccessories.join(\"- \"));\n    if (actualDebug) console.info(\"Исключаемые сервисы: \" + excServices.join(\"- \"));\n    if (actualDebug) console.info(\"Дополнительные устройства: \" + additionalDevices.join(\"- \"));\n    if (actualDebug) console.info(\"Отложенные устройства: \" + actualDelayedDevices.join(\"- \"));\n    if (actualDebug) console.info(\"Время отложенного выключения: \" + delayedTurnOffTime + \"мс\");\n\n    // Собираем все устройства для отключения в массив\n    var devicesToTurnOff = [];\n\n    rooms.forEach(function loopRooms(room) {\n        var accessories = room.getAccessories().filter(function loopRooms(accessory) { \n            return excAccessories.indexOf(parseInt(accessory.getUUID())) < 0; \n        });\n        accessories.forEach(function loopAccessories(accessory) {\n            // Оптимизация: кэшируем проверки для каждого аксессуара\n            var modelId = accessory.getModelId();\n            if (modelId == \"Sprut.hub\") return;\n            \n            var status = accessory.getService(HS.AccessoryInformation).getCharacteristic(HC.C_Online).getValue();\n            if (status == false) return;\n\n            accessory.getServices().forEach(function loopServices(service) {\n                var serviceType = service.getType();\n                var shouldProcess = false;\n\n                // Проверяем тип сервиса и соответствующие опции\n                if (serviceType == HS.Lightbulb && actualLightbulbs) {\n                    shouldProcess = true;\n                } else if (serviceType == HS.Switch && actualSwitches) {\n                    shouldProcess = true;\n                } else if (serviceType == HS.Outlet && actualOutlets) {\n                    shouldProcess = true;\n                }\n\n                if (shouldProcess) {\n                    // Проверяем, не исключен ли конкретный сервис\n                    var serviceId = service.getUUID(); // service.getUUID() уже содержит \"accessoryId.serviceId\"\n                    if (excServices.indexOf(serviceId) >= 0) {\n                        if (actualDebug) console.info(\"Сервис \" + serviceId + \" исключен\");\n                        return;\n                    }\n\n                    // Оптимизация: проверяем видимость и состояние в одном условии\n                    if (!service.isVisible() && !actualHidden) return;\n                    \n                    var on = service.getCharacteristic(HC.On);\n                    if (!on || !on.getValue()) return;\n                    \n                    devicesToTurnOff.push({\n                        room: room,\n                        accessory: accessory,\n                        service: service,\n                        serviceId: serviceId,\n                        serviceType: serviceType\n                    });\n                }\n            });\n        });\n    });\n\n    // Добавляем дополнительные устройства в список\n    if (additionalDevices.length > 0) {\n        if (actualDebug) {\n            console.info(\"Ищем дополнительные устройства: \" + additionalDevices.join(\", \"));\n        }\n        additionalDevices.forEach(function (deviceId) {\n            try {\n                var deviceIdStr = deviceId.toString();\n                if (actualDebug) {\n                    console.info(\"Обрабатываем устройство: \" + deviceIdStr);\n                }\n                if (deviceIdStr.indexOf('.') !== -1) {\n                    // Это конкретный сервис (аксессуар.сервис)\n                    var parts = deviceIdStr.split('.');\n                    var accessoryId = parseInt(parts[0]);\n                    var serviceId = parts[1];\n\n                    var accessory = Hub.getAccessory(accessoryId);\n                    if (accessory) {\n                        var service = accessory.getService(serviceId);\n                        if (service) {\n                            devicesToTurnOff.push({\n                                room: accessory.getRoom(),\n                                accessory: accessory,\n                                service: service,\n                                serviceId: service.getUUID(), // service.getUUID() уже содержит \"accessoryId.serviceId\"\n                                serviceType: service.getType(),\n                                isAdditional: true\n                            });\n                            if (actualDebug) console.info(\"Добавлен сервис \" + accessoryId + \".\" + serviceId + \" в список выключения\");\n                        } else if (actualDebug) {\n                            console.warn(\"Сервис не найден: \" + serviceId + \" в аксессуаре: \" + accessoryId);\n                        }\n                    } else if (actualDebug) {\n                        console.warn(\"Аксессуар не найден: \" + accessoryId);\n                    }\n                } else {\n                    // Это аксессуар целиком\n                    var accessoryId = parseInt(deviceId);\n                    var accessory = Hub.getAccessory(accessoryId);\n                    if (accessory) {\n                        var services = accessory.getServices();\n                        if (actualDebug) console.info(\"Найдено сервисов: \" + services.length);\n                        services.forEach(function (service) {\n                            devicesToTurnOff.push({\n                                room: accessory.getRoom(),\n                                accessory: accessory,\n                                service: service,\n                                serviceId: service.getUUID(), // service.getUUID() уже содержит \"accessoryId.serviceId\"\n                                serviceType: service.getType(),\n                                isAdditional: true\n                            });\n                        });\n                        if (actualDebug) console.info(\"Добавлен аксессуар \" + accessoryId + \" (\" + services.length + \" сервисов) в список выключения\");\n                    } else if (actualDebug) {\n                        console.warn(\"Аксессуар не найден: \" + accessoryId);\n                    }\n                }\n            } catch (e) {\n                if (actualDebug) {\n                    console.error(\"Ошибка обработки устройства: \" + deviceId + \" Ошибка: \" + e.message);\n                }\n            }\n        });\n    }\n\n    // Сортируем устройства по порядку выключения (если задан)\n    if (actualTurnOffOrder && actualTurnOffOrder.length > 0 && interval > 0) {\n        devicesToTurnOff = sortDevicesByTurnOffOrder(devicesToTurnOff, actualTurnOffOrder, actualDebug);\n    }\n\n    // Отключаем устройства\n    if (interval > 0) {\n        // Последовательное отключение с интервалом\n        turnOffDevicesSequentially(devicesToTurnOff, interval, actualDebug, function() {\n        // После завершения последовательного выключения запускаем отложенное выключение\n        if (delayedTurnOffTime > 0 && actualDelayedDevices.length > 0) {\n            scheduleDelayedTurnOff(actualDelayedDevices, delayedTurnOffTime, actualDebug, function() {\n                // После завершения отложенного выключения запускаем проверку\n                if (actualVerifyTurnOff) {\n                    scheduleVerification(devicesToTurnOff, actualInterval, actualDebug);\n                }\n            });\n        } else {\n            // Если нет отложенного выключения, сразу запускаем проверку\n            if (actualVerifyTurnOff) {\n                scheduleVerification(devicesToTurnOff, actualInterval, actualDebug);\n            }\n        }\n        });\n    } else {\n        // Одновременное отключение\n        devicesToTurnOff.forEach(function (device) {\n            turnOffDevice(device, actualDebug);\n        });\n        \n        // После одновременного выключения запускаем отложенное выключение\n        if (delayedTurnOffTime > 0 && actualDelayedDevices.length > 0) {\n            scheduleDelayedTurnOff(actualDelayedDevices, delayedTurnOffTime, actualDebug, function() {\n                // После завершения отложенного выключения запускаем проверку\n                if (actualVerifyTurnOff) {\n                    scheduleVerification(devicesToTurnOff, actualInterval, actualDebug);\n                }\n            });\n        } else {\n            // Если нет отложенного выключения, сразу запускаем проверку\n            if (actualVerifyTurnOff) {\n                scheduleVerification(devicesToTurnOff, actualInterval, actualDebug);\n            }\n        }\n    }\n\n    /**\n     * Сортирует устройства по заданному порядку выключения\n     * @param {Array} devices - Массив устройств для сортировки\n     * @param {Array} turnOffOrder - Массив ID устройств в порядке выключения\n     * @param {boolean} debug - Режим отладки\n     * @returns {Array} Отсортированный массив устройств\n     */\n    function sortDevicesByTurnOffOrder(devices, turnOffOrder, debug) {\n        if (!turnOffOrder || turnOffOrder.length === 0) {\n            return devices;\n        }\n\n        var orderedDevices = [];\n        var remainingDevices = devices.slice(); // Копия массива\n\n        if (debug) {\n            console.info(\"Сортируем устройства по порядку выключения:\", turnOffOrder.join(\", \"));\n        }\n\n        // Сначала добавляем устройства в указанном порядке\n        turnOffOrder.forEach(function(orderId) {\n            var foundDevices = remainingDevices.filter(function(device) {\n                return isDeviceInOrder(device, orderId);\n            });\n\n            if (foundDevices.length > 0) {\n                orderedDevices = orderedDevices.concat(foundDevices);\n                // Удаляем найденные устройства из оставшихся\n                foundDevices.forEach(function(device) {\n                    var index = remainingDevices.indexOf(device);\n                    if (index > -1) {\n                        remainingDevices.splice(index, 1);\n                    }\n                });\n            } else if (debug) {\n                console.warn(\"Устройство с ID \" + orderId + \" не найдено в списке для выключения\");\n            }\n        });\n\n        // Затем добавляем все оставшиеся устройства\n        orderedDevices = orderedDevices.concat(remainingDevices);\n\n        if (debug) {\n            console.info(\"Итого устройств в порядке выключения: \" + orderedDevices.length + \" (было: \" + devices.length + \")\");\n        }\n\n        return orderedDevices;\n    }\n\n    /**\n     * Проверяет, соответствует ли устройство указанному ID в порядке выключения\n     * @param {Object} device - Объект устройства\n     * @param {*} orderId - ID для проверки (может быть числом, строкой или дробным числом)\n     * @returns {boolean} true если устройство соответствует ID\n     */\n    function isDeviceInOrder(device, orderId) {\n        try {\n            var deviceId = device.serviceId;\n            var accessoryId = device.accessory.getUUID();\n\n            if (typeof orderId === 'number') {\n                if (orderId % 1 === 0) {\n                    // Целое число - проверяем аксессуар\n                    return parseInt(accessoryId) === orderId;\n                } else {\n                    // Дробное число - проверяем аксессуар.сервис\n                    var parts = orderId.toString().split('.');\n                    var orderAccessoryId = parseInt(parts[0]);\n                    var orderServiceId = parts[1];\n                    return device.service.getUUID() === (orderAccessoryId + \".\" + orderServiceId);\n                }\n            } else if (typeof orderId === 'string') {\n                if (orderId.indexOf('.') !== -1) {\n                    // Строка с точкой - аксессуар.сервис\n                    var parts = orderId.split('.');\n                    var orderAccessoryId = parseInt(parts[0]);\n                    var orderServiceId = parts[1];\n                    return device.service.getUUID() === (orderAccessoryId + \".\" + orderServiceId);\n                } else {\n                    // Строка без точки - только аксессуар\n                    return parseInt(accessoryId) === parseInt(orderId);\n                }\n            }\n        } catch (e) {\n            // Игнорируем ошибки\n        }\n        return false;\n    }\n\n    // Общий список характеристик для отключения устройств\n    var TURN_OFF_CHARACTERISTICS = [\n        { type: HC.On, value: false, name: \"On\" },\n        { type: HC.TargetHeatingCoolingState, value: 0, name: \"TargetHeatingCoolingState\" }, // Off\n        { type: HC.TargetHeaterCoolerState, value: 0, name: \"TargetHeaterCoolerState\" }, // Off\n        { type: HC.TargetAirPurifierState, value: 0, name: \"TargetAirPurifierState\" }, // Off\n        { type: HC.TargetHumidifierDehumidifierState, value: 0, name: \"TargetHumidifierDehumidifierState\" }, // Off\n        { type: HC.TargetDoorState, value: 0, name: \"TargetDoorState\" }, // Open\n        { type: HC.TargetPosition, value: 0, name: \"TargetPosition\" }, // 0%\n        { type: HC.Mute, value: true, name: \"Mute\" }, // Mute\n        { type: HC.Active, value: 0, name: \"Active\" },\n    ];\n\n    /**\n     * Отключает сервис, ища первую доступную характеристику для отключения\n     * \n     * Поддерживаемые характеристики и сервисы:\n     * - HC.On (false) - Switch, Lightbulb, Outlet, FanBasic\n     * - HC.TargetHeatingCoolingState (0) - Thermostat\n     * - HC.TargetHeaterCoolerState (0) - HeaterCooler\n     * - HC.TargetAirPurifierState (0) - AirPurifier\n     * - HC.TargetHumidifierDehumidifierState (0) - HumidifierDehumidifier\n     * - HC.TargetDoorState (0) - Door\n     * - HC.TargetPosition (0) - Door, Faucet, IrrigationSystem, Valve, WindowCovering, Window\n     * - HC.Mute (true) - Speaker, Microphone, TelevisionSpeaker\n     * - HC.Active (0) - AirPurifier, HeaterCooler, HumidifierDehumidifier, Door, Faucet, IrrigationSystem, Valve, WindowCovering\n     * \n     * @param {Service} service - Сервис для отключения\n     * @param {boolean} debug - Режим отладки\n     */\n    function turnOffService(service, debug) {\n        var accessory = service.getAccessory();\n\n        // Ищем первую доступную характеристику для отключения\n        for (var i = 0; i < TURN_OFF_CHARACTERISTICS.length; i++) {\n            var charConfig = TURN_OFF_CHARACTERISTICS[i];\n            try {\n                var characteristic = service.getCharacteristic(charConfig.type);\n                if (characteristic) {\n                    var currentValue = characteristic.getValue();\n                    if (currentValue !== charConfig.value) {\n                        characteristic.setValue(charConfig.value);\n\n                        if (debug) {\n                            console.info(\"Выключено \" + charConfig.name + \" в \" + accessory.getName() + \" сервис \" + service.getName() + \" с \" + currentValue + \" на \" + charConfig.value);\n                        }\n                    }\n                    // Найдена первая доступная характеристика, выходим из цикла\n                    return;\n                }\n            } catch (e) {\n                // Игнорируем ошибки для характеристик, которые не поддерживаются сервисом\n                if (debug) {\n                    console.debug(\"Характеристика \" + charConfig.name + \" не поддерживается в сервисе \" + service.getName());\n                }\n            }\n        }\n\n        if (debug) {\n            console.warn(\"Не найдено подходящих характеристик для отключения в \" + accessory.getName() + \" сервис \" + service.getName());\n        }\n    }\n\n    /**\n     * Отключает устройства последовательно с заданным интервалом\n     * @param {Array} devices - Массив устройств для отключения\n     * @param {number} interval - Интервал в миллисекундах\n     * @param {boolean} debug - Режим отладки\n     * @param {Function} callback - Функция обратного вызова после завершения\n     */\n    function turnOffDevicesSequentially(devices, interval, debug, callback) {\n        if (devices.length === 0) {\n            return;\n        }\n\n        var currentIndex = 0;\n\n        function turnOffNext() {\n            if (currentIndex >= devices.length) {\n                if (debug) {\n                    console.info(\"Последовательное выключение завершено. Всего устройств: \" + devices.length);\n                }\n                if (callback) {\n                    callback();\n                }\n                return;\n            }\n\n            var device = devices[currentIndex];\n            turnOffDevice(device, debug);\n\n            currentIndex++;\n\n            if (currentIndex < devices.length) {\n                setTimeout(turnOffNext, interval);\n            } else {\n                if (debug) {\n                    console.info(\"Последовательное выключение завершено. Всего устройств: \" + devices.length);\n                }\n                if (callback) {\n                    callback();\n                }\n            }\n        }\n\n        if (debug) {\n            console.info(\"Начинаем последовательное выключение с интервалом: \" + interval + \" мс. Всего устройств: \" + devices.length);\n        }\n\n        // Начинаем отключение\n        turnOffNext();\n    }\n\n    /**\n     * Отключает одно устройство\n     * @param {Object} device - Объект устройства с информацией о комнате, аксессуаре и сервисе\n     * @param {boolean} debug - Режим отладки\n     */\n    function turnOffDevice(device, debug) {\n        try {\n            if (device.isAdditional) {\n                // Для дополнительных устройств используем универсальную функцию\n                turnOffService(device.service, debug);\n            } else {\n                // Для обычных устройств (лампы, выключатели, розетки)\n                var on = device.service.getCharacteristic(HC.On);\n                if (on && on.getValue()) {\n                    on.setValue(false);\n\n                    if (debug) {\n                        console.info(\"Выключено: \" + device.room.getName() + \" - \" + device.accessory.getName() + \" - \" + device.service.getName() + \" (Тип: \" + device.serviceType + \")\");\n                    }\n                }\n            }\n        } catch (e) {\n            if (debug) {\n                console.error(\"Ошибка выключения устройства: \" + device.serviceId + \" Ошибка: \" + e.message);\n            }\n        }\n    }\n    /**\n     * Проверяет, включено ли устройство\n     * @param {Object} device - Объект устройства\n     * @param {boolean} debug - Режим отладки\n     * @returns {boolean} true если устройство включено, false если выключено\n     */\n    function isDeviceOn(device, debug) {\n        try {\n            if (device.isAdditional) {\n                // Для дополнительных устройств проверяем все характеристики\n                var service = device.service;\n                var hasOnCharacteristic = false;\n                var isOn = false;\n                \n                // Используем общую константу характеристик\n                TURN_OFF_CHARACTERISTICS.forEach(function(charConfig) {\n                    try {\n                        var characteristic = service.getCharacteristic(charConfig.type);\n                        if (characteristic) {\n                            hasOnCharacteristic = true;\n                            var currentValue = characteristic.getValue();\n                            if (currentValue !== charConfig.value) {\n                                isOn = true;\n                            }\n                        }\n                    } catch (e) {\n                        // Игнорируем ошибки для неподдерживаемых характеристик\n                    }\n                });\n                \n                return hasOnCharacteristic && isOn;\n            } else {\n                // Для обычных устройств проверяем HC.On\n                var on = device.service.getCharacteristic(HC.On);\n                return on && on.getValue();\n            }\n        } catch (e) {\n            if (debug) {\n                console.error(\"Ошибка проверки устройства: \" + device.serviceId + \" Ошибка: \" + e.message);\n            }\n            return false;\n        }\n    }\n\n    /**\n     * Планирует повторное выключение через 5 секунд\n     * @param {Array} devices - Массив устройств для повторного выключения\n     * @param {number} interval - Интервал выключения в миллисекундах\n     * @param {boolean} debug - Режим отладки\n     */\n    function scheduleVerification(devices, interval, debug) {\n        if (debug) {\n            console.info(\"Запланировано повторное выключение через 5 секунд\");\n        }\n        \n        setTimeout(function() {\n            if (debug) {\n                console.info(\"Начинаем повторное выключение устройств\");\n            }\n            \n            // Собираем устройства, которые все еще включены\n            var stillOnDevices = devices.filter(function(device) {\n                return isDeviceOn(device, debug);\n            });\n            \n            // Добавляем отложенные устройства в проверку, если они есть\n            if (actualDelayedDevices && actualDelayedDevices.length > 0) {\n                var delayedDevicesToCheck = [];\n                \n                actualDelayedDevices.forEach(function (deviceId) {\n                    try {\n                        var deviceIdStr = deviceId.toString();\n                        if (deviceIdStr.indexOf('.') !== -1) {\n                            // Это конкретный сервис (аксессуар.сервис)\n                            var parts = deviceIdStr.split('.');\n                            var accessoryId = parseInt(parts[0]);\n                            var serviceId = parts[1];\n\n                            var accessory = Hub.getAccessory(accessoryId);\n                            if (accessory) {\n                                var service = accessory.getService(serviceId);\n                                if (service) {\n                                    delayedDevicesToCheck.push({\n                                        room: accessory.getRoom(),\n                                        accessory: accessory,\n                                        service: service,\n                                        serviceId: service.getUUID(),\n                                        serviceType: service.getType(),\n                                        isDelayed: true\n                                    });\n                                }\n                            }\n                        } else {\n                            // Это аксессуар целиком\n                            var accessoryId = parseInt(deviceId);\n                            var accessory = Hub.getAccessory(accessoryId);\n                            if (accessory) {\n                                var services = accessory.getServices();\n                                services.forEach(function (service) {\n                                    delayedDevicesToCheck.push({\n                                        room: accessory.getRoom(),\n                                        accessory: accessory,\n                                        service: service,\n                                        serviceId: service.getUUID(),\n                                        serviceType: service.getType(),\n                                        isDelayed: true\n                                    });\n                                });\n                            }\n                        }\n                    } catch (e) {\n                        // Игнорируем ошибки\n                    }\n                });\n                \n                // Добавляем отложенные устройства, которые все еще включены\n                var stillOnDelayedDevices = delayedDevicesToCheck.filter(function(device) {\n                    return isDeviceOn(device, debug);\n                });\n                \n                stillOnDevices = stillOnDevices.concat(stillOnDelayedDevices);\n            }\n            \n            if (stillOnDevices.length > 0) {\n                if (debug) {\n                    console.info(\"Найдено \" + stillOnDevices.length + \" устройств, которые все еще включены. Повторяем выключение.\");\n                }\n                \n                // Повторяем выключение\n                if (interval > 0) {\n                    turnOffDevicesSequentially(stillOnDevices, interval, debug);\n                } else {\n                    stillOnDevices.forEach(function (device) {\n                        turnOffDevice(device, debug);\n                    });\n                }\n            } else if (debug) {\n                console.info(\"Все устройства успешно выключены. Повторное выключение завершено.\");\n            }\n        }, 5000); // 5 секунд\n    }\n\n    /**\n     * Планирует отложенное выключение устройств через указанное время\n     * @param {Array} delayedDevices - Массив ID устройств для отложенного выключения\n     * @param {number} delayTime - Время задержки в миллисекундах\n     * @param {boolean} debug - Режим отладки\n     * @param {Function} callback - Функция обратного вызова после завершения\n     */\n    function scheduleDelayedTurnOff(delayedDevices, delayTime, debug, callback) {\n        if (debug) {\n            console.info(\"Запланировано отложенное выключение через \" + delayTime + \"мс для устройств: \" + delayedDevices.join(\", \"));\n        }\n        \n        setTimeout(function() {\n            if (debug) {\n                console.info(\"Начинаем отложенное выключение устройств\");\n            }\n            \n            // Собираем устройства для отложенного выключения\n            var delayedDevicesToTurnOff = [];\n            \n            delayedDevices.forEach(function (deviceId) {\n                try {\n                    var deviceIdStr = deviceId.toString();\n                    if (debug) {\n                        console.info(\"Обрабатываем отложенное устройство: \" + deviceIdStr);\n                    }\n                    if (deviceIdStr.indexOf('.') !== -1) {\n                        // Это конкретный сервис (аксессуар.сервис)\n                        var parts = deviceIdStr.split('.');\n                        var accessoryId = parseInt(parts[0]);\n                        var serviceId = parts[1];\n\n                        var accessory = Hub.getAccessory(accessoryId);\n                        if (accessory) {\n                            var service = accessory.getService(serviceId);\n                            if (service) {\n                                delayedDevicesToTurnOff.push({\n                                    room: accessory.getRoom(),\n                                    accessory: accessory,\n                                    service: service,\n                                    serviceId: service.getUUID(),\n                                    serviceType: service.getType(),\n                                    isDelayed: true\n                                });\n                                if (debug) console.info(\"Добавлен сервис \" + accessoryId + \".\" + serviceId + \" в список отложенного выключения\");\n                            } else if (debug) {\n                                console.warn(\"Сервис не найден: \" + serviceId + \" в аксессуаре: \" + accessoryId);\n                            }\n                        } else if (debug) {\n                            console.warn(\"Аксессуар не найден: \" + accessoryId);\n                        }\n                    } else {\n                        // Это аксессуар целиком\n                        var accessoryId = parseInt(deviceId);\n                        var accessory = Hub.getAccessory(accessoryId);\n                        if (accessory) {\n                            var services = accessory.getServices();\n                            if (debug) console.info(\"Найдено сервисов для отложенного выключения: \" + services.length);\n                            services.forEach(function (service) {\n                                delayedDevicesToTurnOff.push({\n                                    room: accessory.getRoom(),\n                                    accessory: accessory,\n                                    service: service,\n                                    serviceId: service.getUUID(),\n                                    serviceType: service.getType(),\n                                    isDelayed: true\n                                });\n                            });\n                            if (debug) console.info(\"Добавлен аксессуар \" + accessoryId + \" (\" + services.length + \" сервисов) в список отложенного выключения\");\n                        } else if (debug) {\n                            console.warn(\"Аксессуар не найден: \" + accessoryId);\n                        }\n                    }\n                } catch (e) {\n                    if (debug) {\n                        console.error(\"Ошибка обработки отложенного устройства: \" + deviceId + \" Ошибка: \" + e.message);\n                    }\n                }\n            });\n            \n            // Выключаем отложенные устройства\n            delayedDevicesToTurnOff.forEach(function (device) {\n                turnOffDevice(device, debug);\n            });\n            \n            if (debug) {\n                console.info(\"Отложенное выключение завершено. Всего устройств: \" + delayedDevicesToTurnOff.length);\n            }\n            \n            if (callback) {\n                callback();\n            }\n        }, delayTime);\n    }\n}\n\n/**\n * Парсит идентификаторы исключений в различных форматах\n * Поддерживает:\n * - Целые числа: 130, \"130\"\n * - Дробные числа: 130.13, \"130.13\" (аксессуар.сервис)\n * - Массивы с любыми из вышеперечисленных форматов\n * @param {*} value - Значение для парсинга\n * @returns {Object} Объект с массивами excAccessories и excServices\n */\nfunction masterSwitchParseExclusions(value) {\n    var excAccessories = [];\n    var excServices = [];\n\n    if (!value) {\n        return { excAccessories: excAccessories, excServices: excServices };\n    }\n\n    var items = [];\n    if (Array.isArray(value)) {\n        items = value;\n    } else {\n        items.push(value);\n    }\n\n    items.forEach(function (item) {\n        var parsed = masterSwitchParseExclusionItem(item);\n        if (parsed.accessoryId !== null) {\n            excAccessories.push(parsed.accessoryId);\n        }\n        if (parsed.serviceId !== null) {\n            excServices.push(parsed.accessoryId + \".\" + parsed.serviceId);\n        }\n    });\n\n    return { excAccessories: excAccessories, excServices: excServices };\n}\n\n/**\n * Парсит отдельный элемент исключения\n * @param {*} item - Элемент для парсинга\n * @returns {Object} Объект с accessoryId и serviceId\n */\nfunction masterSwitchParseExclusionItem(item) {\n    var accessoryId = null;\n    var serviceId = null;\n\n    if (typeof item === 'number') {\n        if (item % 1 === 0) {\n            // Целое число - только аксессуар\n            accessoryId = item;\n        } else {\n            // Дробное число - аксессуар.сервис\n            var parts = item.toString().split('.');\n            accessoryId = parseInt(parts[0]);\n            serviceId = parts[1] ? parts[1] : null;\n        }\n    } else if (typeof item === 'string') {\n        if (item.indexOf('.') !== -1) {\n            // Строка с точкой - аксессуар.сервис\n            var parts = item.split('.');\n            accessoryId = parseInt(parts[0]);\n            serviceId = parts[1] ? parts[1] : null;\n        } else {\n            // Строка без точки - только аксессуара\n            accessoryId = parseInt(item);\n        }\n    }\n\n    return { accessoryId: accessoryId, serviceId: serviceId };\n}\n\n/**\n * Преобразует значение в массив указанного типа\n * @param {*} value - Значение для преобразования\n * @param {string} type - Ожидаемый тип элементов\n * @returns {Array} Массив элементов\n */\nfunction masterSwitchGetArrayFromValue(value, type) {\n    var result = [];\n    if (Array.isArray(value)) {\n        result = value;\n    } else if (typeof value === type) {\n        result.push(value);\n    }\n    return result;\n}\n\n/**\n * Функция обратной совместимости для мастер-выключателя\n * @deprecated Используйте masterSwitch() для полной функциональности\n */\nfunction turnOffLight(excludeRooms, excludeAccessories) {\n    return masterSwitch({\n        excludeRooms: excludeRooms || [],\n        excludeAccessories: excludeAccessories || []\n    });\n}\n\n/**\n * Функция обратной совместимости для мастер-выключателя\n * @deprecated Используйте masterSwitch() для полной функциональности\n */\nfunction turnAllOff(params) {\n    return masterSwitch(params);\n}\n\n//#############################################################################\n//                                    ТЕСТЫ                                   #\n//#############################################################################\n\nlet isDeveloping = false; // Флаг разработки. Включить что бы тесты выполнялись.\n\nlet inTestMode = false;\nlet originalConsole = console;\nlet originalSetTimeout = setTimeout;\nlet originalHub = Hub;\nlet testLog = [];\n\n// Перехватываем console для тестов\nfunction setupTestConsole() {\n    console = {\n        info: function(msg) { testLog.push({ level: 'info', message: msg }); },\n        warn: function(msg) { testLog.push({ level: 'warn', message: msg }); },\n        error: function(msg) { testLog.push({ level: 'error', message: msg }); },\n        debug: function(msg) { testLog.push({ level: 'debug', message: msg }); },\n        message: originalConsole.message || function(msg) { testLog.push({ level: 'message', message: msg }); }\n    };\n    \n    // Мокаем setTimeout для тестов\n    setTimeout = function(callback, delay) {\n        if (inTestMode) {\n            // В тестах сразу выполняем callback без задержки\n            callback();\n        } else {\n            // В обычном режиме используем оригинальный setTimeout\n            originalConsole.info(\"setTimeout вызван вне тестового режима\");\n        }\n    };\n}\n\nfunction restoreConsole() {\n    console = originalConsole;\n    setTimeout = originalSetTimeout;\n}\n\nfunction restoreHub() {\n    Hub = originalHub;\n}\n\nfunction clearTestLog() {\n    testLog = [];\n}\n\n// Получение начальных значений переменных\nfunction getDefaultVariables() {\n    return {};\n}\n\n// Создание тестового выключателя с HC.On\nfunction createTestSwitch() {\n    let accessory = global.createUnitTestFullAccessory({\n        id: 1,\n        name: \"Тестовый выключатель\",\n        room: \"Тест\",\n        services: [{\n            id: 10,\n            type: HS.AccessoryInformation,\n            name: \"Информация об аксессуаре\",\n            characteristics: [{\n                id: 11,\n                type: HC.C_Online,\n                value: true\n            }]\n        }, {\n            id: 12,\n            type: HS.Switch,\n            name: \"Выключатель\",\n            characteristics: [{\n                id: 13,\n                type: HC.On,\n                value: true\n            }]\n        }]\n    });\n    \n    \n    return accessory;\n}\n\n// Создание тестового устройства с HC.Active\nfunction createTestActiveDevice() {\n    return global.createUnitTestFullAccessory({\n        id: 2,\n        name: \"Тестовое устройство\",\n        room: \"Тест\",\n        services: [{\n            id: 20,\n            type: HS.AccessoryInformation,\n            name: \"Информация об аксессуаре\",\n            characteristics: [{\n                id: 21,\n                type: HC.C_Online,\n                value: true\n            }]\n        }, {\n            id: 22,\n            type: HS.Fan,\n            name: \"Вентилятор\",\n            characteristics: [{\n                id: 23,\n                type: HC.Active,\n                value: 1\n            }]\n        }]\n    });\n}\n\n// Создание тестовой лампы\nfunction createTestLightbulb() {\n    return global.createUnitTestFullAccessory({\n        id: 3,\n        name: \"Тестовая лампа\",\n        room: \"Гостиная\",\n        services: [{\n            id: 30,\n            type: HS.AccessoryInformation,\n            name: \"Информация об аксессуаре\",\n            characteristics: [{\n                id: 31,\n                type: HC.C_Online,\n                value: true\n            }]\n        }, {\n            id: 32,\n            type: HS.Lightbulb,\n            name: \"Лампа\",\n            characteristics: [{\n                id: 33,\n                type: HC.On,\n                value: true\n            }]\n        }]\n    });\n}\n\n// Создание тестовой розетки\nfunction createTestOutlet() {\n    return global.createUnitTestFullAccessory({\n        id: 4,\n        name: \"Тестовая розетка\",\n        room: \"Кухня\",\n        services: [{\n            id: 40,\n            type: HS.AccessoryInformation,\n            name: \"Информация об аксессуаре\",\n            characteristics: [{\n                id: 41,\n                type: HC.C_Online,\n                value: true\n            }]\n        }, {\n            id: 42,\n            type: HS.Outlet,\n            name: \"Розетка\",\n            characteristics: [{\n                id: 43,\n                type: HC.On,\n                value: false\n            }]\n        }]\n    });\n}\n\n// Создание тестового очистителя воздуха\nfunction createTestAirPurifier() {\n    return global.createUnitTestFullAccessory({\n        id: 5,\n        name: \"Очиститель воздуха\",\n        room: \"Спальня\",\n        services: [{\n            id: 50,\n            type: HS.AccessoryInformation,\n            name: \"Информация об аксессуаре\",\n            characteristics: [{\n                id: 51,\n                type: HC.C_Online,\n                value: true\n            }]\n        }, {\n            id: 52,\n            type: HS.AirPurifier,\n            name: \"Очиститель\",\n            characteristics: [{\n                id: 53,\n                type: HC.Active,\n                value: 1\n            }, {\n                id: 54,\n                type: HC.TargetAirPurifierState,\n                value: 2\n            }]\n        }]\n    });\n}\n\n// Создание тестового термостата\nfunction createTestThermostat() {\n    return global.createUnitTestFullAccessory({\n        id: 6,\n        name: \"Термостат\",\n        room: \"Гостиная\",\n        services: [{\n            id: 60,\n            type: HS.AccessoryInformation,\n            name: \"Информация об аксессуаре\",\n            characteristics: [{\n                id: 61,\n                type: HC.C_Online,\n                value: true\n            }]\n        }, {\n            id: 62,\n            type: HS.Thermostat,\n            name: \"Термостат\",\n            characteristics: [{\n                id: 63,\n                type: HC.TargetHeatingCoolingState,\n                value: 1\n            }]\n        }]\n    });\n}\n\n// Мок Hub для тестов\nfunction setupTestHub() {\n    let testRooms = [\n        { name: \"Тест\", accessories: [] },\n        { name: \"Гостиная\", accessories: [] },\n        { name: \"Кухня\", accessories: [] },\n        { name: \"Спальня\", accessories: [] }\n    ];\n\n    Hub = {\n        getRooms: function() {\n            let rooms = [];\n            for (let i = 0; i < testRooms.length; i++) {\n                (function(room) {\n                    rooms.push({\n                        getName: function() { return room.name; },\n                        getAccessories: function() { return room.accessories; }\n                    });\n                })(testRooms[i]);\n            }\n            return rooms;\n        },\n        getAccessory: function(id) {\n            // Поиск аксессуара по ID во всех комнатах\n            for (let i = 0; i < testRooms.length; i++) {\n                let room = testRooms[i];\n                for (let j = 0; j < room.accessories.length; j++) {\n                    let acc = room.accessories[j];\n                    let uuid = acc.getUUID();\n                    if (uuid == id) {\n                        return acc;\n                    }\n                }\n            }\n            return null;\n        }\n    };\n}\n\nfunction resetTestState() {\n    clearTestLog();\n    restoreConsole();\n    setupTestHub();\n    restoreHub();\n}\n\nfunction resetTestHub() {\n    setupTestHub();\n}\n\n// Функция для сброса состояния перед каждым тестом\nfunction resetTestEnvironment() {\n    // Пересоздаем тестовый Hub с чистыми комнатами\n    setupTestHub();\n}\n\n\n// Функция для запуска всех тестов\nfunction runMasterSwitchTests() {\n    if (!isDeveloping || !global.hasUnitTests) {\n        return;\n    }\n    console.info(\"=== НАЧАЛО ТЕСТОВ МАСТЕР-ВЫКЛЮЧАТЕЛЯ ===\");\n\n    // Импортируем функции assert для тестов\n    let assert = global.assert;\n    let assertNull = global.assertNull;\n    let assertEquals = global.assertEquals;\n    let assertTrue = global.assertTrue;\n    let assertFalse = global.assertFalse;\n    let assertContains = global.assertContains;\n    let assertEmpty = global.assertEmpty;\n    let assertNotEmpty = global.assertNotEmpty;\n    \n    // Создаем обертки для assert функций, которые выбрасывают исключения\n    function assertEqualsWithException(actual, expected, message) {\n        if (actual !== expected) {\n            const msg = `Ожидалось ${expected}, получено ${actual}`;\n            const errorMsg = message ? `${message}: ${msg}` : msg;\n            console.error(errorMsg);\n            throw new Error(errorMsg);\n        }\n    }\n\n    try {\n        inTestMode = true;\n        setupTestConsole();\n        setupTestHub();\n\n        console.info(\"Запуск тестов мастер-выключателя\");\n        console.info(\"Всего тестов: 8\");\n\n        // Оптимизированные тесты\n        console.info(\"Тест 1: Функции парсинга и валидации\");\n        try { test1_ParsingAndValidation(assert, assertContains, assertEmpty, assertEquals, assertNull); } catch(e) { console.error(\"Тест 1 провален: \" + e.message); }\n\n        console.info(\"Тест 2: Базовое выключение устройств\");\n        try { test2_BasicTurnOff(assertTrue, assertFalse, assertEqualsWithException); } catch(e) { console.error(\"Тест 2 провален: \" + e.message); }\n\n        console.info(\"Тест 3: Исключения и фильтрация\");\n        try { test3_ExclusionsAndFiltering(assertTrue, assertFalse, assertContains, assertEmpty); } catch(e) { console.error(\"Тест 3 провален: \" + e.message); }\n\n        console.info(\"Тест 4: Различные типы устройств и характеристик\");\n        try { test4_DifferentDeviceTypes(assertEqualsWithException, assertNotEmpty); } catch(e) { console.error(\"Тест 4 провален: \" + e.message); }\n\n        console.info(\"Тест 5: Последовательное выключение и порядок\");\n        try { test5_SequentialAndOrder(assertTrue, assertFalse, assertNotEmpty); } catch(e) { console.error(\"Тест 5 провален: \" + e.message); }\n\n        console.info(\"Тест 6: Отложенное выключение и форматы ID\");\n        try { test6_DelayedTurnOff(assertTrue, assertFalse); } catch(e) { console.error(\"Тест 6 провален: \" + e.message); }\n\n        console.info(\"Тест 7: Валидация и граничные случаи\");\n        try { test7_ValidationAndEdgeCases(assertFalse, assertNotEmpty, assertEmpty); } catch(e) { console.error(\"Тест 7 провален: \" + e.message); }\n\n        console.info(\"Тест 8: Производительность и граничные случаи\");\n        try { test8_PerformanceAndEdgeCases(assertTrue, assertNotEmpty); } catch(e) { console.error(\"Тест 8 провален: \" + e.message); }\n\n        console.info(\"=== ВСЕ ТЕСТЫ ЗАВЕРШЕНЫ ===\");\n\n    } finally {\n        inTestMode = false;\n        \n        // Выводим все сообщения тестов в оригинальную консоль\n        testLog.forEach(function(log) {\n            switch(log.level) {\n                case 'info':\n                    originalConsole.info(log.message);\n                    break;\n                case 'warn':\n                    originalConsole.warn(log.message);\n                    break;\n                case 'error':\n                    originalConsole.error(log.message);\n                    break;\n                case 'debug':\n                    originalConsole.debug(log.message);\n                    break;\n                case 'message':\n                    if (originalConsole.message) {\n                        originalConsole.message(log.message);\n                    } else {\n                        originalConsole.info(log.message);\n                    }\n                    break;\n                default:\n                    originalConsole.info(log.message);\n                    break;\n            }\n        });\n        \n        // Выводим итоговую статистику\n        let totalLogs = testLog.length;\n        let errorLogs = testLog.filter(log => log.level === 'error').length;\n        let warnLogs = testLog.filter(log => log.level === 'warn').length;\n        \n        // Подсчитываем неудачные тесты по сообщениям об ошибках\n        let failedTestsCount = testLog.filter(log => log.level === 'error' && log.message.indexOf('провален') !== -1).length;\n        \n        originalConsole.info(\"Ошибок: \" + errorLogs);\n        originalConsole.info(\"Предупреждений: \" + warnLogs);\n        originalConsole.info(\"Неудачных тестов: \" + failedTestsCount);\n        \n        if (failedTestsCount === 0) {\n            originalConsole.info(\"✅ Все тесты прошли успешно!\");\n        } else {\n            originalConsole.warn(\"❌ Обнаружены ошибки в тестах (\" + failedTestsCount + \" из 25)\");\n        }\n        \n        resetTestState();\n    }\n}\n\n// Тест 1: Функции парсинга и валидации (объединяет тесты 1-5, 11, 16, 19-21, 24)\nfunction test1_ParsingAndValidation(assert, assertContains, assertEmpty, assertEquals, assertNull) {\n    console.info(\"  - Тестируем parseExclusions\");\n    // Тест с массивом значений\n    let result1 = masterSwitchParseExclusions([130, \"188\", 200.15, \"300.20\"]);\n    assertContains(result1.excAccessories, 130, \"parseExclusions: Массив должен содержать ID 130\");\n    assertContains(result1.excAccessories, 188, \"parseExclusions: Массив должен содержать ID 188\");\n    assertContains(result1.excServices, \"200.15\", \"parseExclusions: Массив должен содержать сервис 200.15\");\n    assertContains(result1.excServices, \"300.20\", \"parseExclusions: Массив должен содержать сервис 300.20\");\n\n    // Тест с одиночным значением\n    let result2 = masterSwitchParseExclusions(130);\n    assertContains(result2.excAccessories, 130, \"parseExclusions: Одиночное значение должно быть добавлено\");\n    assertEmpty(result2.excServices, \"parseExclusions: Одиночное значение не должно создавать сервисы\");\n\n    // Тест с null/undefined\n    let result3 = masterSwitchParseExclusions(null);\n    assertEmpty(result3.excAccessories, \"parseExclusions: null должен возвращать пустые массивы\");\n    assertEmpty(result3.excServices, \"parseExclusions: null должен возвращать пустые массивы\");\n\n    console.info(\"  - Тестируем parseExclusionItem\");\n    // Тест с целым числом\n    let result4 = masterSwitchParseExclusionItem(130);\n    assertEquals(130, result4.accessoryId, \"parseExclusionItem: Целое число должно парситься как accessoryId\");\n    assertNull(result4.serviceId, \"parseExclusionItem: Целое число не должно иметь serviceId\");\n\n    // Тест с дробным числом\n    let result5 = masterSwitchParseExclusionItem(130.15);\n    assertEquals(130, result5.accessoryId, \"parseExclusionItem: Дробное число должно парситься корректно\");\n    assertEquals(\"15\", result5.serviceId, \"parseExclusionItem: Дробное число должно иметь serviceId\");\n\n    console.info(\"  - Тестируем getArrayFromValue\");\n    // Тест с массивом\n    let result6 = masterSwitchGetArrayFromValue([1, 2, 3], \"number\");\n    assertEquals(3, result6.length, \"getArrayFromValue: Массив должен возвращаться как есть\");\n    assertEquals(1, result6[0], \"getArrayFromValue: Первый элемент должен быть 1\");\n\n    // Тест с одиночным значением\n    let result7 = masterSwitchGetArrayFromValue(\"test\", \"string\");\n    assertEquals(1, result7.length, \"getArrayFromValue: Одиночное значение должно стать массивом\");\n    assertEquals(\"test\", result7[0], \"getArrayFromValue: Значение должно сохраниться\");\n\n    console.info(\"  - Тестируем валидацию параметров\");\n    clearTestLog();\n    \n    // Тест с null параметрами\n    masterSwitch(null);\n    let errorLogs = testLog.filter(log => log.level === 'error');\n    assertNotEmpty(errorLogs, \"Валидация: Должна быть ошибка при null параметрах\");\n\n    clearTestLog();\n    \n    // Тест с некорректным интервалом\n    masterSwitch({\n        interval: -100,\n        debug: true\n    });\n    \n    let warnLogs = testLog.filter(log => log.level === 'warn');\n    assertNotEmpty(warnLogs, \"Валидация: Должно быть предупреждение при отрицательном интервале\");\n\n    console.info(\"  - Тестируем форматы ID\");\n    resetTestEnvironment();\n    let acc = createTestSwitch();\n    let service = acc.getService(HS.Switch);\n    \n    // Проверяем, что service.getUUID() возвращает правильный формат\n    let serviceUUID = service.getUUID();\n    assertEquals(serviceUUID, \"1.12\", \"Форматы ID: service.getUUID() должен возвращать 'accessoryId.serviceId'\");\n    \n    // Проверяем, что accessory.getUUID() возвращает только ID аксессуара\n    let accessoryUUID = acc.getUUID();\n    assertEquals(accessoryUUID, \"1\", \"Форматы ID: accessory.getUUID() должен возвращать только ID аксессуара\");\n}\n\n// Тест 2: Базовое выключение устройств (объединяет тесты 4-6, 9, 13, 15)\nfunction test2_BasicTurnOff(assertTrue, assertFalse, assertEqualsWithException) {\n    console.info(\"  - Тестируем простое выключение устройств\");\n    resetTestEnvironment();\n    \n    let acc1 = createTestSwitch();\n    let acc2 = createTestLightbulb();\n    \n    // Очищаем собственные комнаты аксессуаров\n    acc1.getRoom().getAccessories().splice(0);\n    acc2.getRoom().getAccessories().splice(0);\n    \n    let rooms = Hub.getRooms();\n    // Добавляем устройства в комнату \"Тест\"\n    for (var i = 0; i < rooms.length; i++) {\n        if (rooms[i].getName() === \"Тест\") {\n            rooms[i].getAccessories().push(acc1);\n            rooms[i].getAccessories().push(acc2);\n            acc1.setRoom(rooms[i]);\n            acc2.setRoom(rooms[i]);\n            break;\n        }\n    }\n\n    // Проверяем, что устройства включены\n    assertTrue(acc1.getService(HS.Switch).getCharacteristic(HC.On).getValue(), \"Базовое выключение: Выключатель должен быть включен\");\n    assertTrue(acc2.getService(HS.Lightbulb).getCharacteristic(HC.On).getValue(), \"Базовое выключение: Лампа должна быть включена\");\n\n    clearTestLog();\n    masterSwitch({\n        lightbulbs: true,\n        switches: true,\n        outlets: false,\n        debug: true\n    });\n\n    // Проверяем, что устройства выключились\n    let switchValue = acc1.getService(HS.Switch).getCharacteristic(HC.On).getValue();\n    let lightValue = acc2.getService(HS.Lightbulb).getCharacteristic(HC.On).getValue();\n    \n    assertFalse(switchValue, \"Базовое выключение: Выключатель должен быть выключен\");\n    assertFalse(lightValue, \"Базовое выключение: Лампа должна быть выключена\");\n\n    console.info(\"  - Тестируем turnOffService\");\n    resetTestEnvironment();\n    \n    let acc = createTestAirPurifier();\n    \n    // Очищаем собственную комнату аксессуара\n    acc.getRoom().getAccessories().splice(0);\n    \n    let rooms2 = Hub.getRooms();\n    // Находим комнату \"Спальня\" и добавляем туда очиститель воздуха\n    for (var i = 0; i < rooms2.length; i++) {\n        if (rooms2[i].getName() === \"Спальня\") {\n            rooms2[i].getAccessories().push(acc);\n            acc.setRoom(rooms2[i]);\n            break;\n        }\n    }\n    \n    // Включаем устройство\n    acc.getService(HS.AirPurifier).getCharacteristic(HC.Active).setValue(1);\n    \n    clearTestLog();\n    \n    // Тестируем напрямую вызов masterSwitch с одним устройством\n    masterSwitch({\n        lightbulbs: false,\n        switches: false,\n        outlets: false,\n        additionalDevices: [5], // ID очистителя воздуха\n        debug: true\n    });\n    \n    // Проверяем, что устройство действительно выключилось\n    let currentValue = acc.getService(HS.AirPurifier).getCharacteristic(HC.Active).getValue();\n    assertEqualsWithException(currentValue, 0, \"turnOffService: Очиститель воздуха должен выключиться\");\n    \n    // Проверяем, что найдены логи отладки\n    let debugLogs = testLog.filter(log => log.level === 'info');\n    assertNotEmpty(debugLogs, \"turnOffService: Должны быть логи отладки\");\n\n    console.info(\"  - Тестируем isDeviceOn\");\n    let acc3 = createTestSwitch();\n    let service = acc3.getService(HS.Switch);\n    \n    // Проверяем, что устройство включено\n    assertTrue(service.getCharacteristic(HC.On).getValue(), \"isDeviceOn: Включенное устройство должно возвращать true\");\n\n    // Выключаем устройство\n    service.getCharacteristic(HC.On).setValue(false);\n    assertFalse(service.getCharacteristic(HC.On).getValue(), \"isDeviceOn: Выключенное устройство должно возвращать false\");\n\n    console.info(\"  - Тестируем дополнительные устройства\");\n    resetTestEnvironment();\n    \n    // Создаем аксессуар БЕЗ собственной комнаты\n    let acc4 = createTestAirPurifier();\n    // Удаляем аксессуар из его собственной комнаты\n    acc4.getRoom().getAccessories().splice(0);\n    \n    let rooms3 = Hub.getRooms();\n\n    // Находим комнату \"Спальня\" в testRooms и добавляем туда очиститель воздуха\n    for (var i = 0; i < rooms3.length; i++) {\n        if (rooms3[i].getName() === \"Спальня\") {\n            rooms3[i].getAccessories().push(acc4);\n            // Обновляем ссылку на комнату в аксессуаре\n            acc4.setRoom(rooms3[i]);\n            break;\n        }\n    }\n\n    // Включаем устройство\n    acc4.getService(HS.AirPurifier).getCharacteristic(HC.Active).setValue(1);\n\n    masterSwitch({\n        lightbulbs: false,\n        switches: false,\n        outlets: false,\n        additionalDevices: [5], // ID очистителя воздуха\n        debug: true\n    });\n\n    // Проверяем значение после вызова masterSwitch\n    let currentValue2 = acc4.getService(HS.AirPurifier).getCharacteristic(HC.Active).getValue();\n    \n    // Устройство должно выключиться\n    assertEqualsWithException(currentValue2, 0, \"Дополнительные устройства: Дополнительное устройство должно выключиться\");\n}\n\n// Тест 3: Исключения и фильтрация (объединяет тесты 7-8, 17, 22)\nfunction test3_ExclusionsAndFiltering(assertTrue, assertFalse, assertContains, assertEmpty) {\n    console.info(\"  - Тестируем исключения устройств\");\n    resetTestEnvironment();\n    \n    let acc1 = createTestSwitch();\n    let acc2 = createTestLightbulb();\n    \n    // Очищаем собственные комнаты аксессуаров\n    acc1.getRoom().getAccessories().splice(0);\n    acc2.getRoom().getAccessories().splice(0);\n    \n    let rooms = Hub.getRooms();\n    // Добавляем устройства в комнату \"Тест\"\n    for (var i = 0; i < rooms.length; i++) {\n        if (rooms[i].getName() === \"Тест\") {\n            rooms[i].getAccessories().push(acc1);\n            rooms[i].getAccessories().push(acc2);\n            acc1.setRoom(rooms[i]);\n            acc2.setRoom(rooms[i]);\n            break;\n        }\n    }\n\n    // Выключаем с исключением первого устройства\n    masterSwitch({\n        lightbulbs: true,\n        switches: true,\n        excludeAccessories: [1], // ID первого аксессуара\n        debug: false\n    });\n\n    // Первое устройство должно остаться включенным (исключено)\n    assertTrue(acc1.getService(HS.Switch).getCharacteristic(HC.On).getValue(), \"Исключения: Исключенное устройство должно остаться включенным\");\n    // Второе устройство должно выключиться\n    assertFalse(acc2.getService(HS.Lightbulb).getCharacteristic(HC.On).getValue(), \"Исключения: Неисключенное устройство должно выключиться\");\n    \n    // Включаем обратно для следующего теста\n    acc2.getService(HS.Lightbulb).getCharacteristic(HC.On).setValue(true);\n    \n    // Тест исключения по ID сервиса\n    masterSwitch({\n        lightbulbs: true,\n        switches: true,\n        excludeAccessories: [\"3.32\"], // ID сервиса лампы\n        debug: false\n    });\n    \n    // Первое устройство должно выключиться (не исключено)\n    assertFalse(acc1.getService(HS.Switch).getCharacteristic(HC.On).getValue(), \"Исключения: Неисключенный сервис должен выключиться\");\n    // Второе устройство должно остаться включенным (исключено)\n    assertTrue(acc2.getService(HS.Lightbulb).getCharacteristic(HC.On).getValue(), \"Исключения: Исключенный сервис должен остаться включенным\");\n\n    console.info(\"  - Тестируем выключение по комнатам\");\n    resetTestEnvironment();\n    \n    let acc3 = createTestSwitch();\n    let acc4 = createTestLightbulb();\n    \n    // Очищаем собственные комнаты аксессуаров\n    acc3.getRoom().getAccessories().splice(0);\n    acc4.getRoom().getAccessories().splice(0);\n    \n    // Добавляем устройства в разные комнаты\n    let rooms2 = Hub.getRooms();\n    // Находим комнату \"Тест\" и добавляем туда выключатель\n    for (var i = 0; i < rooms2.length; i++) {\n        if (rooms2[i].getName() === \"Тест\") {\n            rooms2[i].getAccessories().push(acc3);\n            acc3.setRoom(rooms2[i]);\n            break;\n        }\n    }\n    // Находим комнату \"Гостиная\" и добавляем туда лампу\n    for (var i = 0; i < rooms2.length; i++) {\n        if (rooms2[i].getName() === \"Гостиная\") {\n            rooms2[i].getAccessories().push(acc4);\n            acc4.setRoom(rooms2[i]);\n            break;\n        }\n    }\n\n    // Выключаем только в комнате \"Гостиная\"\n    masterSwitch({\n        rooms: [\"Гостиная\"],\n        lightbulbs: true,\n        switches: true,\n        debug: false\n    });\n\n    // Устройство в \"Тест\" должно остаться включенным\n    assertTrue(acc3.getService(HS.Switch).getCharacteristic(HC.On).getValue(), \"Комнаты: Устройство в невыбранной комнате должно остаться включенным\");\n    // Устройство в \"Гостиная\" должно выключиться\n    assertFalse(acc4.getService(HS.Lightbulb).getCharacteristic(HC.On).getValue(), \"Комнаты: Устройство в выбранной комнате должно выключиться\");\n\n    console.info(\"  - Тестируем оптимизированный поиск комнат\");\n    clearTestLog();\n    \n    // Тестируем поиск несуществующей комнаты\n    masterSwitch({\n        rooms: [\"Несуществующая комната\"],\n        lightbulbs: true,\n        switches: true,\n        debug: true\n    });\n    \n    // Проверяем, что есть предупреждение о несуществующей комнате\n    let warnLogs = testLog.filter(log => log.level === 'warn' && log.message.indexOf(\"не найдена\") !== -1);\n    assertNotEmpty(warnLogs, \"Поиск комнат: Должно быть предупреждение о несуществующей комнате\");\n    \n    clearTestLog();\n    \n    // Тестируем поиск существующей комнаты\n    masterSwitch({\n        rooms: [\"Тест\"],\n        lightbulbs: true,\n        switches: true,\n        debug: true\n    });\n    \n    // Проверяем, что нет предупреждений\n    let warnLogs2 = testLog.filter(log => log.level === 'warn' && log.message.indexOf(\"не найдена\") !== -1);\n    assertEmpty(warnLogs2, \"Поиск комнат: Не должно быть предупреждений для существующей комнаты\");\n}\n\n// Тест 4: Различные типы устройств и характеристик (объединяет тесты 14, 23)\nfunction test4_DifferentDeviceTypes(assertEqualsWithException, assertNotEmpty) {\n    console.info(\"  - Тестируем различные типы устройств\");\n    resetTestEnvironment();\n    \n    let airPurifier = createTestAirPurifier();\n    let thermostat = createTestThermostat();\n    let fan = createTestActiveDevice();\n    \n    // Очищаем собственные комнаты аксессуаров\n    airPurifier.getRoom().getAccessories().splice(0);\n    thermostat.getRoom().getAccessories().splice(0);\n    fan.getRoom().getAccessories().splice(0);\n    \n    let rooms = Hub.getRooms();\n    \n    // Добавляем устройства в разные комнаты\n    for (var i = 0; i < rooms.length; i++) {\n        if (rooms[i].getName() === \"Спальня\") {\n            rooms[i].getAccessories().push(airPurifier);\n            airPurifier.setRoom(rooms[i]);\n        } else if (rooms[i].getName() === \"Гостиная\") {\n            rooms[i].getAccessories().push(thermostat);\n            thermostat.setRoom(rooms[i]);\n        } else if (rooms[i].getName() === \"Тест\") {\n            rooms[i].getAccessories().push(fan);\n            fan.setRoom(rooms[i]);\n        }\n    }\n    \n    // Включаем все устройства\n    airPurifier.getService(HS.AirPurifier).getCharacteristic(HC.Active).setValue(1);\n    airPurifier.getService(HS.AirPurifier).getCharacteristic(HC.TargetAirPurifierState).setValue(2);\n    thermostat.getService(HS.Thermostat).getCharacteristic(HC.TargetHeatingCoolingState).setValue(2);\n    fan.getService(HS.Fan).getCharacteristic(HC.Active).setValue(1);\n    \n    // Выключаем через masterSwitch\n    masterSwitch({\n        lightbulbs: false,\n        switches: false,\n        outlets: false,\n        additionalDevices: [5, 6, 2], // ID всех устройств\n        debug: false\n    });\n    \n    // Проверяем, что все устройства выключились\n    let airPurifierActive = airPurifier.getService(HS.AirPurifier).getCharacteristic(HC.Active).getValue();\n    let airPurifierTarget = airPurifier.getService(HS.AirPurifier).getCharacteristic(HC.TargetAirPurifierState).getValue();\n    let thermostatValue = thermostat.getService(HS.Thermostat).getCharacteristic(HC.TargetHeatingCoolingState).getValue();\n    let fanValue = fan.getService(HS.Fan).getCharacteristic(HC.Active).getValue();\n    \n    assertEqualsWithException(airPurifierActive, 0, \"Типы устройств: Active очистителя воздуха должен быть 0\");\n    assertEqualsWithException(airPurifierTarget, 0, \"Типы устройств: TargetAirPurifierState должен быть 0\");\n    assertEqualsWithException(thermostatValue, 0, \"Типы устройств: TargetHeatingCoolingState термостата должен быть 0\");\n    assertEqualsWithException(fanValue, 0, \"Типы устройств: Active вентилятора должен быть 0\");\n\n    console.info(\"  - Тестируем отладку и логирование\");\n    resetTestEnvironment();\n    \n    let acc = createTestSwitch();\n    \n    // Очищаем собственную комнату аксессуара\n    acc.getRoom().getAccessories().splice(0);\n    \n    let rooms2 = Hub.getRooms();\n    // Находим комнату \"Тест\" и добавляем туда выключатель\n    for (var i = 0; i < rooms2.length; i++) {\n        if (rooms2[i].getName() === \"Тест\") {\n            rooms2[i].getAccessories().push(acc);\n            acc.setRoom(rooms2[i]);\n            break;\n        }\n    }\n\n    clearTestLog();\n    masterSwitch({\n        switches: true,\n        debug: true\n    });\n\n    let infoLogs = testLog.filter(log => log.level === 'info');\n    assertNotEmpty(infoLogs, \"Отладка: Должны быть информационные логи при включенной отладке\");\n}\n\n// Тест 5: Последовательное выключение и порядок (объединяет тесты 10, 15, 18)\nfunction test5_SequentialAndOrder(assertTrue, assertFalse, assertNotEmpty) {\n    console.info(\"  - Тестируем последовательное выключение\");\n    resetTestEnvironment();\n    \n    let acc1 = createTestSwitch();\n    let acc2 = createTestLightbulb();\n    \n    // Очищаем собственные комнаты аксессуаров\n    acc1.getRoom().getAccessories().splice(0);\n    acc2.getRoom().getAccessories().splice(0);\n    \n    let rooms = Hub.getRooms();\n    // Находим комнату \"Тест\" и добавляем туда устройства\n    for (var i = 0; i < rooms.length; i++) {\n        if (rooms[i].getName() === \"Тест\") {\n            rooms[i].getAccessories().push(acc1);\n            rooms[i].getAccessories().push(acc2);\n            acc1.setRoom(rooms[i]);\n            acc2.setRoom(rooms[i]);\n            break;\n        }\n    }\n\n    clearTestLog();\n    masterSwitch({\n        lightbulbs: true,\n        switches: true,\n        interval: 100, // 100мс интервал\n        debug: true\n    });\n\n    // Проверяем, что устройства выключились\n    assertFalse(acc1.getService(HS.Switch).getCharacteristic(HC.On).getValue(), \"Последовательное: Первое устройство должно выключиться\");\n    assertFalse(acc2.getService(HS.Lightbulb).getCharacteristic(HC.On).getValue(), \"Последовательное: Второе устройство должно выключиться\");\n\n    console.info(\"  - Тестируем порядок выключения\");\n    resetTestEnvironment();\n    \n    let acc3 = createTestSwitch();\n    let acc4 = createTestLightbulb();\n    let acc5 = createTestOutlet();\n    \n    // Очищаем собственные комнаты аксессуаров\n    acc3.getRoom().getAccessories().splice(0);\n    acc4.getRoom().getAccessories().splice(0);\n    acc5.getRoom().getAccessories().splice(0);\n    \n    let rooms2 = Hub.getRooms();\n    // Добавляем устройства в комнату \"Тест\"\n    for (var i = 0; i < rooms2.length; i++) {\n        if (rooms2[i].getName() === \"Тест\") {\n            rooms2[i].getAccessories().push(acc3);\n            rooms2[i].getAccessories().push(acc4);\n            rooms2[i].getAccessories().push(acc5);\n            acc3.setRoom(rooms2[i]);\n            acc4.setRoom(rooms2[i]);\n            acc5.setRoom(rooms2[i]);\n            break;\n        }\n    }\n    \n    clearTestLog();\n    \n    // Тест с порядком выключения\n    masterSwitch({\n        lightbulbs: true,\n        switches: true,\n        outlets: true,\n        turnOffOrder: [3, 1], // Сначала розетка, потом выключатель\n        interval: 50, // Небольшой интервал для тестирования\n        debug: true\n    });\n    \n    // Проверяем, что все устройства выключились\n    assertFalse(acc3.getService(HS.Switch).getCharacteristic(HC.On).getValue(), \"Порядок: Выключатель должен выключиться\");\n    assertFalse(acc4.getService(HS.Lightbulb).getCharacteristic(HC.On).getValue(), \"Порядок: Лампа должна выключиться\");\n    assertFalse(acc5.getService(HS.Outlet).getCharacteristic(HC.On).getValue(), \"Порядок: Розетка должна выключиться\");\n    \n    // Проверяем, что есть логи о порядке выключения\n    let orderLogs = testLog.filter(log => log.message.indexOf(\"Сортируем устройства по порядку выключения\") !== -1);\n    assertNotEmpty(orderLogs, \"Порядок: Должны быть логи о сортировке по порядку\");\n\n    console.info(\"  - Тестируем повторное выключение\");\n    resetTestEnvironment();\n    \n    let acc6 = createTestSwitch();\n    \n    // Очищаем собственную комнату аксессуара\n    acc6.getRoom().getAccessories().splice(0);\n    \n    let rooms3 = Hub.getRooms();\n    \n    // Находим комнату \"Тест\" и добавляем туда устройство\n    for (var i = 0; i < rooms3.length; i++) {\n        if (rooms3[i].getName() === \"Тест\") {\n            rooms3[i].getAccessories().push(acc6);\n            acc6.setRoom(rooms3[i]);\n            break;\n        }\n    }\n\n    clearTestLog();\n    masterSwitch({\n        switches: true,\n        verifyTurnOff: true,\n        debug: true\n    });\n\n    // Проверяем, что устройство выключилось\n    if (acc6.getService(HS.Switch)) {\n        assertFalse(acc6.getService(HS.Switch).getCharacteristic(HC.On).getValue(), \"Повторное: Устройство должно выключиться\");\n    } else {\n        console.error(\"Тест: getService(HS.Switch) вернул null\");\n    }\n\n    // Проверяем, что есть логи о планировании повторного выключения\n    let infoLogs = testLog.filter(log => log.message.indexOf(\"Запланировано повторное выключение\") !== -1);\n    assertNotEmpty(infoLogs, \"Повторное: Должен быть лог о планировании повторного выключения\");\n}\n\n// Тест 6: Отложенное выключение и форматы ID (объединяет тесты 26-27)\nfunction test6_DelayedTurnOff(assertTrue, assertFalse) {\n    console.info(\"  - Тестируем отложенное выключение устройств\");\n    resetTestEnvironment();\n    \n    let acc1 = createTestSwitch();\n    let acc2 = createTestLightbulb();\n    \n    // Очищаем собственные комнаты аксессуаров\n    acc1.getRoom().getAccessories().splice(0);\n    acc2.getRoom().getAccessories().splice(0);\n    \n    let rooms = Hub.getRooms();\n    // Добавляем устройства в комнату \"Тест\"\n    for (var i = 0; i < rooms.length; i++) {\n        if (rooms[i].getName() === \"Тест\") {\n            rooms[i].getAccessories().push(acc1);\n            rooms[i].getAccessories().push(acc2);\n            acc1.setRoom(rooms[i]);\n            acc2.setRoom(rooms[i]);\n            break;\n        }\n    }\n    \n    clearTestLog();\n    \n    // Тестируем отложенное выключение\n    masterSwitch({\n        lightbulbs: true,\n        switches: true,\n        delayedDevices: [1], // ID первого аксессуара (выключатель)\n        delayedTurnOffTime: 100, // 100мс задержка для тестов\n        debug: true\n    });\n    \n    // В тестовом режиме setTimeout выполняется сразу, поэтому отложенное устройство должно выключиться\n    assertFalse(acc1.getService(HS.Switch).getCharacteristic(HC.On).getValue(), \"Отложенное: Отложенное устройство должно выключиться в тестовом режиме\");\n    \n    // Второе устройство (лампа) должно выключиться сразу в любом режиме\n    assertFalse(acc2.getService(HS.Lightbulb).getCharacteristic(HC.On).getValue(), \"Отложенное: Неотложенное устройство должно выключиться сразу\");\n\n    console.info(\"  - Тестируем форматы ID в отложенном выключении\");\n    resetTestEnvironment();\n    \n    let acc3 = createTestSwitch();\n    let acc4 = createTestLightbulb();\n    \n    // Очищаем собственные комнаты аксессуаров\n    acc3.getRoom().getAccessories().splice(0);\n    acc4.getRoom().getAccessories().splice(0);\n    \n    let rooms2 = Hub.getRooms();\n    // Добавляем устройства в комнату \"Тест\"\n    for (var i = 0; i < rooms2.length; i++) {\n        if (rooms2[i].getName() === \"Тест\") {\n            rooms2[i].getAccessories().push(acc3);\n            rooms2[i].getAccessories().push(acc4);\n            acc3.setRoom(rooms2[i]);\n            acc4.setRoom(rooms2[i]);\n            break;\n        }\n    }\n    \n    clearTestLog();\n    \n    // Проверяем форматы ID\n    let accessoryId = acc3.getUUID(); // Должно быть \"1\"\n    let serviceId = acc3.getService(HS.Switch).getUUID(); // Должно быть \"1.12\"\n    \n    console.info(\"Форматы ID: accessoryId = \" + accessoryId + \", serviceId = \" + serviceId);\n    \n    // Тестируем отложенное выключение с разными форматами ID\n    masterSwitch({\n        lightbulbs: true,\n        switches: true,\n        delayedDevices: [1, 3], // ID аксессуаров (выключатель и лампа)\n        delayedTurnOffTime: 100, // 100мс задержка для тестов\n        debug: true\n    });\n    \n    // Оба устройства должны выключиться в тестовом режиме\n    assertFalse(acc3.getService(HS.Switch).getCharacteristic(HC.On).getValue(), \"Форматы ID: Выключатель должен выключиться\");\n    assertFalse(acc4.getService(HS.Lightbulb).getCharacteristic(HC.On).getValue(), \"Форматы ID: Лампа должна выключиться\");\n}\n\n// Тест 7: Валидация и граничные случаи (объединяет тесты 16, 24)\nfunction test7_ValidationAndEdgeCases(assertFalse, assertNotEmpty, assertEmpty) {\n    console.info(\"  - Тестируем обработку ошибок и граничных случаев\");\n    clearTestLog();\n    \n    // Тест с пустыми параметрами\n    masterSwitch({});\n    let errorLogs = testLog.filter(log => log.level === 'error');\n    assertEmpty(errorLogs, \"Граничные случаи: Не должно быть ошибок с пустыми параметрами\");\n    \n    clearTestLog();\n    \n    // Тест с некорректными типами данных\n    masterSwitch({\n        rooms: \"не массив\",\n        excludeRooms: 123,\n        excludeAccessories: \"не массив\",\n        additionalDevices: \"не массив\",\n        interval: \"не число\",\n        debug: \"не булево\"\n    });\n    \n    // Проверяем, что функция не падает с ошибкой\n    let errorLogs2 = testLog.filter(log => log.level === 'error');\n    assertEmpty(errorLogs2, \"Граничные случаи: Функция должна обрабатывать некорректные типы данных\");\n    \n    clearTestLog();\n    \n    // Тест с отрицательным интервалом\n    masterSwitch({\n        interval: -100,\n        debug: true\n    });\n    \n    let warnLogs = testLog.filter(log => log.level === 'warn' && log.message.indexOf(\"интервал\") !== -1);\n    assertNotEmpty(warnLogs, \"Граничные случаи: Должно быть предупреждение о некорректном интервале\");\n\n    console.info(\"  - Тестируем валидацию параметров\");\n    clearTestLog();\n    \n    // Тест с пустыми массивами\n    masterSwitch({\n        rooms: [],\n        excludeRooms: [],\n        excludeAccessories: [],\n        additionalDevices: [],\n        debug: true\n    });\n    \n    let errorLogs3 = testLog.filter(log => log.level === 'error');\n    assertEmpty(errorLogs3, \"Валидация: Не должно быть ошибок с пустыми массивами\");\n}\n\n// Тест 8: Производительность и граничные случаи (объединяет тесты 25)\nfunction test8_PerformanceAndEdgeCases(assertTrue, assertNotEmpty) {\n    console.info(\"  - Тестируем производительность с большим количеством устройств\");\n    resetTestEnvironment();\n    \n    // Создаем много тестовых устройств\n    let devices = [];\n    let rooms = Hub.getRooms();\n    let testRoom = null;\n    \n    // Находим тестовую комнату\n    for (var i = 0; i < rooms.length; i++) {\n        if (rooms[i].getName() === \"Тест\") {\n            testRoom = rooms[i];\n            break;\n        }\n    }\n    \n    if (!testRoom) {\n        console.error(\"test8_PerformanceAndEdgeCases: Не найдена тестовая комната\");\n        return;\n    }\n    \n    // Создаем 10 устройств\n    for (var i = 0; i < 10; i++) {\n        let acc = global.createUnitTestFullAccessory({\n            id: 100 + i,\n            name: \"Тестовое устройство \" + i,\n            room: \"Тест\",\n            services: [{\n                id: 1000 + i * 10,\n                type: HS.AccessoryInformation,\n                name: \"Информация об аксессуаре\",\n                characteristics: [{\n                    id: 10000 + i * 100,\n                    type: HC.C_Online,\n                    value: true\n                }]\n            }, {\n                id: 1001 + i * 10,\n                type: HS.Switch,\n                name: \"Выключатель\",\n                characteristics: [{\n                    id: 10001 + i * 100,\n                    type: HC.On,\n                    value: true\n                }]\n            }]\n        });\n        \n        testRoom.getAccessories().push(acc);\n        acc.setRoom(testRoom);\n        devices.push(acc);\n    }\n    \n    clearTestLog();\n    let startTime = Date.now();\n    \n    // Выключаем все устройства\n    masterSwitch({\n        rooms: [\"Тест\"],\n        switches: true,\n        debug: true\n    });\n    \n    let endTime = Date.now();\n    let executionTime = endTime - startTime;\n    \n    // Проверяем, что все устройства выключились\n    let allTurnedOff = devices.every(function(device) {\n        return !device.getService(HS.Switch).getCharacteristic(HC.On).getValue();\n    });\n    \n    assertTrue(allTurnedOff, \"Производительность: Все устройства должны выключиться\");\n    \n    console.info(\"test8_PerformanceAndEdgeCases: Время выполнения: \" + executionTime + \"мс для \" + devices.length + \" устройств\");\n    \n    // Проверяем, что время выполнения разумное (менее 1 секунды)\n    if (executionTime > 1000) {\n        console.warn(\"test8_PerformanceAndEdgeCases: Время выполнения слишком большое: \" + executionTime + \"мс\");\n    }\n\n    console.info(\"  - Тестируем граничные случаи\");\n    clearTestLog();\n    \n    // Тест с максимальными значениями\n    masterSwitch({\n        interval: 60000, // Максимальный интервал\n        delayedTurnOffTime: 300000, // Максимальное время отложенного выключения\n        debug: true\n    });\n    \n    // Проверяем, что нет ошибок\n    let errorLogs = testLog.filter(log => log.level === 'error');\n    if (errorLogs.length > 0) {\n        console.error(\"Граничные случаи: Найдены ошибки с максимальными значениями: \" + errorLogs.map(log => log.message).join(\", \"));\n    }\n}\n\n// Запускаем тесты при загрузке сценария\nrunMasterSwitchTests();",
    "type": "GLOBAL"
  }
}
