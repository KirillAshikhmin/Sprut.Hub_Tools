{
  "scenarioTemplate": {
    "name": "Выключить весь свет",
    "desc": "Выключает все светильники и выключатели в доме.\nvar excludeRoomsNames = [\"Информер\", \"Комп\", \"Виртуальная\", \"Контрольная\"]; //ID комнат, где не надо выключать свет\nvar excludeAccessoriesId = [130]; //ID устройств, которые не надо выключать \n\nВызывать из блочного сценария блоком кода\nglobal.turnOffLight()\n\nВ вызов можно передать название комнат(ы) global.turnOffLight([\"Коридор\",\"Двор\"]), ID определённых устройств global.turnOffLight([],[11,42]), так и всё вместе global.turnOffLight([\"Коридор\",\"Двор\"],[11,42])\nПри этом не будет отключаться свет из комнат в теле сценария и те, что в вызове.",
    "active": true,
    "onStart": false,
    "sync": false,
    "data": "var excludeRoomsNames = [\"Виртуальная\"]; //ID комнат, где не надо выключать свет\r\nvar excludeAccessoriesId = [130, 188]; //ID устройств, которые не надо выключать \r\nvar turnOffHidden = false; // Отключать скрытые\r\nvar turnOffOutlets = false; // Отключать розетки\r\nvar turnOffAdditionalDevices = []; //ID устройств и сервисов для дополнительного отключения любых типов устройств\r\nvar turnOffLightDebug = false; // Активация дополнительного логгирования для отладки\r\n\r\nfunction turnOffLight(excludeRooms, excludeAccessories) {\r\n    var excRooms = []\r\n    var excAccessories = []\r\n    var excServices = []\r\n\r\n    // Обработка исключений комнат\r\n    excludeRoomsNames.forEach(function fe(room) { excRooms.push(room) })\r\n    getArrayFromValue(excludeRooms, \"string\").forEach(function fe(room) { excRooms.push(room) })\r\n\r\n    // Обработка исключений аксессуаров и сервисов из глобальных настроек\r\n    var globalExclusions = parseExclusions(excludeAccessoriesId);\r\n    excAccessories = excAccessories.concat(globalExclusions.excAccessories);\r\n    excServices = excServices.concat(globalExclusions.excServices);\r\n\r\n    // Обработка исключений аксессуаров и сервисов из параметров функции\r\n    var paramExclusions = parseExclusions(excludeAccessories);\r\n    excAccessories = excAccessories.concat(paramExclusions.excAccessories);\r\n    excServices = excServices.concat(paramExclusions.excServices);\r\n\r\n    // Парсим дополнительные устройства для отключения\r\n    var additionalDevices = [];\r\n    if (turnOffAdditionalDevices && turnOffAdditionalDevices.length > 0) {\r\n        var additionalExclusions = parseExclusions(turnOffAdditionalDevices);\r\n        additionalDevices = additionalExclusions.excAccessories.concat(additionalExclusions.excServices);\r\n    }\r\n\r\n    if (turnOffLightDebug) log.info(\"Exclude Rooms \" + excRooms.join(\"-\"));\r\n    if (turnOffLightDebug) log.info(\"Exclude Accessories \" + excAccessories.join(\"-\"));\r\n    if (turnOffLightDebug) log.info(\"Exclude Services \" + excServices.join(\"-\"));\r\n    if (turnOffLightDebug) log.info(\"Additional Devices \" + additionalDevices.join(\"-\"));\r\n    \r\n    const rooms = Hub.getRooms().filter(function loopRooms(room) { return excRooms.indexOf(room.getName()) < 0 });\r\n\r\n    rooms.forEach(function loopRooms(room) {\r\n        var accessories = room.getAccessories().filter(function loopRooms(accessory) { return excAccessories.indexOf(parseInt(accessory.getUUID())) < 0 });\r\n        accessories.forEach(function loopAccessories(accessory) {\r\n            var status = accessory.getService(HS.AccessoryInformation).getCharacteristic(HC.C_Online).getValue();\r\n            if (accessory.getModelId() == \"Sprut.hub\" || status == false) return\r\n\r\n            accessory.getServices().forEach(function loopServices(service) {\r\n                var serviceType = service.getType();\r\n                var shouldProcess = false;\r\n                \r\n                // Проверяем тип сервиса\r\n                if (serviceType == HS.Switch || serviceType == HS.Lightbulb) {\r\n                    shouldProcess = true;\r\n                } else if (serviceType == HS.Outlet && turnOffOutlets) {\r\n                    shouldProcess = true;\r\n                }\r\n                \r\n                if (shouldProcess) {\r\n                    // Проверяем, не исключен ли конкретный сервис\r\n                    var serviceId = accessory.getUUID() + \".\" + service.getUUID();\r\n                    if (excServices.indexOf(serviceId) >= 0) {\r\n                        if (turnOffLightDebug) log.info(\"Service \" + serviceId + \" is excluded\");\r\n                        return;\r\n                    }\r\n                    \r\n                    var on = service.getCharacteristic(HC.On)\r\n                    if ((service.isVisible() || turnOffHidden) && on.getValue()) {\r\n                        if (turnOffLightDebug) log.info(\"Room \" + room.getName() + \". Accessory \" + accessory.getName() + \". Service \" + serviceId + \" \" + service.getName() + \" (Type: \" + serviceType + \")\");\r\n                        on.setValue(false)\r\n                    }\r\n                }\r\n            })\r\n        })\r\n    })\r\n\r\n    // Обрабатываем дополнительные устройства для отключения\r\n    if (additionalDevices.length > 0) {\r\n        turnOffAdditionalDevicesGlobal(additionalDevices);\r\n    }\r\n}\r\n\r\n/**\r\n * Парсит идентификаторы исключений в различных форматах\r\n * Поддерживает:\r\n * - Целые числа: 130, \"130\"\r\n * - Дробные числа: 130.13, \"130.13\" (аксессуар.сервис)\r\n * - Массивы с любыми из вышеперечисленных форматов\r\n * @param {*} value - Значение для парсинга\r\n * @returns {Object} Объект с массивами excAccessories и excServices\r\n */\r\nfunction parseExclusions(value) {\r\n    var excAccessories = [];\r\n    var excServices = [];\r\n    \r\n    if (!value) {\r\n        return { excAccessories: excAccessories, excServices: excServices };\r\n    }\r\n    \r\n    var items = [];\r\n    if (Array.isArray(value)) {\r\n        items = value;\r\n    } else {\r\n        items.push(value);\r\n    }\r\n    \r\n    items.forEach(function(item) {\r\n        var parsed = parseExclusionItem(item);\r\n        if (parsed.accessoryId !== null) {\r\n            excAccessories.push(parsed.accessoryId);\r\n        }\r\n        if (parsed.serviceId !== null) {\r\n            excServices.push(parsed.serviceId);\r\n        }\r\n    });\r\n    \r\n    return { excAccessories: excAccessories, excServices: excServices };\r\n}\r\n\r\n/**\r\n * Парсит отдельный элемент исключения\r\n * @param {*} item - Элемент для парсинга\r\n * @returns {Object} Объект с accessoryId и serviceId\r\n */\r\nfunction parseExclusionItem(item) {\r\n    var accessoryId = null;\r\n    var serviceId = null;\r\n    \r\n    if (typeof item === 'number') {\r\n        if (Number.isInteger(item)) {\r\n            // Целое число - только аксессуар\r\n            accessoryId = item;\r\n        } else {\r\n            // Дробное число - аксессуар.сервис\r\n            var parts = item.toString().split('.');\r\n            accessoryId = parseInt(parts[0]);\r\n            serviceId = parts[1] ? parts[1] : null;\r\n        }\r\n    } else if (typeof item === 'string') {\r\n        if (item.includes('.')) {\r\n            // Строка с точкой - аксессуар.сервис\r\n            var parts = item.split('.');\r\n            accessoryId = parseInt(parts[0]);\r\n            serviceId = parts[1] ? parts[1] : null;\r\n        } else {\r\n            // Строка без точки - только аксессуар\r\n            accessoryId = parseInt(item);\r\n        }\r\n    }\r\n    \r\n    return { accessoryId: accessoryId, serviceId: serviceId };\r\n}\r\n\r\n/**\r\n * Отключает дополнительные устройства по их идентификаторам (глобальная версия)\r\n * \r\n * Поддерживаемые типы сервисов:\r\n * - Switch (Выключатель)\r\n * - Lightbulb (Лампочка)\r\n * - Outlet (Розетка)\r\n * - FanBasic (Вентилятор простой)\r\n * - AirPurifier (Очиститель воздуха)\r\n * - HeaterCooler (Нагреватель охладитель)\r\n * - HumidifierDehumidifier (Увлажнитель осушитель)\r\n * - Thermostat (Термостат)\r\n * - Door (Дверь)\r\n * - Faucet (Водопроводный кран)\r\n * - IrrigationSystem (Система полива)\r\n * - Valve (Кран)\r\n * - WindowCovering (Штора)\r\n * - Speaker (Динамик)\r\n * - Microphone (Микрофон)\r\n * - TelevisionSpeaker (Телевизионный динамик)\r\n * \r\n * @param {Array} additionalDevices - Массив идентификаторов устройств и сервисов\r\n */\r\nfunction turnOffAdditionalDevicesGlobal(additionalDevices) {\r\n    additionalDevices.forEach(function(deviceId) {\r\n        try {\r\n            if (deviceId.includes('.')) {\r\n                // Это конкретный сервис (аксессуар.сервис)\r\n                var parts = deviceId.split('.');\r\n                var accessoryId = parseInt(parts[0]);\r\n                var serviceId = parts[1];\r\n                \r\n                var accessory = Hub.getAccessory(accessoryId);\r\n                if (accessory) {\r\n                    var service = accessory.getService(serviceId);\r\n                    if (service) {\r\n                        turnOffServiceGlobal(service);\r\n                    } else if (turnOffLightDebug) {\r\n                        log.warn(\"Service not found: \" + serviceId + \" in accessory: \" + accessoryId);\r\n                    }\r\n                } else if (turnOffLightDebug) {\r\n                    log.warn(\"Accessory not found: \" + accessoryId);\r\n                }\r\n            } else {\r\n                // Это аксессуар целиком\r\n                var accessoryId = parseInt(deviceId);\r\n                var accessory = Hub.getAccessory(accessoryId);\r\n                if (accessory) {\r\n                    var services = accessory.getServices();\r\n                    services.forEach(function(service) {\r\n                        turnOffServiceGlobal(service);\r\n                    });\r\n                } else if (turnOffLightDebug) {\r\n                    log.warn(\"Accessory not found: \" + accessoryId);\r\n                }\r\n            }\r\n        } catch (e) {\r\n            if (turnOffLightDebug) {\r\n                log.error(\"Error processing device: \" + deviceId + \" Error: \" + e.message);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Отключает сервис, ища все характеристики для отключения (глобальная версия)\r\n * \r\n * Поддерживаемые характеристики и сервисы:\r\n * - HC.On (false) - Switch, Lightbulb, Outlet, FanBasic\r\n * - HC.Active (0) - AirPurifier, HeaterCooler, HumidifierDehumidifier, Door, Faucet, IrrigationSystem, Valve, WindowCovering\r\n * - HC.TargetHeatingCoolingState (0) - Thermostat\r\n * - HC.TargetHeaterCoolerState (0) - HeaterCooler\r\n * - HC.TargetAirPurifierState (0) - AirPurifier\r\n * - HC.TargetHumidifierDehumidifierState (0) - HumidifierDehumidifier\r\n * - HC.TargetDoorState (0) - Door\r\n * - HC.TargetPosition (0) - Door, Faucet, IrrigationSystem, Valve, WindowCovering\r\n * - HC.Mute (true) - Speaker, Microphone, TelevisionSpeaker\r\n * \r\n * @param {Service} service - Сервис для отключения\r\n */\r\nfunction turnOffServiceGlobal(service) {\r\n    var accessory = service.getAccessory();\r\n    \r\n    // Список характеристик для отключения с их значениями\r\n    var turnOffCharacteristics = [\r\n        { type: HC.On, value: false, name: \"On\" },\r\n        { type: HC.Active, value: 0, name: \"Active\" },\r\n        { type: HC.TargetHeatingCoolingState, value: 0, name: \"TargetHeatingCoolingState\" }, // Off\r\n        { type: HC.TargetHeaterCoolerState, value: 0, name: \"TargetHeaterCoolerState\" }, // Off\r\n        { type: HC.TargetAirPurifierState, value: 0, name: \"TargetAirPurifierState\" }, // Off\r\n        { type: HC.TargetHumidifierDehumidifierState, value: 0, name: \"TargetHumidifierDehumidifierState\" }, // Off\r\n        { type: HC.TargetDoorState, value: 0, name: \"TargetDoorState\" }, // Open\r\n        { type: HC.TargetPosition, value: 0, name: \"TargetPosition\" }, // 0%\r\n        { type: HC.Mute, value: true, name: \"Mute\" }, // Mute\r\n    ];\r\n\r\n    var turnedOffCount = 0;\r\n    \r\n    turnOffCharacteristics.forEach(function(charConfig) {\r\n        try {\r\n            var characteristic = service.getCharacteristic(charConfig.type);\r\n            if (characteristic) {\r\n                var currentValue = characteristic.getValue();\r\n                if (currentValue !== charConfig.value) {\r\n                    characteristic.setValue(charConfig.value);\r\n                    turnedOffCount++;\r\n                    \r\n                    if (turnOffLightDebug) {\r\n                        log.info(\"Turned off \" + charConfig.name + \" in \" + accessory.getName() + \" service \" + service.getName() + \" from \" + currentValue + \" to \" + charConfig.value);\r\n                    }\r\n                }\r\n            }\r\n        } catch (e) {\r\n            // Игнорируем ошибки для характеристик, которые не поддерживаются сервисом\r\n            if (turnOffLightDebug) {\r\n                log.debug(\"Characteristic \" + charConfig.name + \" not supported in service \" + service.getName());\r\n            }\r\n        }\r\n    });\r\n\r\n    if (turnOffLightDebug && turnedOffCount > 0) {\r\n        log.info(\"Turned off \" + turnedOffCount + \" characteristics in \" + accessory.getName() + \" service \" + service.getName());\r\n    }\r\n}\r\n\r\nfunction getArrayFromValue(value, type) {\r\n    var result = [];\r\n    if (Array.isArray(value)) {\r\n        result = value;\r\n    } else if (typeof value === type) {\r\n        result.push(value);\r\n    }\r\n    return result;\r\n}",
    "type": "GLOBAL"
  }
}