{
  "scenarioTemplate": {
    "name": "Выключить весь свет (Логический)",
    "desc": "Выключает все лампы, выключатели и розетки в доме при включении выключателя или нажатии кнопки.\n\nНастройки:\n- Исключить комнаты: названия комнат через запятую\n- Исключить устройства: ID устройств и сервисов через запятую (130, 188.15, \"200.5\")\n- Отключать скрытые: включить/выключить отключение скрытых устройств\n- Отключать розетки: включить/выключить отключение розеток (по умолчанию выключено)\n- Отладка: включить/выключить дополнительное логирование\n- Целевое устройство: выбрать конкретное устройство для отключения (необязательно)",
    "active": true,
    "onStart": false,
    "sync": false,
    "data": "// переменная с сервисами для выбора в опциях\r\nlet servicesList = getServicesByServiceAndCharacteristicType([HS.Switch, HS.Lightbulb, HS.Outlet], [HC.On]);\r\n\r\n/*\r\n * info - Обязательное поле, описывающее сценарий.\r\n * Считывается хабом в момент загрузки или сохранения сценария.\r\n * В коде обращаться к этому объекту запрещено, считать данные с него тоже не получится.\r\n * Необходимо использовать только значения, которые приходят в функции compute или trigger.\r\n */\r\ninfo = { \r\n  name: \"Выключить весь свет (Логический)\", // Название сценария\r\n  description: \"Выключает все лампы, выключатели и розетки в доме при включении выключателя или нажатии кнопки\", // Описание функционала сценария\r\n  version: \"1.0\", // Номер версии сценария\r\n  author: \"@asihminkirill\", // Автор сценария\r\n  onStart: false, // Не запускать при старте хаба\r\n  sourceServices: [HS.Switch, HS.StatelessProgrammableSwitch], // Список устройств, на изменение характеристик которых будет реагировать сценарий\r\n  sourceCharacteristics: [HC.On, HC.ProgrammableSwitchEvent], // Список характеристик, на изменение которых будет реагировать сценарий\r\n\r\n  // Опции для сценария. Отображаются в интерфейсе хаба в настройках логики для каждого устройства. \r\n  // У каждого устройства опции индивидуальные.\r\n  options: {\r\n    // Исключения комнат\r\n    excludeRoomsNames: { \r\n      type: \"String\", \r\n      value: \"Виртуальная\",\r\n      maxLength: 500,\r\n      name: { ru: \"Исключить комнаты\", en: \"Exclude rooms\" }, \r\n      desc: { ru: \"Названия комнат через запятую, где не надо выключать свет\", en: \"Room names separated by commas where lights should not be turned off\" } \r\n    },\r\n\r\n    // Исключения аксессуаров и сервисов\r\n    excludeAccessoriesId: { \r\n      type: \"String\", \r\n      value: \"130, 188\",\r\n      maxLength: 500,\r\n      name: { ru: \"Исключить устройства\", en: \"Exclude accessories\" }, \r\n      desc: { ru: \"ID устройств и сервисов через запятую (130, 188.15, \\\"200.5\\\")\", en: \"Device and service IDs separated by commas (130, 188.15, \\\"200.5\\\")\" } \r\n    },\r\n\r\n    // Отключать скрытые устройства\r\n    turnOffHidden: { \r\n      type: \"Boolean\", \r\n      value: false,\r\n      name: { ru: \"Отключать скрытые\", en: \"Turn off hidden\" }, \r\n      desc: { ru: \"Отключать скрытые устройства\", en: \"Turn off hidden devices\" } \r\n    },\r\n\r\n    // Отключать розетки\r\n    turnOffOutlets: { \r\n      type: \"Boolean\", \r\n      value: false,\r\n      name: { ru: \"Отключать розетки\", en: \"Turn off outlets\" }, \r\n      desc: { ru: \"Отключать розетки (по умолчанию выключено)\", en: \"Turn off outlets (disabled by default)\" } \r\n    },\r\n\r\n    // Отладка\r\n    turnOffLightDebug: { \r\n      type: \"Boolean\", \r\n      value: false,\r\n      name: { ru: \"Отладка\", en: \"Debug\" }, \r\n      desc: { ru: \"Активация дополнительного логгирования для отладки\", en: \"Enable additional logging for debugging\" } \r\n    },\r\n\r\n    // Выбор конкретного устройства для отключения\r\n    targetDevice: { \r\n      type: \"Integer\",\r\n      value: \"\",\r\n      values: servicesList,\r\n      name: { ru: \"Целевое устройство\", en: \"Target device\" }, \r\n      desc: { ru: \"Выберите конкретное устройство для отключения (необязательно)\", en: \"Select specific device to turn off (optional)\" } \r\n    }\r\n  },\r\n\r\n  variables: {\r\n    // Переменные для хранения состояния\r\n    lastTriggerTime: undefined,\r\n    triggerCount: 0\r\n  }\r\n}\r\n\r\n/**\r\n * Коллбек функция, которая вызывается при изменении характеристики, на которую подписан сценарий.\r\n * Вызывается после выполнения функции compute и фактической установки значения в хабе.\r\n * Работает ассинхронно.\r\n * Является главной функцией и точкой входа в сценарии.\r\n * @param {Characteristic} source - Характеристика, изменение значения которой вызвало вызов функции\r\n * @param {*} value - Новое значение характеристики\r\n * @param {Object} variables - Объект с переменными сценария из поля variables блока info. Значения доступны только в рамках этого сценария, можно писать и читать, сбрасываются при перезагрузке хаба.\r\n * @param {Object} options - Объект с опциями сценария из поля options блока info. Только для чтения.\r\n * @param {Object} context - Контекст изменения характеристики. Содержит информацию о том, что вызвало вызов функции\r\n */\r\nfunction trigger(source, value, variables, options, context) {\r\n  let service = source.getService(); // Получение сервиса, к которому привязана характеристика\r\n  let accessory = service.getAccessory(); // Получение аксессуара\r\n  let serviceType = service.getType(); // Получение типа сервиса\r\n  let characteristicType = source.getType(); // Получение типа характеристики\r\n\r\n  // Проверяем, что это включение выключателя или нажатие кнопки\r\n  let shouldTrigger = false;\r\n  \r\n  if (serviceType === HS.Switch && characteristicType === HC.On && value === true) {\r\n    shouldTrigger = true;\r\n  } else if (serviceType === HS.StatelessProgrammableSwitch && characteristicType === HC.ProgrammableSwitchEvent) {\r\n    shouldTrigger = true;\r\n  }\r\n\r\n  if (!shouldTrigger) {\r\n    return;\r\n  }\r\n\r\n  // Обновляем переменные\r\n  variables.lastTriggerTime = new Date().getTime();\r\n  variables.triggerCount++;\r\n\r\n  if (options.turnOffLightDebug) {\r\n    console.info(\"TurnOffAllLight Logic triggered by:\", accessory.getName(), \"Service:\", serviceType, \"Characteristic:\", characteristicType, \"Value:\", value);\r\n  }\r\n\r\n  // Выполняем отключение света\r\n  turnOffLightLogic(options, variables);\r\n}\r\n\r\n/**\r\n * Основная функция отключения света с логикой из глобального сценария\r\n * @param {Object} options - Опции сценария\r\n * @param {Object} variables - Переменные сценария\r\n */\r\nfunction turnOffLightLogic(options, variables) {\r\n  var excRooms = []\r\n  var excAccessories = []\r\n  var excServices = []\r\n\r\n  // Парсим исключения комнат\r\n  if (options.excludeRoomsNames && options.excludeRoomsNames.trim()) {\r\n    excRooms = options.excludeRoomsNames.split(',').map(function(room) { \r\n      return room.trim(); \r\n    });\r\n  }\r\n\r\n  // Парсим исключения аксессуаров и сервисов\r\n  if (options.excludeAccessoriesId && options.excludeAccessoriesId.trim()) {\r\n    var exclusions = parseExclusionsFromString(options.excludeAccessoriesId);\r\n    excAccessories = exclusions.excAccessories;\r\n    excServices = exclusions.excServices;\r\n  }\r\n\r\n  if (options.turnOffLightDebug) {\r\n    console.info(\"Exclude Rooms:\", excRooms.join(\"-\"));\r\n    console.info(\"Exclude Accessories:\", excAccessories.join(\"-\"));\r\n    console.info(\"Exclude Services:\", excServices.join(\"-\"));\r\n  }\r\n  \r\n  const rooms = Hub.getRooms().filter(function(room) { \r\n    return excRooms.indexOf(room.getName()) < 0; \r\n  });\r\n\r\n  rooms.forEach(function(room) {\r\n    var accessories = room.getAccessories().filter(function(accessory) { \r\n      return excAccessories.indexOf(parseInt(accessory.getUUID())) < 0; \r\n    });\r\n    \r\n    accessories.forEach(function(accessory) {\r\n      var status = accessory.getService(HS.AccessoryInformation).getCharacteristic(HC.C_Online).getValue();\r\n      if (accessory.getModelId() == \"Sprut.hub\" || status == false) return\r\n\r\n      accessory.getServices().forEach(function(service) {\r\n        var serviceType = service.getType();\r\n        var shouldProcess = false;\r\n        \r\n        // Проверяем тип сервиса\r\n        if (serviceType == HS.Switch || serviceType == HS.Lightbulb) {\r\n          shouldProcess = true;\r\n        } else if (serviceType == HS.Outlet && options.turnOffOutlets) {\r\n          shouldProcess = true;\r\n        }\r\n        \r\n        if (shouldProcess) {\r\n          // Проверяем, не исключен ли конкретный сервис\r\n          var serviceId = accessory.getUUID() + \".\" + service.getUUID();\r\n          if (excServices.indexOf(serviceId) >= 0) {\r\n            if (options.turnOffLightDebug) {\r\n              console.info(\"Service\", serviceId, \"is excluded\");\r\n            }\r\n            return;\r\n          }\r\n          \r\n          var on = service.getCharacteristic(HC.On)\r\n          if ((service.isVisible() || options.turnOffHidden) && on.getValue()) {\r\n            if (options.turnOffLightDebug) {\r\n              console.info(\"Room:\", room.getName(), \"Accessory:\", accessory.getName(), \"Service:\", serviceId, service.getName(), \"(Type:\", serviceType + \")\");\r\n            }\r\n            on.setValue(false)\r\n          }\r\n        }\r\n      })\r\n    })\r\n  })\r\n}\r\n\r\n/**\r\n * Парсит строку с идентификаторами исключений в различных форматах\r\n * Поддерживает:\r\n * - Целые числа: 130, 188\r\n * - Строки: \"130\", \"188\"\r\n * - Дробные числа: 130.13, \"130.13\" (аксессуар.сервис)\r\n * - Массивы: 130, \"188\", 200.15, \"300.20\"\r\n * @param {string} value - Строка для парсинга\r\n * @returns {Object} Объект с массивами excAccessories и excServices\r\n */\r\nfunction parseExclusionsFromString(value) {\r\n  var excAccessories = [];\r\n  var excServices = [];\r\n  \r\n  if (!value || !value.trim()) {\r\n    return { excAccessories: excAccessories, excServices: excServices };\r\n  }\r\n  \r\n  // Разделяем по запятым и очищаем от пробелов\r\n  var items = value.split(',').map(function(item) { \r\n    return item.trim(); \r\n  });\r\n  \r\n  items.forEach(function(item) {\r\n    var parsed = parseExclusionItem(item);\r\n    if (parsed.accessoryId !== null) {\r\n      excAccessories.push(parsed.accessoryId);\r\n    }\r\n    if (parsed.serviceId !== null) {\r\n      excServices.push(parsed.serviceId);\r\n    }\r\n  });\r\n  \r\n  return { excAccessories: excAccessories, excServices: excServices };\r\n}\r\n\r\n/**\r\n * Парсит отдельный элемент исключения\r\n * @param {string} item - Элемент для парсинга\r\n * @returns {Object} Объект с accessoryId и serviceId\r\n */\r\nfunction parseExclusionItem(item) {\r\n  var accessoryId = null;\r\n  var serviceId = null;\r\n  \r\n  // Убираем кавычки если есть\r\n  item = item.replace(/^[\"']|[\"']$/g, '');\r\n  \r\n  if (item.includes('.')) {\r\n    // Строка с точкой - аксессуар.сервис\r\n    var parts = item.split('.');\r\n    accessoryId = parseInt(parts[0]);\r\n    serviceId = parts[1] ? parts[1] : null;\r\n  } else {\r\n    // Строка без точки - только аксессуар\r\n    accessoryId = parseInt(item);\r\n  }\r\n  \r\n  return { accessoryId: accessoryId, serviceId: serviceId };\r\n}\r\n\r\n/**\r\n * Функция подготовки списка характеристик для выбора в настройке логики\r\n * @param {Array} serviceTypes - Список типов сервисов\r\n * @param {Array} characteristicTypes - Список типов характеристик\r\n * @returns {Array} Список сервисов с характеристиками\r\n */\r\nfunction getServicesByServiceAndCharacteristicType(serviceTypes, characteristicTypes) {\r\n  let sortedServicesList = []\r\n  let unsortedServicesList = []\r\n  Hub.getAccessories().forEach((a) => {\r\n      a.getServices().filter((s) => serviceTypes.indexOf(s.getType()) >= 0).forEach((s) => {\r\n          let characteristic = undefined\r\n          characteristicTypes.forEach(c => {\r\n              if (!characteristic) {\r\n                  let chr = s.getCharacteristic(c);\r\n                  if (chr) characteristic = chr\r\n              }\r\n          })\r\n          if (characteristic) {\r\n              let displayname = getDeviceName(s)\r\n              unsortedServicesList.push({\r\n                  name: { ru: displayname, en: displayname },\r\n                  value: s.getUUID()\r\n              });\r\n          }\r\n      })\r\n  });\r\n  sortedServicesList.push({ name: { ru: \"Не выбрано\", en: \"Not selected\" }, value: '' })\r\n  unsortedServicesList.sort((a, b) => a.name.ru.localeCompare(b.name.ru)).forEach((s) => sortedServicesList.push(s))\r\n  return sortedServicesList\r\n}\r\n\r\n/**\r\n * Получает отображаемое имя устройства\r\n * @param {Service} service - Сервис устройства\r\n * @returns {string} Отображаемое имя\r\n */\r\nfunction getDeviceName(service) {\r\n  let accessory = service.getAccessory();\r\n  let accessoryName = accessory.getName();\r\n  let serviceName = service.getName();\r\n  \r\n  if (serviceName && serviceName !== accessoryName) {\r\n    return accessoryName + \" - \" + serviceName;\r\n  }\r\n  \r\n  return accessoryName;\r\n}",
    "type": "LOGIC"
  }
}
