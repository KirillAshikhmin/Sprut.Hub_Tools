{
  "scenarioTemplate": {
    "name": "UnitTests",
    "desc": "",
    "active": true,
    "onStart": true,
    "sync": false,
    "data": "// Функции assert для unit-тестирования сценариев в Sprut.Hub\n\n/**\n * Функция для проверки наличия данного сценария\n */\nfunction hasUnitTests() { return true }\n\n/**\n * Проверяет, что выражение истинно\n * @param {any} expression Выражение для проверки\n * @param {string} [message] Опциональное сообщение об ошибке\n */\nfunction assert(expression, message) {\n  if (!expression) {\n    const msg = \"Ожидалось истинное значение, получено ложное\";\n    const errorMsg = message ? `${message}: ${msg}` : msg;\n    console.error(errorMsg);\n  }\n}\n\n/**\n * Проверяет, что значение равно null\n * @param {any} value Значение для проверки\n * @param {string} [message] Опциональное сообщение об ошибке\n */\nfunction assertNull(value, message) {\n  if (value !== null) {\n    const msg = `Ожидалось null, получено ${value}`;\n    const errorMsg = message ? `${message}: ${msg}` : msg;\n    console.error(errorMsg);\n  }\n}\n\n/**\n * Проверяет, что значение не равно null\n * @param {any} value Значение для проверки\n * @param {string} [message] Опциональное сообщение об ошибке\n */\nfunction assertNotNull(value, message) {\n  if (value === null) {\n    const msg = \"Ожидалось не-null значение, получено null\";\n    const errorMsg = message ? `${message}: ${msg}` : msg;\n    console.error(errorMsg);\n  }\n}\n\n/**\n * Проверяет, что значение равно ожидаемому\n * @param {any} actual Фактическое значение\n * @param {any} expected Ожидаемое значение\n * @param {string} [message] Опциональное сообщение об ошибке\n */\nfunction assertEquals(actual, expected, message) {\n  if (actual !== expected) {\n    const msg = `Ожидалось ${expected}, получено ${actual}`;\n    const errorMsg = message ? `${message}: ${msg}` : msg;\n    console.error(errorMsg);\n  }\n}\n\n/**\n * Проверяет, что значение не равно указанному\n * @param {any} actual Фактическое значение\n * @param {any} notExpected Неожидаемое значение\n * @param {string} [message] Опциональное сообщение об ошибке\n */\nfunction assertNotEquals(actual, notExpected, message) {\n  if (actual === notExpected) {\n    const msg = `Ожидалось значение, отличное от ${notExpected}, получено ${actual}`;\n    const errorMsg = message ? `${message}: ${msg}` : msg;\n    console.error(errorMsg);\n  }\n}\n\n/**\n * Проверяет, что значение истинно (true)\n * @param {any} value Значение для проверки\n * @param {string} [message] Опциональное сообщение об ошибке\n */\nfunction assertTrue(value, message) {\n  if (value !== true) {\n    const msg = `Ожидалось true, получено ${value}`;\n    const errorMsg = message ? `${message}: ${msg}` : msg;\n    console.error(errorMsg);\n  }\n}\n\n/**\n * Проверяет, что значение ложно (false)\n * @param {any} value Значение для проверки\n * @param {string} [message] Опциональное сообщение об ошибке\n */\nfunction assertFalse(value, message) {\n  if (value !== false) {\n    const msg = `Ожидалось false, получено ${value}`;\n    const errorMsg = message ? `${message}: ${msg}` : msg;\n    console.error(errorMsg);\n  }\n}\n\n/**\n * Проверяет, что значение определено (не undefined)\n * @param {any} value Значение для проверки\n * @param {string} [message] Опциональное сообщение об ошибке\n */\nfunction assertDefined(value, message) {\n  if (typeof value === \"undefined\") {\n    const msg = \"Ожидалось определённое значение, получено undefined\";\n    const errorMsg = message ? `${message}: ${msg}` : msg;\n    console.error(errorMsg);\n  }\n}\n\n/**\n * Проверяет, что массив содержит указанный элемент\n * @param {Array} array Массив для проверки\n * @param {any} element Элемент для поиска\n * @param {string} [message] Опциональное сообщение об ошибке\n */\nfunction assertContains(array, element, message) {\n  if (!Array.isArray(array) || array.indexOf(element) === -1) {\n    const msg = `Ожидалось, что массив содержит ${element}, получено ${JSON.stringify(array)}`;\n    const errorMsg = message ? `${message}: ${msg}` : msg;\n    console.error(errorMsg);\n  }\n}\n\n/**\n * Проверяет, что массив пустой\n * @param {Array} array Массив для проверки\n * @param {string} [message] Опциональное сообщение об ошибке\n */\nfunction assertEmpty(array, message) {\n  if (!Array.isArray(array) || array.length > 0) {\n    const msg = `Ожидался пустой массив, получено ${JSON.stringify(array)}`;\n    const errorMsg = message ? `${message}: ${msg}` : msg;\n    console.error(errorMsg);\n  }\n}\n\n/**\n * Проверяет, что массив не пустой\n * @param {Array} array Массив для проверки\n * @param {string} [message] Опциональное сообщение об ошибке\n */\nfunction assertNotEmpty(array, message) {\n  if (!Array.isArray(array) || array.length === 0) {\n    const msg = `Ожидался непустой массив, получено ${JSON.stringify(array)}`;\n    const errorMsg = message ? `${message}: ${msg}` : msg;\n    console.error(errorMsg);\n  }\n}\n\n/**\n * Проверяет, что в массиве есть указанное количество элементов\n * @param {Array} array Массив для проверки\n * @param {string} [message] Опциональное сообщение об ошибке\n */\nfunction assertLength(array, length, message) {\n  if (array.length != length) {\n    const msg = `Ожидалось ${length} элементов, получено ${array.length}`\n    const errorMsg = message ? `${message}: ${msg}` : msg;\n    console.error(errorMsg);\n  }\n}\n\n// #####################################################################################################\n\n/**\n * Создание Характеристики для использования в Unit тестах\n */\ncreateUnitTestCharacteristic = (function (type, id, name, charValue, service, accessory) {\n  let isStatusVisibleValue = true\n  let isNotifyValue = true\n\n  return {\n    getValue: getValue,\n    setValue: setValue,\n    toggle: toggle,\n    getType: getType,\n    getService: getService,\n    setService: setService,\n    getAccessory: getAccessory,\n    setAccessory: setAccessory,\n    getName: getName,\n    isStatusVisible: isStatusVisible,\n    setStatusVisible: setStatusVisible,\n    isNotify: isNotify,\n    setNotify: setNotify,\n    getUUID: getUUID,\n    getId: getId,\n    format: format,\n    getMinValue: getMinValue,\n    getMaxValue: getMaxValue,\n    getMinStep: getMinStep,\n    toString: toString\n  };\n\n  function getAccessory() { return accessory; }\n  function setAccessory(newAccessory) { accessory = newAccessory; }\n  function getService() { return service; }\n  function setService(newService) { service = newService }\n  function getName() { return name; }\n  function getType() { return type; }\n  function getValue() { return charValue; }\n  function setValue(value) { charValue = value; }\n  function toggle() { if (typeof charValue === \"boolean\") charValue = !charValue }\n  function isStatusVisible() { return isStatusVisibleValue }\n  function setStatusVisible(statusVisible) { isStatusVisibleValue = statusVisible }\n  function isNotify() { return isNotifyValue }\n  function setNotify(notify) { isNotifyValue = notify }\n  function format() { return `value: ${charValue}` }\n  function getMinValue() { return 0 }\n  function getMaxValue() { return 100 }\n  function getMinStep() { return 1 }\n  function getId() { return id }\n  function getUUID() { let serId = service ? service.getUUID() : \"\"; return `${serId}.${id}` }\n  function toString() { return `Service ${id} ${name}` }\n});\n\n\n/**\n * Создание Сервиса для использования в Unit тестах\n */\ncreateUnitTestService = (function (type, id, name, characteristics, accessory) {\n  let isVisibleValue = true\n  let chars = characteristics == undefined ? [] : characteristics\n\n  return {\n    getType: getType,\n    getAccessory: getAccessory,\n    setAccessory: setAccessory,\n    getName: getName,\n    setName: setName,\n    isVisible: isVisible,\n    setVisible: setVisible,\n    getId: getId,\n    getUUID: getUUID,\n    getCharacteristic: getCharacteristic,\n    getCharacteristics: getCharacteristics,\n    toString: toString\n  };\n\n  function getAccessory() { return accessory; }\n  function setAccessory(newAccessory) { accessory = newAccessory; chars.forEach(function (c) { c.setAccessory(newAccessory) }) }\n  function getName() { return name; }\n  function setName(newName) { name = newName }\n  function getType() { return type; }\n  function isVisible() { return isVisibleValue }\n  function setVisible(visible) { isVisibleValue = visible }\n  function getCharacteristic(value) { if (typeof value === \"number\") return getCharacteristicById(value); return getCharacteristicByType(value) }\n  function getCharacteristicById(charId) { let filtered = chars.filter(function (c) { return c.getId() == charId }); return filtered.length > 0 ? filtered[0] : null }\n  function getCharacteristicByType(hc) { let filtered = chars.filter(function (c) { return c.getType() == hc }); return filtered.length > 0 ? filtered[0] : null }\n  function getCharacteristics() { return chars }\n  function getId() { return id }\n  function getUUID() { let accId = accessory != undefined ? accessory.getUUID() : \"\"; return `${accId}.${id}` }\n  function toString() { return `Service ${id} ${name}` }\n});\n\n/**\n * Создание Аксессуара для использования в Unit тестах\n */\ncreateUnitTestAccessory = (function (id, name, room, services, model, modelId, manufacturer, manufacturerId, serial, firmware) {\n  let ser = services == undefined ? [] : services\n\n  return {\n    getName: getName,\n    setName: setName,\n    getRoom: getRoom,\n    setRoom: setRoom,\n    getId: getId,\n    getUUID: getUUID,\n    getCharacteristic: getCharacteristic,\n    getService: getService,\n    getServices: getServices,\n    toString: toString,\n    getModel: getModel,\n    getModelId: getModelId,\n    getManufacturer: getManufacturer,\n    getManufacturerId: getManufacturerId,\n    getSerial: getSerial,\n    getFirmware: getFirmware,\n    getSnapshot: getSnapshot,\n    toString: toString\n  };\n\n  function getName() { return name; }\n  function setName(newName) { name = newName }\n  function getRoom() { return room; }\n  function setRoom(newRoom) { room = newRoom }\n  function getService(value, value2) { let criteria = (typeof value2 == \"undefined\") ? value : value2; let visible = (typeof value2 == \"undefined\") ? undefined : value; if (typeof value === \"number\") return getServiceById(criteria, visible); return getServiceByType(criteria, visible); }\n  function getServiceById(serId, visible) { let filtered = ser.filter(function (s) { return s.getId() == serId }); filtered = (typeof visible == \"undefined\") ? filtered : filtered.filter(function (s) { return s.isVisible() == visible }); return filtered.length > 0 ? filtered[0] : null }\n  function getServiceByType(hs, visible) { let filtered = ser.filter(function (s) { return s.getType() == hs }); filtered = (typeof visible == \"undefined\") ? filtered : filtered.filter(function (s) { return s.isVisible() == visible }); return filtered.length > 0 ? filtered[0] : null }\n  function getServices(visible) { return (typeof visible == \"undefined\") ? ser : ser.filter(function (s) { return s.isVisible() == visible }) }\n  function getCharacteristic(charId) { let filtered = ser.filter(function (s) { return s.getCharacteristic(charId) != null }); return filtered.length > 0 ? filtered[0] : null }\n  function getId() { return id }\n  function getUUID() { return `${id}` }\n  function getModel() { return model; }\n  function getModelId() { return modelId; }\n  function getManufacturer() { return manufacturer; }\n  function getManufacturerId() { return manufacturerId; }\n  function getSerial() { return serial; }\n  function getFirmware() { return firmware; }\n  function getName() { return name; }\n  function getSnapshot() { return null }\n  function toString() { return `Accessory ${id} ${name}` }\n});\n\n/**\n * Создание Комнаты для использования в Unit тестах\n */\ncreateUnitTestRoom = (function (name, accessories) {\n  let accs = accessories == undefined ? [] : accessories\n  return {\n    getAccessories: getAccessories,\n    setAccessories: setAccessories,\n    getName: getName,\n    setName: setName,\n  };\n\n  function getAccessories() { return accs; }\n  function setAccessories(newAccessories) { accs = newAccessories }\n  function getName() { return name; }\n  function setName(newName) { name = newName }\n});\n\n\n/**\n * Создание Аксессуара с комнатой, сервисами и характеристиками по описанной модели для использования в Unit тестах\n */\nfunction createUnitTestFullAccessory(toCreate) {\n  let sId = 13\n  let room = createUnitTestRoom(toCreate.room)\n  let services = toCreate.services.map(function (s) {\n    let serviceId = sId\n    let characteristicId = sId + 1\n    let characteristics = s.characteristics.map(function (c) {\n      let char = createUnitTestCharacteristic(c.type, c.id ? c.id : characteristicId, (c.name != undefined) ? c.name : c.type.toString(), c.value)\n      characteristicId = characteristicId + 1\n      return char\n    })\n\n    let service = createUnitTestService(s.type, s.id ? s.id : serviceId, (s.name != undefined) ? s.name : s.type.toString(), characteristics)\n    characteristics.forEach(function (c) { c.setService(service) })\n    sId = characteristicId\n    return service\n  })\n  let accessory = createUnitTestAccessory(toCreate.id, toCreate.name, room, services, toCreate.model, toCreate.modelId, toCreate.manufacturer, toCreate.manufacturerId, toCreate.serial, toCreate.firmware)\n  services.forEach(function (s) { s.setAccessory(accessory); s.getCharacteristics().forEach(function (c) { c.setAccessory(accessory) }) })\n  room.setAccessories([accessory])\n  return accessory\n}\n\n/**\n * Пример создания объекта для функции createUnitTestFullAccessory\n * Использование: \n * let accessory = createUnitTestFullAccessory(lampAcc)\n */\n/*\nlet lampAcc = {\n  id: 1,\n  name: \"Лампочка\",\n  room: \"Тест\",\n  model: \"\", // Не обзательно\n  modelId: \"\", // Не обзательно\n  manufacturer: \"\", // Не обзательно\n  manufacturerId: \"\", // Не обзательно\n  serial: \"\", // Не обзательно\n  firmware: \"\", // Не обзательно\n  services: [\n    {\n      id: 100, // Id не обязателен указывать для сервисов и характеристик (подставляется автоматически сгенерированное значение)\n      type: HS.Lightbulb,\n      name: \"Лампочка\", // Имя не обязательно указывать для сервисов и характеристик (в имя подставляется тип сервиса)\n      characteristics: [\n        {\n          id: 101,\n          type: HC.On,\n          value: true\n        },\n        {\n          id: 102,\n          type: HC.Brightness,\n          name: \"Яркость\",\n          value: 100\n        },\n        {\n          id: 103,\n          type: HC.ColorTemperature,\n          name: \"Температура\",\n          value: 400\n        }\n      ]\n    }\n  ]\n}\n*/\n\n\n/**\n * Примеры использования для тестирования\n * Просто скопируйте эту функцию в свой сценарий и укажите свои assert проверки\n * А после неё добавьте ee вызов, что бы проверка выполнялась при каждом сохранении сценария:\n * runTests();\n * \n * Тесты можно не удалять при публикации, если у пользователя сценария нет, они не запустятся.\n */\nfunction runTests() {\n  if (global.hasUnitTests) {\n    // Перед публикацией сценария лучше убрать строчку с выводом предупреждения что бы у пользователей не появлялся этот варнинг,\n    // если у них не устанолён этот сценарий unit тестов (но он им и не нужен). \n    console.warn(\"Сценарий Unit тестирования не установлен\")\n    return\n  }\n\n  // Для удобства, что бы не указывать везде \"global.\"\n  let assert = global.assert; let assertNull = global.assertNull; let assertNotNull = global.assertNotNull; let assertEquals = global.assertEquals; let assertNotEquals = global.assertNotEquals; let assertTrue = global.assertTrue; let assertFalse = global.assertFalse; let assertDefined = global.assertDefined; let assertContains = global.assertContains; let assertEmpty = global.assertEmpty; let assertNotEmpty = global.assertNotEmpty; let assertLength = global.assertLength;\n\n  // Тесты писать ниже. Всё что выше - копируйте себе в сценарий.\n\n  // Тесты для assert\n  assert(1 + 1 === 2, \"Проверка суммы\");\n  assert(1 + 1 === 3, \"Проверка неверной суммы\");\n\n  // Тесты для assertNull и assertNotNull\n  assertNull(null, \"Проверка null\");\n  assertNull(\"text\", \"Проверка не-null значения\");\n  assertNotNull(\"text\", \"Проверка не-null значения\");\n  assertNotNull(null, \"Проверка null\");\n\n  // Тесты для assertEquals и assertNotEquals\n  assertEquals(5, 5, \"Проверка равенства чисел\");\n  assertEquals(5, 6, \"Проверка неравенства чисел\");\n  assertNotEquals(5, 6, \"Проверка неравенства чисел\");\n  assertNotEquals(5, 5, \"Проверка равенства чисел\");\n\n  // Тесты для assertTrue и assertFalse\n  assertTrue(true, \"Проверка истинности\");\n  assertTrue(false, \"Проверка ложности\");\n  assertFalse(false, \"Проверка ложности\");\n  assertFalse(true, \"Проверка истинности\");\n\n  // Тесты для assertDefined\n  assertDefined(42, \"Проверка определённого значения\");\n  assertDefined(undefined, \"Проверка undefined\");\n\n  // Тесты для assertContains, assertEmpty и assertNotEmpty\n  assertContains([1, 2, 3], 2, \"Проверка наличия элемента\");\n  assertContains([1, 2, 3], 4, \"Проверка отсутствия элемента\");\n  assertEmpty([], \"Проверка пустого массива\");\n  assertEmpty([1, 2], \"Проверка непустого массива\");\n  assertNotEmpty([1, 2], \"Проверка непустого массива\");\n  assertNotEmpty([], \"Проверка пустого массива\");\n  assertLength([1, 2], 2, \"Проверка наличия 2 элементов\");\n  assertLength([], \"Проверка наличия 2 элементов\");\n}\n",
    "type": "GLOBAL"
  }
}