{
  "scenarioTemplate": {
    "name": "💧 Виртуальный гигростат",
    "desc": "Позволяет реализовать логику виртуального увлажнителя осушителя (гигростата), указав датчик влажности и реле для увлажения или осушения",
    "active": true,
    "onStart": true,
    "sync": false,
    "data": "let servicesList = getServicesByServiceAndCharacteristicType([HS.Switch, HS.Outlet, HS.HumidifierDehumidifier], [HC.On, HC.Active]);\nlet sensorsServicesList = getServicesByServiceAndCharacteristicType([HS.HumiditySensor, HS.HumidifierDehumidifier], [HC.CurrentRelativeHumidity]);\n\ninfo = {\n    name: \"💧 Виртуальный гигростат\",\n    description: \"Позволяет реализовать логику виртуального увлажнителя осушителя (гигростата), указав датчик влажности и реле для увлажения или осушения\",\n    version: \"1.0\",\n    author: \"@BOOMikru\",\n    onStart: true,\n\n    sourceServices: [HS.HumidifierDehumidifier],\n    sourceCharacteristics: [HC.CurrentHumidifierDehumidifierState, HC.TargetHumidifierDehumidifierState],\n\n    options: {\n        sensor: {\n            name: {\n                en: \"Hudimity sensor\",\n                ru: \"Датчик влажности\"\n            },\n            type: \"String\",\n            value: \"\",\n            formType: \"list\",\n            values: sensorsServicesList\n        },\n        heatingRelay: {\n            name: {\n                en: \"Humidification relay\",\n                ru: \"Реле увлажнения\"\n            },\n            type: \"String\",\n            value: \"\",\n            formType: \"list\",\n            values: servicesList\n        },\n        coolingRelay: {\n            name: {\n                en: \"Drying relay\",\n                ru: \"Реле осушения\"\n            },\n            type: \"String\",\n            value: \"\",\n            formType: \"list\",\n            values: servicesList\n        }\n    }\n};\n\n// Вывод в лог информационные сообщения о работе сценария\nlet debug = false\n\nfunction trigger(source, value, variables, options) {\n    try {\n        const tempSensor = getDevice(options, \"sensor\")\n        const heatingRelay = getDevice(options, \"heatingRelay\")\n        const coolingRelay = getDevice(options, \"coolingRelay\")\n\n        const currentState = source.getService().getCharacteristic(HC.CurrentHumidifierDehumidifierState).getValue()\n        const targetState = source.getService().getCharacteristic(HC.TargetHumidifierDehumidifierState).getValue()\n\n        // Выключено\n        if (targetState == 0 || currentState == 0 || currentState == 1) {\n            setDeviceValue(heatingRelay, false)\n            setDeviceValue(coolingRelay, false)\n        }\n        // Увлажнение\n        if ((targetState == 1 || targetState == 0) && currentState == 2) {\n            setDeviceValue(heatingRelay, true)\n            setDeviceValue(coolingRelay, false)\n        }\n        // Осушение\n        if ((targetState == 2 || targetState == 0) && currentState == 3) {\n            setDeviceValue(heatingRelay, false)\n            setDeviceValue(coolingRelay, true)\n        }\n\n        if (tempSensor) {\n\n            let acc = source.getAccessory()\n            let currentHudimity = source.getService().getCharacteristic(HC.CurrentRelativeHumidity)\n\n            setValueFromSensor(source, variables, options, currentHudimity)\n\n            if (!variables.subscribe || variables.subscribed != true) {\n                showSubscribeMessage(options.sensor)\n                let subscribe = Hub.subscribeWithCondition(\"\", \"\", [HS.HumiditySensor, HS.HumidifierDehumidifier], [HC.CurrentRelativeHumidity], function (sensorSource, sensorValue) {\n                    let service = sensorSource.getService()\n                    let isSelected = service.getUUID() == options.sensor\n                    if (isSelected && currentHudimity) {\n                        currentHudimity.setValue(sensorValue)\n                        if (variables.lastTemp != sensorValue) {\n                            logInfo(`Значение на гигростат установлено: ${sensorValue}%`, source, debug)\n                            variables.lastUpdateTime = Date.now();\n                            variables.lastTemp = sensorValue\n                        }\n                    }\n                }, acc)\n                variables.subscribe = subscribe\n                variables.subscribed = true\n            }\n            if (!variables.midnightTask) {\n                variables.midnightTask = Cron.schedule(\"0 0 0 * * *\", function () {\n                    setValueFromSensor(source, variables, options, currentHudimity)\n                    logInfo(\"Полуночное обновление\", source, debug)\n                });\n            }\n        }\n\n    } catch (e) {\n        logError(\"Ошибка выполнения задачи: \" + e.message);\n    }\n}\n\nfunction setValueFromSensor(source, variables, options, targetTemperature) {\n    try {\n        let sensorService = getDevice(options, \"sensor\")\n        if (sensorService) {\n\n            let sensorAccessory = sensorService.getAccessory()\n            const status = sensorAccessory.getService(HS.AccessoryInformation).getCharacteristic(HC.C_Online).getValue() == true;\n            if (!status) {\n                logWarn(`Датчик ${getDeviceName(sensorService)} не в сети`, source)\n            }\n            let sensorValue = sensorService.getCharacteristic(HC.CurrentRelativeHumidity).getValue()\n            targetTemperature.setValue(sensorValue)\n            if (variables.lastTemp != sensorValue) {\n                logInfo(`Значение на гигростат установлено: ${sensorValue}%`, source, debug)\n                variables.lastTemp = sensorValue\n                variables.lastUpdateTime = Date.now();\n            }\n\n        } else {\n            logError(`Не найден датчик для гигростата. ID: ${options.sensor}`, source)\n            return\n        }\n\n        const currentTime = Date.now();\n        if (variables.lastUpdateTime && (currentTime - variables.lastUpdateTime > oneDayMs)) {\n            logError(`Нет показаний от датчика влажности (${getDeviceName(sensorService)}) в течении суток или более`, source);\n            return;\n        }\n    } catch (e) {\n        logError(`Не удалось получить влажность с датчика ${options.sensor}: ${e.toString()}`, source)\n    }\n}\n\nfunction setDeviceValue(service, value, invert) {\n    if (!service) return\n    if (invert) value = !value;\n    let on = service.getCharacteristic(HC.On)\n    let active = service.getCharacteristic(HC.Active)\n    if (on) {\n        on.setValue(value);\n        return\n    }\n    if (active) {\n        let newValue = value ? 1 : 0\n        active.setValue(newValue);\n        return\n    }\n}\n\nfunction showSubscribeMessage(sensor) {\n    const cdata = sensor.split('.');\n    const aid = cdata[0];\n    const sid = cdata[1];\n    const acc = Hub.getAccessory(aid)\n    const service = acc.getService(sid)\n    const accName = service.getAccessory().getName()\n    const sName = service.getName()\n\n    console.message(`Подключен датчик: ${(accName == sName ? accName : accName + \" \" + sName)}`)\n}\n\nfunction getDevice(options, name) {\n    if (options[name] === '') { return undefined; }\n    var service\n    if (options[name] != '') {\n        const cdata = options[name].split('.');\n        const aid = cdata[0];\n        const sid = cdata[1];\n        const acc = Hub.getAccessory(aid);\n        if (!acc) {\n            logError(\"Выбранное устройство не найдено {}\", options[name]);\n            return undefined;\n        }\n        service = acc.getService(sid)\n        if (!service) {\n            logError(\"Выбранное устройство не найдено {}\", options[name]);\n            return undefined;\n        } else {\n            return service\n        }\n    }\n    return undefined\n}\n\nfunction logInfo(text, source, show) {\n    if (show) console.info(getLogText(text, source));\n}\nfunction logWarn(text, source) {\n    console.warn(getLogText(text, source));\n}\nfunction logError(text, source) {\n    console.error(getLogText(text, source));\n}\nfunction getLogText(text, source) {\n    return `${text} | ${DEBUG_TITLE} ${getDeviceName(source.getService())}`\n}\n\nfunction getDeviceName(service) {\n    const acc = service.getAccessory();\n    const room = acc.getRoom().getName()\n    const accName = service.getAccessory().getName()\n    const sName = service.getName()\n    const name = room + \" -> \" + (accName == sName ? accName : accName + \" \" + sName) + \" (\" + service.getUUID() + \")\" + (!service.isVisible() ? \". Скрыт\" : \"\")\n    return name\n}\n\n// подготовка списка характеристик для выбора в настройке логики\nfunction getServicesByServiceAndCharacteristicType(serviceTypes, characteristicTypes) {\n    let sortedServicesList = []\n    let unsortedServicesList = []\n    Hub.getAccessories().forEach((a) => {\n        a.getServices().filter((s) => serviceTypes.indexOf(s.getType()) >= 0).forEach((s) => {\n            let characteristic = undefined\n            characteristicTypes.forEach(c => {\n                if (!characteristic) {\n                    let chr = s.getCharacteristic(c);\n                    if (chr) characteristic = chr\n                }\n            })\n            if (characteristic) {\n                let displayname = getDeviceName(s)\n                //console.info(\"Service: {}\", displayname);\n                unsortedServicesList.push({\n                    name: { ru: displayname, en: displayname },\n                    value: s.getUUID()\n                });\n            }\n        })\n    });\n    sortedServicesList.push({ name: { ru: \"Не выбрано\", en: \"Not selected\", en: \"\" }, value: '' })\n    unsortedServicesList.sort((a, b) => a.name.ru.localeCompare(b.name.ru)).forEach((s) => sortedServicesList.push(s))\n    return sortedServicesList\n}\n\n// Сутки\nconst oneDayMs = 23 * 59 * 60 * 1000\n// Константа для отладки\nconst DEBUG_TITLE = \"Виртуальный гигростат: \";\n",
    "type": "LOGIC"
  }
}
