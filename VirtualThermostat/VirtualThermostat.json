{
  "scenarioTemplate": {
    "name": "üå°Ô∏è –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ç–µ—Ä–º–æ—Å—Ç–∞—Ç",
    "desc": "–ü–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Ä–º–æ—Å—Ç–∞—Ç–∞, —É–∫–∞–∑–∞–≤ –¥–∞—Ç—á–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏ —Ä–µ–ª–µ –¥–ª—è –Ω–∞–≥—Ä–µ–≤–∞ –∏–ª–∏ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è",
    "active": true,
    "onStart": true,
    "sync": false,
    "data": "let servicesList = getServicesByServiceAndCharacteristicType([HS.Switch, HS.Outlet], HC.On);\nlet sensorsServicesList = getServicesByServiceAndCharacteristicType([HS.TemperatureSensor, HS.Thermostat], HC.CurrentTemperature);\n\ninfo = {\n    name: \"üå°Ô∏è –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ç–µ—Ä–º–æ—Å—Ç–∞—Ç\",\n    description: \"–ü–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Ä–º–æ—Å—Ç–∞—Ç–∞, —É–∫–∞–∑–∞–≤ –¥–∞—Ç—á–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏ —Ä–µ–ª–µ –¥–ª—è –Ω–∞–≥—Ä–µ–≤–∞ –∏–ª–∏ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è\",\n    version: \"2.0\",\n    author: \"@BOOMikru\",\n    onStart: true,\n\n    sourceServices: [HS.Thermostat],\n    sourceCharacteristics: [HC.CurrentHeatingCoolingState, HC.TargetHeatingCoolingState],\n\n    options: {\n        sensor: {\n            name: {\n                en: \"Temperature sensor\",\n                ru: \"–î–∞—Ç—á–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã\"\n            },\n            type: \"String\",\n            value: \"\",\n            formType: \"list\",\n            values: sensorsServicesList\n        },\n        heatingRelay: {\n            name: {\n                en: \"Heating relay\",\n                ru: \"–†–µ–ª–µ –Ω–∞–≥—Ä–µ–≤–∞\"\n            },\n            type: \"String\",\n            value: \"\",\n            formType: \"list\",\n            values: servicesList\n        },\n        coolingRelay: {\n            name: {\n                en: \"Cooling relay\",\n                ru: \"–†–µ–ª–µ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è\"\n            },\n            type: \"String\",\n            value: \"\",\n            formType: \"list\",\n            values: servicesList\n        }\n    }\n};\n\n// –í—ã–≤–æ–¥ –≤ –ª–æ–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–∞–±–æ—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏—è\nlet debug = false\n\nfunction trigger(source, value, variables, options) {\n    try {\n        const tempSensor = getDevice(options, \"sensor\")\n        const heatingRelay = getDevice(options, \"heatingRelay\")\n        const coolingRelay = getDevice(options, \"coolingRelay\")\n\n        const currentState = source.getService().getCharacteristic(HC.CurrentHeatingCoolingState).getValue()\n        const targetState = source.getService().getCharacteristic(HC.TargetHeatingCoolingState).getValue()\n\n        //–í—ã–∫–ª—é—á–µ–Ω–æ\n        if (targetState == 0 || currentState == 0) {\n            if (heatingRelay) heatingRelay.getCharacteristic(HC.On).setValue(false)\n            if (coolingRelay) coolingRelay.getCharacteristic(HC.On).setValue(false)\n        }\n        // –ù–∞–≥—Ä–µ–≤\n        if ((targetState == 1 || targetState == 3) && currentState == 1) {\n            if (heatingRelay) heatingRelay.getCharacteristic(HC.On).setValue(true)\n            if (coolingRelay) coolingRelay.getCharacteristic(HC.On).setValue(false)\n        }\n        // –û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ\n        if ((targetState == 2 || targetState == 3) && currentState == 2) {\n            if (heatingRelay) heatingRelay.getCharacteristic(HC.On).setValue(false)\n            if (coolingRelay) coolingRelay.getCharacteristic(HC.On).setValue(true)\n        }\n\n        if (tempSensor) {\n\n            let acc = source.getAccessory()\n            let currentTemperature = source.getService().getCharacteristic(HC.CurrentTemperature)\n\n            setValueFromSensor(source, variables, options, currentTemperature)\n\n            if (!variables.subscribe || variables.subscribed != true) {\n                showSubscribeMessage(options.sensor)\n                let subscribe = Hub.subscribeWithCondition(\"\", \"\", [HS.TemperatureSensor], [HC.CurrentTemperature], function (sensorSource, sensorValue) {\n                    let service = sensorSource.getService()\n                    let isSelected = service.getUUID() == options.sensor\n                    if (isSelected && currentTemperature) {\n                        currentTemperature.setValue(sensorValue)\n                        if (variables.lastTemp != sensorValue) {\n                            logInfo(`–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ —Ç–µ—Ä–º–æ—Å—Ç–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${sensorValue}¬∞C`, source, debug)\n                            variables.lastUpdateTime = Date.now();\n                            variables.lastTemp = sensorValue\n                        }\n                    }\n                }, acc)\n                variables.subscribe = subscribe\n                variables.subscribed = true\n            }\n            if (!variables.midnightTask) {\n                variables.midnightTask = Cron.schedule(\"0 0 0 * * *\", function () {\n                    setValueFromSensor(source, variables, options, currentTemperature)\n                    logInfo(\"–ü–æ–ª—É–Ω–æ—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ\", source, debug)\n                });\n            }\n        }\n\n    } catch (e) {\n        logError(\"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: \" + e.message);\n    }\n}\n\nfunction setValueFromSensor(source, variables, options, targetTemperature) {\n    try {\n        let sensorService = getDevice(options, \"sensor\")\n        if (sensorService) {\n\n            let sensorAccessory = sensorService.getAccessory()\n            const status = sensorAccessory.getService(HS.AccessoryInformation).getCharacteristic(HC.C_Online).getValue() == true;\n            if (!status) {\n                logWarn(`–î–∞—Ç—á–∏–∫ ${getDeviceName(sensorService)} –Ω–µ –≤ —Å–µ—Ç–∏`, source)\n            }\n            let sensorValue = sensorService.getCharacteristic(HC.CurrentTemperature).getValue()\n            targetTemperature.setValue(sensorValue)\n            if (variables.lastTemp != sensorValue) {\n                logInfo(`–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ —Ç–µ—Ä–º–æ—Å—Ç–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${sensorValue}¬∞C`, source, debug)\n                variables.lastTemp = sensorValue\n                variables.lastUpdateTime = Date.now();\n            }\n\n        } else {\n            logError(`–ù–µ –Ω–∞–π–¥–µ–Ω –≤–Ω–µ—à–Ω–∏–π –¥–∞—Ç—á–∏–∫ –¥–ª—è —Ç–µ—Ä–º–æ—Å—Ç–∞—Ç–∞. ID: ${options.sensor}`, source)\n            return\n        }\n\n        const currentTime = Date.now();\n        if (variables.lastUpdateTime && (currentTime - variables.lastUpdateTime > oneDayMs)) {\n            logError(`–ù–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∏–π –æ—Ç –¥–∞—Ç—á–∏–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (${getDeviceName(sensorService)}) –≤ —Ç–µ—á–µ–Ω–∏–∏ —Å—É—Ç–æ–∫ –∏–ª–∏ –±–æ–ª–µ–µ`, source);\n            return;\n        }\n    } catch (e) {\n        logError(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —Å –¥–∞—Ç—á–∏–∫–∞ ${options.sensor}: ${e.toString()}`, source)\n    }\n}\n\nfunction showSubscribeMessage(sensor) {\n    const cdata = sensor.split('.');\n    const aid = cdata[0];\n    const sid = cdata[1];\n    const acc = Hub.getAccessory(aid)\n    const service = acc.getService(sid)\n    const accName = service.getAccessory().getName()\n    const sName = service.getName()\n\n    console.message(`–ü–æ–¥–∫–ª—é—á–µ–Ω –¥–∞—Ç—á–∏–∫: ${(accName == sName ? accName : accName + \" \" + sName)}`)\n}\n\nfunction getDevice(options, name) {\n    if (options[name] === '') { return undefined; }\n    var service\n    if (options[name] != '') {\n        const cdata = options[name].split('.');\n        const aid = cdata[0];\n        const sid = cdata[1];\n        service = Hub.getAccessory(aid).getService(sid)\n        if (service == null) {\n            logError(\"–í—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ {}\", options[name]);\n            return undefined;\n        } else {\n            return service\n        }\n    }\n    return undefined\n}\n\nfunction logInfo(text, source, show) {\n    if (show) console.info(getLogText(text, source));\n}\nfunction logWarn(text, source) {\n    console.warn(getLogText(text, source));\n}\nfunction logError(text, source) {\n    console.error(getLogText(text, source));\n}\nfunction getLogText(text, source) {\n    return `${text} | ${DEBUG_TITLE} ${getDeviceName(source.getService())}`\n}\n\nfunction getDeviceName(service) {\n    const acc = service.getAccessory();\n    const room = acc.getRoom().getName()\n    const accName = service.getAccessory().getName()\n    const sName = service.getName()\n    const name = room + \" -> \" + (accName == sName ? accName : accName + \" \" + sName) + \" (\" + service.getUUID() + \")\" + (!service.isVisible() ? \". –°–∫—Ä—ã—Ç\" : \"\")\n    return name\n}\n\n// –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ª–æ–≥–∏–∫–∏\nfunction getServicesByServiceAndCharacteristicType(serviceTypes, characteristicType) {\n    let sortedServicesList = []\n    let unsortedServicesList = []\n    Hub.getAccessories().forEach((a) => {\n        a.getServices().filter((s) => serviceTypes.indexOf(s.getType()) >= 0).forEach((s) => {\n            const c = s.getCharacteristic(characteristicType);\n            if (c) {\n                let displayname = getDeviceName(s)\n                //console.info(\"Service: {}\", displayname);\n                unsortedServicesList.push({\n                    name: { ru: displayname, en: displayname },\n                    value: s.getUUID()\n                });\n            }\n        })\n    });\n    sortedServicesList.push({ name: { ru: \"–ù–µ –≤—ã–±—Ä–∞–Ω–æ\", en: \"Not selected\", en: \"\" }, value: '' })\n    unsortedServicesList.sort((a, b) => a.name.ru.localeCompare(b.name.ru)).forEach((s) => sortedServicesList.push(s))\n    return sortedServicesList\n}\n\n// –°—É—Ç–∫–∏\nconst oneDayMs = 23 * 59 * 60 * 1000\n// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏\nconst DEBUG_TITLE = \"–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ç–µ—Ä–º–æ—Å—Ç–∞—Ç: \";\n",
    "type": "LOGIC"
  }
}
