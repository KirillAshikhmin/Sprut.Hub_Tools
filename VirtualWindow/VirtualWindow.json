{
  "scenarioTemplate": {
    "name": "ü™ü –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ/—à—Ç–æ—Ä–∞",
    "desc": "–ü–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∫–Ω–æ–º –∏–ª–∏ —à—Ç–æ—Ä–æ–π —Å –¥–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –º–æ—Ç–æ—Ä–æ–º, –∏—Å–ø–æ–ª—å–∑—É—è –¥–≤–∞ —Ä–µ–ª–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –∑–∞–∫—Ä—ã—Ç–∏—è",
    "active": true,
    "onStart": true,
    "sync": false,
    "data": "let servicesList = getServicesByServiceAndCharacteristicType([HS.Switch, HS.Outlet], HC.On);\n\ninfo = {\n    name: \"ü™ü –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ/—à—Ç–æ—Ä–∞\",\n    description: \"–ü–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∫–Ω–æ–º –∏–ª–∏ —à—Ç–æ—Ä–æ–π —Å –¥–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –º–æ—Ç–æ—Ä–æ–º, –∏—Å–ø–æ–ª—å–∑—É—è –¥–≤–∞ —Ä–µ–ª–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –∑–∞–∫—Ä—ã—Ç–∏—è\",\n    version: \"1.0\",\n    author: \"@BOOMikru\",\n    onStart: true,\n\n    sourceServices: [HS.Window, HS.WindowCovering],\n    sourceCharacteristics: [HC.PositionState],\n\n    options: {\n        openRelay: {\n            name: {\n                en: \"Open relay\",\n                ru: \"–†–µ–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è\"\n            },\n            type: \"String\",\n            value: \"\",\n            formType: \"list\",\n            values: servicesList\n        },\n        closeRelay: {\n            name: {\n                en: \"Close relay\",\n                ru: \"–†–µ–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è\"\n            },\n            type: \"String\",\n            value: \"\",\n            formType: \"list\",\n            values: servicesList\n        },\n        delayMs: {\n            name: {\n                en: \"Delay between switching (ms)\",\n                ru: \"–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è–º–∏ (–º—Å)\"\n            },\n            type: \"Integer\",\n            value: 100,\n            minValue: 0,\n            maxValue: 1000,\n            step: 10,\n            desc: {\n                en: \"Delay between turning off one relay and turning on another. If your relay has interlock protection, you can set 0\",\n                ru: \"–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≤—ã–∫–ª—é—á–µ–Ω–∏–µ–º –æ–¥–Ω–æ–≥–æ —Ä–µ–ª–µ –∏ –≤–∫–ª—é—á–µ–Ω–∏–µ–º –¥—Ä—É–≥–æ–≥–æ. –ï—Å–ª–∏ —É –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ —Ä–µ–ª–µ –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–ª–æ–∫, —Ç–æ –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å 0\"\n            }\n        }\n    }\n};\n\n// –í—ã–≤–æ–¥ –≤ –ª–æ–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–∞–±–æ—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏—è\nlet debug = false\n\nfunction trigger(source, value, variables, options) {\n    try {\n        const openRelay = getDevice(options, \"openRelay\")\n        const closeRelay = getDevice(options, \"closeRelay\")\n        const delayMs = options.delayMs || 100\n\n        if (!openRelay && !closeRelay) {\n            logError(\"–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ–ª–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\", source)\n            return\n        }\n\n        const positionState = source.getValue()\n        \n        logInfo(`–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–æ: ${getPositionStateName(positionState)}`, source, debug)\n\n        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–∑–∏—Ü–∏–∏\n        switch (positionState) {\n            case 0: // –ó–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è\n                switchToRelay(openRelay, closeRelay, delayMs, source, \"–∑–∞–∫—Ä—ã—Ç–∏—è\")\n                break\n            case 1: // –û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è\n                switchToRelay(closeRelay, openRelay, delayMs, source, \"–æ—Ç–∫—Ä—ã—Ç–∏—è\")\n                break\n            case 2: // –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n                stopAllRelays(openRelay, closeRelay, source)\n                break\n            default:\n                logWarn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏: ${positionState}`, source)\n                stopAllRelays(openRelay, closeRelay, source)\n        }\n\n    } catch (e) {\n        logError(\"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: \" + e.message);\n    }\n}\n\nfunction switchToRelay(currentRelay, targetRelay, delayMs, source, action) {\n    try {\n        // –°–Ω–∞—á–∞–ª–∞ –≤—ã–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–µ–ª–µ (–µ—Å–ª–∏ –æ–Ω–æ –≤–∫–ª—é—á–µ–Ω–æ)\n        if (currentRelay && currentRelay.getCharacteristic(HC.On).getValue()) {\n            currentRelay.getCharacteristic(HC.On).setValue(false)\n            logInfo(`–í—ã–∫–ª—é—á–µ–Ω–æ —Ä–µ–ª–µ ${getDeviceName(currentRelay)}`, source, debug)\n            \n            // –ß–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –≤–∫–ª—é—á–∞–µ–º —Ü–µ–ª–µ–≤–æ–µ —Ä–µ–ª–µ\n            if (targetRelay) {\n                setTimeout(() => {\n                    targetRelay.getCharacteristic(HC.On).setValue(true)\n                    logInfo(`–í–∫–ª—é—á–µ–Ω–æ —Ä–µ–ª–µ ${action}: ${getDeviceName(targetRelay)}`, source, debug)\n                }, delayMs)\n            }\n        } else {\n            // –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Ä–µ–ª–µ –Ω–µ –±—ã–ª–æ –≤–∫–ª—é—á–µ–Ω–æ, —Å—Ä–∞–∑—É –≤–∫–ª—é—á–∞–µ–º —Ü–µ–ª–µ–≤–æ–µ\n            if (targetRelay) {\n                targetRelay.getCharacteristic(HC.On).setValue(true)\n                logInfo(`–í–∫–ª—é—á–µ–Ω–æ —Ä–µ–ª–µ ${action}: ${getDeviceName(targetRelay)}`, source, debug)\n            }\n        }\n    } catch (e) {\n        logError(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–ª–µ: ${e.message}`, source)\n    }\n}\n\nfunction stopAllRelays(openRelay, closeRelay, source) {\n    try {\n        if (openRelay && openRelay.getCharacteristic(HC.On).getValue()) {\n            openRelay.getCharacteristic(HC.On).setValue(false)\n            logInfo(`–í—ã–∫–ª—é—á–µ–Ω–æ —Ä–µ–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è: ${getDeviceName(openRelay)}`, source, debug)\n        }\n        \n        if (closeRelay && closeRelay.getCharacteristic(HC.On).getValue()) {\n            closeRelay.getCharacteristic(HC.On).setValue(false)\n            logInfo(`–í—ã–∫–ª—é—á–µ–Ω–æ —Ä–µ–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è: ${getDeviceName(closeRelay)}`, source, debug)\n        }\n    } catch (e) {\n        logError(`–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–ª–µ: ${e.message}`, source)\n    }\n}\n\nfunction getPositionStateName(state) {\n    switch (state) {\n        case 0: return \"–ó–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è\"\n        case 1: return \"–û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è\"\n        case 2: return \"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\"\n        default: return `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ (${state})`\n    }\n}\n\nfunction getDevice(options, name) {\n    if (options[name] === '') { return undefined; }\n    var service\n    if (options[name] != '') {\n        const cdata = options[name].split('.');\n        const aid = cdata[0];\n        const sid = cdata[1];\n        service = Hub.getAccessory(aid).getService(sid)\n        if (service == null) {\n            logError(\"–í—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ {}\", options[name]);\n            return undefined;\n        } else {\n            return service\n        }\n    }\n    return undefined\n}\n\nfunction logInfo(text, source, show) {\n    if (show) console.info(getLogText(text, source));\n}\nfunction logWarn(text, source) {\n    console.warn(getLogText(text, source));\n}\nfunction logError(text, source) {\n    console.error(getLogText(text, source));\n}\nfunction getLogText(text, source) {\n    return `${text} | ${DEBUG_TITLE} ${getDeviceName(source.getService())}`\n}\n\nfunction getDeviceName(service) {\n    const acc = service.getAccessory();\n    const room = acc.getRoom().getName()\n    const accName = service.getAccessory().getName()\n    const sName = service.getName()\n    const name = room + \" -> \" + (accName == sName ? accName : accName + \" \" + sName) + \" (\" + service.getUUID() + \")\" + (!service.isVisible() ? \". –°–∫—Ä—ã—Ç\" : \"\")\n    return name\n}\n\n// –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ª–æ–≥–∏–∫–∏\nfunction getServicesByServiceAndCharacteristicType(serviceTypes, characteristicType) {\n    let sortedServicesList = []\n    let unsortedServicesList = []\n    Hub.getAccessories().forEach((a) => {\n        a.getServices().filter((s) => serviceTypes.indexOf(s.getType()) >= 0).forEach((s) => {\n            const c = s.getCharacteristic(characteristicType);\n            if (c) {\n                let displayname = getDeviceName(s)\n                unsortedServicesList.push({\n                    name: { ru: displayname, en: displayname },\n                    value: s.getUUID()\n                });\n            }\n        })\n    });\n    sortedServicesList.push({ name: { ru: \"–ù–µ –≤—ã–±—Ä–∞–Ω–æ\", en: \"Not selected\" }, value: '' })\n    unsortedServicesList.sort((a, b) => a.name.ru.localeCompare(b.name.ru)).forEach((s) => sortedServicesList.push(s))\n    return sortedServicesList\n}\n\n// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏\nconst DEBUG_TITLE = \"–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ/—à—Ç–æ—Ä–∞: \";\n",
    "type": "LOGIC"
  }
}