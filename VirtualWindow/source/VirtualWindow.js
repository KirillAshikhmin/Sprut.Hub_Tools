let servicesList = getServicesByServiceAndCharacteristicType([HS.Switch, HS.Outlet], HC.On);

info = {
    name: "ü™ü –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ/—à—Ç–æ—Ä–∞",
    description: "–ü–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∫–Ω–æ–º –∏–ª–∏ —à—Ç–æ—Ä–æ–π —Å –¥–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –º–æ—Ç–æ—Ä–æ–º, –∏—Å–ø–æ–ª—å–∑—É—è –¥–≤–∞ —Ä–µ–ª–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –∑–∞–∫—Ä—ã—Ç–∏—è",
    version: "1.0",
    author: "@BOOMikru",
    onStart: true,

    sourceServices: [HS.Window, HS.WindowCovering],
    sourceCharacteristics: [HC.PositionState],

    options: {
        openRelay: {
            name: {
                en: "Open relay",
                ru: "–†–µ–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è"
            },
            type: "String",
            value: "",
            formType: "list",
            values: servicesList
        },
        closeRelay: {
            name: {
                en: "Close relay",
                ru: "–†–µ–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è"
            },
            type: "String",
            value: "",
            formType: "list",
            values: servicesList
        },
        delayMs: {
            name: {
                en: "Delay between switching (ms)",
                ru: "–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è–º–∏ (–º—Å)"
            },
            type: "Integer",
            value: 100,
            minValue: 0,
            maxValue: 1000,
            step: 10,
            desc: {
                en: "Delay between turning off one relay and turning on another. If your relay has interlock protection, you can set 0",
                ru: "–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≤—ã–∫–ª—é—á–µ–Ω–∏–µ–º –æ–¥–Ω–æ–≥–æ —Ä–µ–ª–µ –∏ –≤–∫–ª—é—á–µ–Ω–∏–µ–º –¥—Ä—É–≥–æ–≥–æ. –ï—Å–ª–∏ —É –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ —Ä–µ–ª–µ –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–ª–æ–∫, —Ç–æ –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å 0"
            }
        }
    }
};

// –í—ã–≤–æ–¥ –≤ –ª–æ–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–∞–±–æ—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
let debug = false

function trigger(source, value, variables, options) {
    try {
        const openRelay = getDevice(options, "openRelay")
        const closeRelay = getDevice(options, "closeRelay")
        const delayMs = options.delayMs || 100

        if (!openRelay && !closeRelay) {
            logError("–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ–ª–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", source)
            return
        }

        const positionState = source.getValue()
        
        logInfo(`–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–æ: ${getPositionStateName(positionState)}`, source, debug)

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–∑–∏—Ü–∏–∏
        switch (positionState) {
            case 0: // –ó–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è
                switchToRelay(openRelay, closeRelay, delayMs, source, "–∑–∞–∫—Ä—ã—Ç–∏—è")
                break
            case 1: // –û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è
                switchToRelay(closeRelay, openRelay, delayMs, source, "–æ—Ç–∫—Ä—ã—Ç–∏—è")
                break
            case 2: // –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
                stopAllRelays(openRelay, closeRelay, source)
                break
            default:
                logWarn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏: ${positionState}`, source)
                stopAllRelays(openRelay, closeRelay, source)
        }

    } catch (e) {
        logError("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: " + e.message);
    }
}

function switchToRelay(currentRelay, targetRelay, delayMs, source, action) {
    try {
        // –°–Ω–∞—á–∞–ª–∞ –≤—ã–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–µ–ª–µ (–µ—Å–ª–∏ –æ–Ω–æ –≤–∫–ª—é—á–µ–Ω–æ)
        if (currentRelay && currentRelay.getCharacteristic(HC.On).getValue()) {
            currentRelay.getCharacteristic(HC.On).setValue(false)
            logInfo(`–í—ã–∫–ª—é—á–µ–Ω–æ —Ä–µ–ª–µ ${getDeviceName(currentRelay)}`, source, debug)
            
            // –ß–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –≤–∫–ª—é—á–∞–µ–º —Ü–µ–ª–µ–≤–æ–µ —Ä–µ–ª–µ
            if (targetRelay) {
                setTimeout(() => {
                    targetRelay.getCharacteristic(HC.On).setValue(true)
                    logInfo(`–í–∫–ª—é—á–µ–Ω–æ —Ä–µ–ª–µ ${action}: ${getDeviceName(targetRelay)}`, source, debug)
                }, delayMs)
            }
        } else {
            // –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Ä–µ–ª–µ –Ω–µ –±—ã–ª–æ –≤–∫–ª—é—á–µ–Ω–æ, —Å—Ä–∞–∑—É –≤–∫–ª—é—á–∞–µ–º —Ü–µ–ª–µ–≤–æ–µ
            if (targetRelay) {
                targetRelay.getCharacteristic(HC.On).setValue(true)
                logInfo(`–í–∫–ª—é—á–µ–Ω–æ —Ä–µ–ª–µ ${action}: ${getDeviceName(targetRelay)}`, source, debug)
            }
        }
    } catch (e) {
        logError(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–ª–µ: ${e.message}`, source)
    }
}

function stopAllRelays(openRelay, closeRelay, source) {
    try {
        if (openRelay && openRelay.getCharacteristic(HC.On).getValue()) {
            openRelay.getCharacteristic(HC.On).setValue(false)
            logInfo(`–í—ã–∫–ª—é—á–µ–Ω–æ —Ä–µ–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è: ${getDeviceName(openRelay)}`, source, debug)
        }
        
        if (closeRelay && closeRelay.getCharacteristic(HC.On).getValue()) {
            closeRelay.getCharacteristic(HC.On).setValue(false)
            logInfo(`–í—ã–∫–ª—é—á–µ–Ω–æ —Ä–µ–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è: ${getDeviceName(closeRelay)}`, source, debug)
        }
    } catch (e) {
        logError(`–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–ª–µ: ${e.message}`, source)
    }
}

function getPositionStateName(state) {
    switch (state) {
        case 0: return "–ó–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è"
        case 1: return "–û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è"
        case 2: return "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        default: return `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ (${state})`
    }
}

function getDevice(options, name) {
    if (options[name] === '') { return undefined; }
    var service
    if (options[name] != '') {
        const cdata = options[name].split('.');
        const aid = cdata[0];
        const sid = cdata[1];
        service = Hub.getAccessory(aid).getService(sid)
        if (service == null) {
            logError("–í—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ {}", options[name]);
            return undefined;
        } else {
            return service
        }
    }
    return undefined
}

function logInfo(text, source, show) {
    if (show) console.info(getLogText(text, source));
}
function logWarn(text, source) {
    console.warn(getLogText(text, source));
}
function logError(text, source) {
    console.error(getLogText(text, source));
}
function getLogText(text, source) {
    return `${text} | ${DEBUG_TITLE} ${getDeviceName(source.getService())}`
}

function getDeviceName(service) {
    const acc = service.getAccessory();
    const room = acc.getRoom().getName()
    const accName = service.getAccessory().getName()
    const sName = service.getName()
    const name = room + " -> " + (accName == sName ? accName : accName + " " + sName) + " (" + service.getUUID() + ")" + (!service.isVisible() ? ". –°–∫—Ä—ã—Ç" : "")
    return name
}

// –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ª–æ–≥–∏–∫–∏
function getServicesByServiceAndCharacteristicType(serviceTypes, characteristicType) {
    let sortedServicesList = []
    let unsortedServicesList = []
    Hub.getAccessories().forEach((a) => {
        a.getServices().filter((s) => serviceTypes.indexOf(s.getType()) >= 0).forEach((s) => {
            const c = s.getCharacteristic(characteristicType);
            if (c) {
                let displayname = getDeviceName(s)
                unsortedServicesList.push({
                    name: { ru: displayname, en: displayname },
                    value: s.getUUID()
                });
            }
        })
    });
    sortedServicesList.push({ name: { ru: "–ù–µ –≤—ã–±—Ä–∞–Ω–æ", en: "Not selected" }, value: '' })
    unsortedServicesList.sort((a, b) => a.name.ru.localeCompare(b.name.ru)).forEach((s) => sortedServicesList.push(s))
    return sortedServicesList
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
const DEBUG_TITLE = "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ/—à—Ç–æ—Ä–∞: ";
