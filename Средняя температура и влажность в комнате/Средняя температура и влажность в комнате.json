{
  "scenarioTemplate": {
    "name": "Средняя температура и влажность в комнате",
    "desc": "",
    "active": true,
    "onStart": true,
    "sync": false,
    "data": "// Использование:\r\n// Создать виртуальное устройство с Датчиком температуры и с Датчиком влажности. Запомнить ид аксессуара.\r\n// Создать блочный сценарий, который или при изменении датчиком или просто планировщиковв каждую, например, минуту,\r\n// вызывать блок кода с вызовом\r\n// global.averageRoomSensors(ROOM_NAME, ACCESSORY_ID);\r\n// Где ROOM_NAME - название комнаты в кавычках (например: \"Спальня\")\r\n// ACCESSORY_ID - ИД виртуального аксессуара (например: 42)\r\n\r\n// Функция для сбора и усреднения показаний датчиков температуры и влажности в одной комнате\r\nfunction averageRoomSensors(roomName, averageDeviceId) {\r\n  // Переменные для хранения сумм показаний и количества датчиков\r\n  let tempSum = 0;\r\n  let humSum = 0;\r\n  let tempSensorCount = 0;\r\n  let humSensorCount = 0;\r\n\r\n  // Получение всех комнат\r\n  const rooms = Hub.getRooms();\r\n\r\n  // Итерация по комнатам\r\n  rooms.forEach(function loopRooms(room) {\r\n    // Проверка соответствия имени комнаты\r\n    if (room.getName() === roomName) {\r\n      // Получение аксессуаров в комнате\r\n      const roomAccessories = room.getAccessories();\r\n\r\n      // Фильтрация аксессуаров и сбор данных\r\n      roomAccessories.filter(function loop(accessory) {\r\n        // Проверка статуса аксессуара (онлайн и не виртуальный)\r\n        const status = accessory.getService(HS.AccessoryInformation).getCharacteristic(HC.C_Online).getValue() == true;\r\n        return status && accessory.getUUID() !== averageDeviceId;\r\n      }).forEach(function loop(accessory) {\r\n        // Получение сервисов температуры и влажности\r\n        const tempService = accessory.getService(HS.TemperatureSensor);\r\n        const humService = accessory.getService(HS.HumiditySensor);\r\n\r\n        // Обработка сервиса температуры\r\n        if (tempService) {\r\n          const tempCharacteristic = tempService.getCharacteristic(HC.CurrentTemperature);\r\n          tempSensorCount++;\r\n          tempSum += tempCharacteristic.getValue();\r\n        }\r\n\r\n        // Обработка сервиса влажности\r\n        if (humService) {\r\n          const humCharacteristic = humService.getCharacteristic(HC.CurrentRelativeHumidity);\r\n          humSensorCount++;\r\n          humSum += humCharacteristic.getValue();\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n  // Вычисление средних значений температуры и влажности\r\n  const avgTemp = tempSensorCount > 0 ? tempSum / tempSensorCount : 0;\r\n  const avgHum = humSensorCount > 0 ? humSum / humSensorCount : 0;\r\n\r\n  // Обновление значений виртуального устройства\r\n  Hub.setCharacteristicValue(averageDeviceId, 15, avgTemp); // Установка значения температуры\r\n  Hub.setCharacteristicValue(averageDeviceId, 18, avgHum); // Установка значения влажности\r\n}",
    "type": "GLOBAL"
  }
}