{
  "scenarioTemplate": {
    "name": "Циркадное освещение. Глобальный",
    "desc": "Используется для установления режима циркадного освещения (яркость и температура) из блочных или логического сценариев.\n\nПримеры:\nУстановить для одной лампочки: global.setCircadianLight(99);\nУстановить для нескольких лампочек global.setCircadianLight([97,98,99]);\nТак же в метод setCircadianLight можно передать 2 параметра:\npreset (Integer) - режим работы\ndontChangeBright (Boolean) - не менять яркость при её ручном изменении\n\nПолучить значение температуры и яркости для текущего часа и минуты:\nlet tempAndBright = global.getCircadianLight(preset);\npreset (Integer) - режим работы\nРезультат будет в виде массива\ntempAndBright[0] - температура\ntempAndBright[1] - яркость.\nИспользуется, если необходимо получить только одно значение, например при использовании лампочки в качестве будильника получать температуру, а яркость увеличивать постепенно.",
    "active": true,
    "onStart": true,
    "sync": false,
    "data": "// Режим: { Час: [Температура, Яркость] }\r\nvar onTime = {\r\n\r\n    // Долго держится большая яркость, температура света утром холоднеет медленнее\r\n    0: {\r\n        0: [400, 60],\r\n        1: [400, 60],\r\n        2: [400, 60],\r\n        3: [400, 30],\r\n        4: [400, 30],\r\n        5: [400, 30],\r\n        6: [400, 70],\r\n        7: [350, 100],\r\n        8: [300, 100],\r\n        9: [250, 100],\r\n        10: [150, 100],\r\n        11: [100, 100],\r\n        12: [50, 100],\r\n        13: [50, 100],\r\n        14: [50, 100],\r\n        15: [50, 100],\r\n        16: [100, 100],\r\n        17: [150, 100],\r\n        18: [200, 100],\r\n        19: [250, 100],\r\n        20: [300, 90],\r\n        21: [350, 60],\r\n        22: [400, 60],\r\n        23: [400, 60]\r\n    },\r\n\r\n    // Яркость вечером уменьшается раньше, утром включается холодный свет\r\n    1: {\r\n        0: [400, 20],\r\n        1: [400, 20],\r\n        2: [400, 10],\r\n        3: [400, 10],\r\n        4: [400, 10],\r\n        5: [400, 10],\r\n        6: [150, 70],\r\n        7: [100, 100],\r\n        8: [50, 100],\r\n        9: [50, 100],\r\n        10: [50, 100],\r\n        11: [50, 100],\r\n        12: [50, 100],\r\n        13: [50, 100],\r\n        14: [50, 100],\r\n        15: [50, 100],\r\n        16: [100, 100],\r\n        17: [150, 100],\r\n        18: [200, 100],\r\n        19: [250, 100],\r\n        20: [300, 90],\r\n        21: [350, 60],\r\n        22: [400, 40],\r\n        23: [400, 30]\r\n    },\r\n    // С постоянной максимальной яркостью. утром включается холодный свет\r\n    2: {\r\n        0: [400, 100],\r\n        1: [400, 100],\r\n        2: [400, 100],\r\n        3: [400, 100],\r\n        4: [400, 100],\r\n        5: [400, 100],\r\n        6: [300, 100],\r\n        7: [150, 100],\r\n        8: [50, 100],\r\n        9: [50, 100],\r\n        10: [50, 100],\r\n        11: [50, 100],\r\n        12: [50, 100],\r\n        13: [50, 100],\r\n        14: [50, 100],\r\n        15: [50, 100],\r\n        16: [100, 100],\r\n        17: [150, 100],\r\n        18: [200, 100],\r\n        19: [250, 100],\r\n        20: [300, 100],\r\n        21: [350, 100],\r\n        22: [400, 100],\r\n        23: [400, 100]\r\n    }\r\n}\r\n\r\n// Константы для улучшения читаемости\r\nconst MIN_BRIGHTNESS = 1;\r\nconst MAX_BRIGHTNESS = 100;\r\nconst MIN_COLOR_TEMPERATURE = 50;\r\nconst MAX_COLOR_TEMPERATURE = 400;\r\nconst MINUTES_IN_HOUR = 60;\r\n\r\nconst CIRCADIAN_LIGHT_DEBUG = false;\r\nconst CIRCADIAN_LIGHT_DEBUG_INFO = false;\r\n\r\nfunction getCircadianLight(preset) {\r\n    const date = new Date()\r\n    const hours = date.getHours();\r\n    const minute = date.getMinutes();\r\n\r\n    let onTimePreset = onTime[0]\r\n    if (preset) {\r\n        preset = Number(preset)\r\n        if (!isNaN(preset) && preset in onTime) {\r\n            onTimePreset = onTime[preset]\r\n        }\r\n    }\r\n    const tempAndBright = onTimePreset[hours]\r\n    const nextTempAndBright = hours < 23 ? onTimePreset[hours + 1] : onTimePreset[hours];\r\n\r\n    var temp = tempAndBright[0] + ((nextTempAndBright[0] - tempAndBright[0]) / MINUTES_IN_HOUR * minute)\r\n    var bright = tempAndBright[1] + ((nextTempAndBright[1] - tempAndBright[1]) / MINUTES_IN_HOUR * minute)\r\n    if (CIRCADIAN_LIGHT_DEBUG) console.info(\"Циркадное освещение. Получение. Время {}:{}. Режим {}. Температура {} и яркость {}\", hours, minute, preset, temp, bright)\r\n    temp = Math.round(Math.max(MIN_COLOR_TEMPERATURE, Math.min(MAX_COLOR_TEMPERATURE, temp))) | 0;\r\n    bright = Math.round(Math.max(MIN_BRIGHTNESS, Math.min(MAX_BRIGHTNESS, bright))) | 0;\r\n    return [temp, bright];\r\n}\r\n\r\n\r\nfunction setCircadianLightForService(service, preset, dontChangeBright, dontChangeTemp, dontChangeHue, dontChangeSaturate) {\r\n\r\n    if (CIRCADIAN_LIGHT_DEBUG)\r\n        console.info(\r\n            \"Циркадное освещение. Сервис {}. Режим: {}, Не менять: яркость: {}, температуру: {}, оттенок: {}, насыщенность: {}\",\r\n            service.getType(),\r\n            preset,\r\n            dontChangeBright,\r\n            dontChangeTemp,\r\n            dontChangeHue,\r\n            dontChangeSaturate\r\n        )\r\n\r\n    if (service.getType() != HS.Lightbulb) return;\r\n\r\n    const tempAndBright = getCircadianLight(preset);\r\n    const temp = tempAndBright[0];\r\n    const bright = tempAndBright[1];\r\n    let hueAndSaturation = [0, 0]\r\n\r\n    let allowTemperatureChange = !dontChangeTemp\r\n    let allowHueChange = !dontChangeHue\r\n    let allowSaturationChange = !dontChangeSaturate\r\n    let allowBrightChange = !dontChangeBright\r\n\r\n    const brightness = service.getCharacteristic(HC.Brightness);\r\n    if (brightness == null) {\r\n        console.warn(\"Циркадное освещение. Лампочка {}, не умеет изменять яркость\", source.getAccessory())\r\n        return;\r\n    }\r\n\r\n    const temperature = service.getCharacteristic(HC.ColorTemperature);\r\n    if (temperature == null) {\r\n        allowTemperatureChange = false\r\n    }\r\n\r\n    const hue = service.getCharacteristic(HC.Hue);\r\n    const saturation = service.getCharacteristic(HC.Saturation);\r\n    if (hue == null || saturation == null) {\r\n        allowHueChange = hue != null\r\n        allowSaturationChange = saturation != null\r\n    } else {\r\n        hueAndSaturation = getHueAndSaturationFromMired(temp)\r\n    }\r\n\r\n    if (!allowBrightChange && !allowTemperatureChange && !allowHueChange && !allowSaturationChange) {\r\n        console.warn(\"Циркадное освещение. Для лампочки {}, запрещено менять все параметры сценарием или свойствами\", source.getAccessory())\r\n        return\r\n    }\r\n\r\n    const bulb = service.getCharacteristic(HC.On);\r\n    bulb.setValue(true);\r\n\r\n    if (CIRCADIAN_LIGHT_DEBUG_INFO) {\r\n        const accName = service.getAccessory().getName()\r\n        const sName = service.getName()\r\n        const name = accName == sName ? accName : accName + \" \" + sName\r\n\r\n        var text = \"Циркадное освещение. \" + name + \". Установлено: \"\r\n        if (allowBrightChange) text += \" Яркость \" + bright + \";\"\r\n        if (allowTemperatureChange) text += \" Температура \" + temp + \";\"\r\n        else {\r\n            if (allowHueChange) text += \" Оттенок \" + hueAndSaturation[0] + \";\"\r\n            if (allowSaturationChange) text += \" Насыщенность \" + hueAndSaturation[1] + \";\"\r\n        }\r\n        console.info(text)\r\n    }\r\n\r\n    if (allowTemperatureChange) {\r\n        temperature.setValue(temp);\r\n    } else {\r\n        if (allowHueChange) hue.setValue(hueAndSaturation[0])\r\n        if (allowSaturationChange) saturation.setValue(hueAndSaturation[1])\r\n    }\r\n\r\n    if (allowBrightChange)\r\n        brightness.setValue(bright)\r\n}\r\n\r\nfunction setCircadianLight(aId, preset, dontChangeBright, dontChangeTemp, dontChangeHue, dontChangeSaturate) {\r\n    if (!Array.isArray(aId)) {\r\n        aId = [aId];\r\n    }\r\n\r\n    for (var i in aId) {\r\n        let accessoryId = aId[i];\r\n        let accessory = Hub.getAccessory(accessoryId);\r\n        if (accessory == null) {\r\n            console.error(\"Лампочка {} не найдена\", accessoryId);\r\n            return;\r\n        }\r\n\r\n        let service = accessory.getService(HS.Lightbulb);\r\n        setCircadianLightForService(service, preset, dontChangeBright, dontChangeTemp, dontChangeHue, dontChangeSaturate)\r\n    }\r\n}\r\n\r\nconst miredToHueAndSaturation = {\r\n    50: [210, 30],\r\n    60: [205, 28],\r\n    70: [200, 26],\r\n    80: [195, 24],\r\n    90: [190, 22],\r\n    100: [185, 20],\r\n    110: [180, 18],\r\n    120: [170, 12],\r\n    130: [160, 6],\r\n    140: [150, 0],\r\n    150: [140, 0],\r\n    160: [130, 0],\r\n    170: [120, 0],\r\n    180: [110, 0],\r\n    190: [100, 0],\r\n    200: [90, 0],\r\n    210: [80, 4],\r\n    220: [70, 8],\r\n    230: [60, 16],\r\n    240: [55, 20],\r\n    250: [50, 24],\r\n    260: [45, 28],\r\n    270: [40, 32],\r\n    280: [35, 36],\r\n    290: [33, 40],\r\n    300: [32, 44],\r\n    310: [31, 48],\r\n    320: [30, 52],\r\n    330: [30, 56],\r\n    340: [30, 60],\r\n    350: [30, 64],\r\n    360: [30, 68],\r\n    370: [30, 72],\r\n    380: [30, 76],\r\n    390: [30, 78],\r\n    400: [30, 80]\r\n};\r\n\r\nfunction getHueAndSaturationFromMired(mired) {\r\n    if (mired < 50 || mired > 400) {\r\n        throw new Error(\"Mired value must be between 50 and 400.\");\r\n    }\r\n    var hueAndSat = miredToHueAndSaturation\r\n    if (mired % 10 === 0) {\r\n        return hueAndSat[mired];\r\n    } else {\r\n        const lowerMired = mired - (mired % 10)\r\n        const lower = hueAndSat[lowerMired]\r\n        const upper = hueAndSat[mired + (10 - (mired % 10))]\r\n\r\n        const t = (mired - lowerMired) / 10;\r\n        const hue = Math.round(lower[0] + t * (upper[0] - lower[0])) | 0;\r\n        const saturation = Math.round(lower[1] + t * (upper[1] - lower[1])) | 0;\r\n\r\n        return [hue, saturation];\r\n    }\r\n}",
    "type": "GLOBAL"
  }
}