{
  "scenarioTemplate": {
    "name": "Циркадное освещение. Глобальный",
    "desc": "Используется для установления режима циркадного освещения (яркость и температура) из блочных шаблонов.\n\nПримеры:\nУстановить для одной лампочки: global.setCircadianLight(99);\nУстановить для нескольких лампочек global.setCircadianLight([97,98,99]);\nТак же в метод setCircadianLight можно передать 3 параметра:\ndontIncreaseBrightAtEvening (Boolean) - не увеличивать яркость вечером\npreset (Integer) - режим работы\ndontChangeBright (Boolean) - не менять яркость при её ручном изменении\n\nПолучить значение температуры и яркости для текущего часа и минуты:\nlet tempAndBright = global.getCircadianLight();\nРезультат будет в виде массива\ntempAndBright[0] - температура\ntempAndBright[1] - яркость.\nИспользуется, если необходимо получить только одно значение, например при использовании лампочки в качестве будильника получать температуру, а яркость увеличивать постепенно.",
    "active": true,
    "onStart": true,
    "sync": false,
    "data": "// [Режим, [Час, [Температура, Яркость]]]\r\nvar onTime = [\r\n    [0, //Спальня\r\n        [0, [400, 60]],\r\n        [1, [400, 60]],\r\n        [2, [400, 60]],\r\n        [3, [400, 30]],\r\n        [4, [400, 30]],\r\n        [5, [400, 30]],\r\n        [6, [400, 70]],\r\n        [7, [350, 100]],\r\n        [8, [300, 100]],\r\n        [9, [250, 100]],\r\n        [10, [200, 100]],\r\n        [11, [150, 100]],\r\n        [12, [100, 100]],\r\n        [13, [50, 100]],\r\n        [14, [50, 100]],\r\n        [15, [50, 100]],\r\n        [16, [100, 100]],\r\n        [17, [150, 100]],\r\n        [18, [200, 100]],\r\n        [19, [250, 100]],\r\n        [20, [300, 90]],\r\n        [21, [350, 60]],\r\n        [22, [400, 60]],\r\n        [23, [400, 60]]\r\n    ],\r\n    [1, // Санузел\r\n        [0, [400, 20]],\r\n        [1, [400, 20]],\r\n        [2, [400, 10]],\r\n        [3, [400, 10]],\r\n        [4, [400, 10]],\r\n        [5, [400, 10]],\r\n        [6, [150, 70]],\r\n        [7, [100, 100]],\r\n        [8, [50, 100]],\r\n        [9, [50, 100]],\r\n        [10, [50, 100]],\r\n        [11, [50, 100]],\r\n        [12, [50, 100]],\r\n        [13, [50, 100]],\r\n        [14, [50, 100]],\r\n        [15, [50, 100]],\r\n        [16, [100, 100]],\r\n        [17, [150, 100]],\r\n        [18, [200, 100]],\r\n        [19, [250, 100]],\r\n        [20, [300, 90]],\r\n        [21, [350, 60]],\r\n        [22, [400, 40]],\r\n        [23, [400, 30]]\r\n    ],\r\n    [2, // Кухня\r\n        [0, [400, 100]],\r\n        [1, [400, 100]],\r\n        [2, [400, 100]],\r\n        [3, [400, 100]],\r\n        [4, [400, 100]],\r\n        [5, [400, 100]],\r\n        [6, [400, 100]],\r\n        [7, [350, 100]],\r\n        [8, [300, 100]],\r\n        [9, [250, 100]],\r\n        [10, [200, 100]],\r\n        [11, [150, 100]],\r\n        [12, [100, 100]],\r\n        [13, [50, 100]],\r\n        [14, [50, 100]],\r\n        [15, [50, 100]],\r\n        [16, [100, 100]],\r\n        [17, [150, 100]],\r\n        [18, [200, 100]],\r\n        [19, [250, 100]],\r\n        [20, [300, 100]],\r\n        [21, [350, 100]],\r\n        [22, [400, 100]],\r\n        [23, [400, 100]]\r\n    ]\r\n]\r\n\r\n// Константы для улучшения читаемости\r\nconst MIN_BRIGHTNESS = 1;\r\nconst MAX_BRIGHTNESS = 100;\r\nconst MIN_COLOR_TEMPERATURE = 50;\r\nconst MAX_COLOR_TEMPERATURE = 400;\r\nconst MINUTES_IN_HOUR = 60;\r\n\r\nconst DEBUG = false;\r\nconst DEBUG_INFO = false;\r\n\r\nfunction getCircadianLight(preset) {\r\n    var date = new Date()\r\n    var hours = date.getHours();\r\n    var minute = date.getMinutes();\r\n\r\n    var onTimePreset = onTime[0]\r\n    if (preset) {\r\n        preset = Number(preset)\r\n        if (!isNaN(preset) && preset in onTime) {\r\n            onTimePreset = onTime[preset]\r\n        }\r\n    }\r\n\r\n    var tempAndBright = onTimePreset[hours + 1][1]\r\n    var nextTempAndBright = hours < 23 ? onTimePreset[hours + 2][1] : onTimePreset[hours + 1][1];\r\n\r\n    var temp = Math.round(tempAndBright[0] + ((nextTempAndBright[0] - tempAndBright[0]) / MINUTES_IN_HOUR * minute))\r\n    var bright = Math.round(tempAndBright[1] + ((nextTempAndBright[1] - tempAndBright[1]) / MINUTES_IN_HOUR * minute))\r\n    if (DEBUG) console.info(\"Циркадное освещение. Получение. Время {}:{}. Режим {}. Температура {} и яркость {}\", hours, minute, preset, temp, bright)\r\n    temp = Math.max(MIN_COLOR_TEMPERATURE, Math.min(MAX_COLOR_TEMPERATURE, temp));\r\n    bright = Math.max(MIN_BRIGHTNESS, Math.min(MAX_BRIGHTNESS, bright));\r\n    return [temp, bright];\r\n}\r\n\r\n\r\nfunction setCircadianLightForService(service, preset, dontChangeBright) {\r\n\r\n    if (DEBUG) console.info(\"Циркадное освещение. Сервис {}. Режим: {}, Не менять яркость: {}\", service.getType(), preset, dontChangeBright)\r\n\r\n    if (service.getType() != HS.Lightbulb) return;\r\n\r\n    var tempAndBright = getCircadianLight(preset);\r\n    let temp = tempAndBright[0];\r\n    let bright = tempAndBright[1];\r\n\r\n    let allowTemperatureChange = true\r\n    let allowBrightChange = !dontChangeBright\r\n\r\n    let brightness = service.getCharacteristic(HC.Brightness);\r\n    if (brightness == null) {\r\n        console.warn(\"Циркадное освещение. Лампочка {}, не умеет изменять яркость\", source.getAccessory())\r\n        return;\r\n    }\r\n\r\n    let temperature = service.getCharacteristic(HC.ColorTemperature);\r\n    if (temperature == null) {\r\n        allowTemperatureChange = false\r\n    }\r\n\r\n    let bulb = service.getCharacteristic(HC.On);\r\n    bulb.setValue(true);\r\n\r\n    if (DEBUG_INFO) {\r\n        let accName = service.getAccessory().getName()\r\n        let sName = service.getName()\r\n        let name = accName == sName ? accName : accName + \" \" + sName\r\n        if (allowBrightChange && allowTemperatureChange)\r\n            console.info(\"Циркадное освещение. Установлена температура {} и яркость {} для {}\", temp, bright, name)\r\n        else if (allowBrightChange)\r\n            console.info(\"Циркадное освещение. Установлена яркость {} для {}\", bright, name)\r\n        else if (allowTemperatureChange)\r\n            console.info(\"Циркадное освещение. Установлена температура {} для {}\", temp, name)\r\n        else\r\n            console.info(\"Циркадное освещение. Температура и яркость не изменены для {}\", name)\r\n    }\r\n\r\n    if (allowTemperatureChange)\r\n        temperature.setValue(temp);\r\n    if (allowBrightChange)\r\n        brightness.setValue(bright)\r\n}\r\n\r\nfunction setCircadianLight(aId, preset, dontChangeBright) {\r\n    if (!Array.isArray(aId)) {\r\n        aId = [aId];\r\n    }\r\n\r\n    for (var i in aId) {\r\n        let accessoryId = aId[i];\r\n        let accessory = Hub.getAccessory(accessoryId);\r\n        if (accessory == null) {\r\n            console.error(\"Лампочка {} не найдена\", accessoryId);\r\n            return;\r\n        }\r\n\r\n        let service = accessory.getService(HS.Lightbulb);\r\n        setCircadianLightForService(service, preset, dontChangeBright)\r\n    }\r\n}",
    "type": "GLOBAL"
  }
}