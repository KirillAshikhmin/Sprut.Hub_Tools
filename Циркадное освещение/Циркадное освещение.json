{
  "scenarioTemplate": {
    "name": "Циркадное освещение",
    "desc": "Циркадное освещение. Устанавливает цвет и яркость лампы в зависимости от времени. Значение берется из глобального сценария",
    "active": true,
    "onStart": true,
    "sync": false,
    "data": "info = {\r\n  name: \"Циркадное освещение\",\r\n  description: \"Циркадное освещение. Устанавливает цвет и яркость лампы в зависимости от времени. Значение берется из глобального сценария\",\r\n  version: \"1.0\",\r\n  author: \"@BOOMikru\",\r\n\r\n  sourceServices: [HS.Lightbulb],\r\n  sourceCharacteristics: [HC.On, HC.Brightness],\r\n\r\n  options: {\r\n    DontChangeBright: {\r\n      name: {\r\n        en: \"Dont change brightness automatically\",\r\n        ru: \"Не менять яркость автоматически после ручного изменения\"\r\n      },\r\n      type: \"Boolean\",\r\n      value: \"true\"\r\n    },\r\n    TurnOnByBrightChange: {\r\n      name: {\r\n        en: \"Turn on by bright change\",\r\n        ru: \"Связь включения и уровня. Для циркадного режима необходимо использовать этот параметр, а стандартную одноимённую логику отключить\"\r\n      },\r\n      type: \"Boolean\",\r\n      value: \"true\"\r\n    },\r\n    Preset: {\r\n      name: {\r\n        en: \"Preset\",\r\n        ru: \"Режим работы (0 - для спальни, 1 - для санузла, 2 - для кухни (с постоянной максимальной яркостью). Можно добавлять и редактировать в глобальном шаблоне)\"\r\n      },\r\n      type: \"Integer\",\r\n      value: \"0\"\r\n    }\r\n  },\r\n\r\n  variables: {\r\n    //Задача на обновление\r\n    cronTask: undefined,\r\n    // Яркость изменена вручную\r\n    brightChanged: false,\r\n    // Лампа включена изменением яркости\r\n    turnOnByBright: false,\r\n  }\r\n}\r\n\r\n\r\nfunction trigger(source, value, variables, options) {\r\n  let isLampOn = source.getService().getCharacteristic(HC.On).getValue()\r\n  let isBright = source.getType() == HC.Brightness\r\n\r\n  // Изменили яркость\r\n  if (isBright) {\r\n    variables.turnOnByBright = !isLampOn\r\n    // Связь включения и уровня\r\n    if (options.TurnOnByBrightChange)\r\n      source.getService().getCharacteristic(HC.On).setValue(true);\r\n\r\n    // Если включено \"Не менять яркость\", и ещё не меняли\r\n    if (options.DontChangeBright && !variables.brightChanged) {\r\n      if (variables.turnOnByBright) {\r\n        variables.brightChanged = true\r\n      } else {\r\n        // событие вызывается и при автоматической смене яркости\r\n        let circadianBright = global.getCircadianLight(options.Preset)[1]\r\n        let changed = circadianBright != value\r\n        variables.brightChanged = changed\r\n      }\r\n    }\r\n  } else {\r\n    // Включили или выключили\r\n    if (value) {\r\n\r\n      let brightness = source.getService().getCharacteristic(HC.Brightness);\r\n      if (brightness == null) {\r\n        console.error(\"Лампочка {}, не умеет изменять яркость\", source.getAccessory())\r\n        return;\r\n      }\r\n\r\n      // не менять яркость, если поменяли вручную\r\n      var dontChangeBright = variables.brightChanged == true;\r\n      global.setCircadianLightForService(source.getService(), options.Preset, dontChangeBright);\r\n\r\n      // Отменяем задачу на обновление\r\n      if (variables.cronTask && variables.cronTask != undefined) {\r\n        variables.cronTask.clear()\r\n      }\r\n\r\n      // Запускаем новую задачу на обновление\r\n      let task = Cron.schedule(\"0 */5 * * * *\", function () {\r\n        dontChangeBright = variables.brightChanged == true;\r\n        global.setCircadianLightForService(source.getService(), options.Preset, dontChangeBright);\r\n      });\r\n      variables.cronTask = task;\r\n\r\n    } else {\r\n      // Выключили лампу. Отменяем задачу на циркаду и сбрасываем параметры\r\n      if (variables.cronTask) {\r\n        variables.cronTask.clear()\r\n        variables.cronTask = undefined;\r\n      }\r\n      variables.brightChanged = false\r\n      variables.turnOnByBright = false\r\n    }\r\n  }\r\n}",
    "type": "LOGIC"
  }
}